"use strict";(self.webpackChunkdocusaurus_classic_typescript=self.webpackChunkdocusaurus_classic_typescript||[]).push([[8669],{3905:(n,e,t)=>{t.d(e,{Zo:()=>p,kt:()=>d});var r=t(67294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function s(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function a(n,e){if(null==n)return{};var t,r,o=function(n,e){if(null==n)return{};var t,r,o={},i=Object.keys(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var c=r.createContext({}),l=function(n){var e=r.useContext(c),t=e;return n&&(t="function"==typeof n?n(e):s(s({},e),n)),t},p=function(n){var e=l(n.components);return r.createElement(c.Provider,{value:e},n.children)},u={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(n,e){var t=n.components,o=n.mdxType,i=n.originalType,c=n.parentName,p=a(n,["components","mdxType","originalType","parentName"]),m=l(t),d=o,y=m["".concat(c,".").concat(d)]||m[d]||u[d]||i;return t?r.createElement(y,s(s({ref:e},p),{},{components:t})):r.createElement(y,s({ref:e},p))}));function d(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var i=t.length,s=new Array(i);s[0]=m;var a={};for(var c in e)hasOwnProperty.call(e,c)&&(a[c]=e[c]);a.originalType=n,a.mdxType="string"==typeof n?n:o,s[1]=a;for(var l=2;l<i;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},85041:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var r=t(87462),o=(t(67294),t(3905));const i={sidebar_position:0},s="python",a={unversionedId:"index",id:"index",title:"python",description:"",source:"@site/notes/python/index.md",sourceDirName:".",slug:"/",permalink:"/notes/python/",draft:!1,tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"tutorialSidebar",next:{title:"celery",permalink:"/notes/python/celery"}},c={},l=[],p={toc:l};function u(n){let{components:e,...t}=n;return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"python"},"python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# mysql-clients\nyay -S --noconfirm mysql-clients gcc\npip install mysqlclient\n\n\n# json\njson.dumps(item, ensure_ascii=False, indent=4)\n\n# \u5bf9\u5b57\u5178\u6392\u5e8f\nsorted(_dict.items(), key=lambda d: d[1], reverse=False)\n\n# unicode replace\nrepr()\n\n# http server\npy2 python -m SimpleHTTPServer 8000\npy3 python -m http.server 8000\n\n# \u683c\u5f0f\u5316\u8f93\u51fa\nprint(\"{:02d}\".format(1))\nprint(f\"{1:02d}\")\n\n# datetime\npip install python-dateutil\n\n# yestoday\nfrom datetime import datetime, timedelta\n\n# days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0\nyestoday = datetime.today() - timedelta(days=1)\nprint(yestoday)\n\nfrom datetime import datetime\nfrom dateutil import parser\n\nformat_time = datetime.now().strftime(\"%m/%d/%Y, %H:%M:%S\")\n\nt = \"Thu, 9 Sep 2021 00:17:59\"\nresult = parser.parse(t)\nprint(result)\nprint(type(result))\n\nnow = datetime.now()\nprint((now - result).days)\n\n>>> import arrow\n>>> arrow.get('2013-05-11T21:23:58.970460+07:00')\n<Arrow [2013-05-11T21:23:58.970460+07:00]>\n\n>>> utc = arrow.utcnow()\n>>> utc\n<Arrow [2013-05-11T21:23:58.970460+00:00]>\n\n>>> utc = utc.shift(hours=-1)\n>>> utc\n<Arrow [2013-05-11T20:23:58.970460+00:00]>\n\n>>> local = utc.to('US/Pacific')\n>>> local\n<Arrow [2013-05-11T13:23:58.970460-07:00]>\n\n>>> local.timestamp()\n1368303838.970460\n\n>>> local.format()\n'2013-05-11 13:23:58 -07:00'\n\n>>> local.format('YYYY-MM-DD HH:mm:ss ZZ')\n'2013-05-11 13:23:58 -07:00'\n\n>>> local.humanize()\n'an hour ago'\n\n>>> local.humanize(locale='ko-kr')\n'\ud55c\uc2dc\uac04 \uc804'\n\n# read big file\nwith open(\"log.txt\") as infile:\n    for line in infile:\n        do_something_with(line)\n        \n# csv\nimport csv\n\n# read\nresult = []\ninput_file = csv.DictReader(open(\"result.csv\"))\nfor row in input_file:\n    result.append(row)\nprint(result)\n\n\n# write dict\nmy_dict = {\"test\": 1, \"testing\": 2}\nwith open('mycsvfile.csv', 'w', encoding=\"utf-8-sig\") as f:  # You will need 'wb' mode in Python 2.x\n    w = csv.DictWriter(f, my_dict.keys())\n    w.writeheader()\n    w.writerow(my_dict)\n\n# write list\nresult = [{\"test\": 1, \"testing\": 2}, {\"test\": 1, \"testing\": 2}]\nwith open('mycsvfile.csv', 'w', encoding=\"utf-8-sig\") as f:  # You will need 'wb' mode in Python 2.x\n    w = csv.DictWriter(f, result[0].keys())\n    w.writeheader()\n    w.writerows(result)\n\n# asyncio\nimport asyncio\nimport time\n\ndef now(): return time.time()\n\nasync def do_some_work(x):\n    print('Waiting: ', x)\n\n    await asyncio.sleep(x)\n    return 'Done after {}s'.format(x)\n\nstart = now()\n\ncoroutine1 = do_some_work(1)\ncoroutine2 = do_some_work(2)\ncoroutine3 = do_some_work(4)\n\ntasks = [\n    asyncio.ensure_future(coroutine1),\n    asyncio.ensure_future(coroutine2),\n    asyncio.ensure_future(coroutine3)\n]\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(asyncio.wait(tasks))\n\nfor task in tasks:\n    print('Task ret: ', task.result())\n\nprint('TIME: ', now() - start)\n\n\n# yield \ndef create_generator(_range):\n    for i in range(_range):\n        yield i\n\nresult = create_generator(5)\nfor i in result:\n    print(i)\n\n\n# xmljson\nimport xmljson\nfrom lxml.etree import  fromstring,tostring\n\njson.loads(json.dumps(xmljson.badgerfish.data(fromstring(con.encode()))))\n\n# \u4e58\u6cd5\u8868 \nprint ('\\n'.join([' '.join(['%s*%s=%-2s' % (y,x,x*y) for y in range(1,x+1)]) for x in range(1,10)]))\n")))}u.isMDXComponent=!0}}]);