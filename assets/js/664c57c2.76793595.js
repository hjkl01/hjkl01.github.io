"use strict";(self.webpackChunknotes_3_5_2=self.webpackChunknotes_3_5_2||[]).push([[8995],{3830:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var t=a(4848),i=a(8453);const o={},s="immich",c={id:"immich",title:"immich",description:"docker-compose.yml",source:"@site/notes/docker/immich.md",sourceDirName:".",slug:"/immich",permalink:"/notes/docker/immich",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"API tool: httpbin hoppscotch",permalink:"/notes/docker/hoppscotch"},next:{title:"jackett",permalink:"/notes/docker/jackett"}},r={},l=[{value:"docker-compose.yml",id:"docker-composeyml",level:3},{value:".env",id:"env",level:3}];function m(e){const n={code:"code",h1:"h1",h3:"h3",header:"header",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"immich",children:"immich"})}),"\n",(0,t.jsx)(n.h3,{id:"docker-composeyml",children:"docker-compose.yml"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'#\n# WARNING: Make sure to use the docker-compose.yml of the current release:\n#\n# https://github.com/immich-app/immich/releases/latest/download/docker-compose.yml\n#\n# The compose file on main may not be compatible with the latest release.\n#\n\nname: immich\n\nservices:\n  immich-server:\n    container_name: immich_server\n    # image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}\n    image: ghcr.hjkl01.cn/immich-app/immich-server:${IMMICH_VERSION:-release}\n    # extends:\n    #   file: hwaccel.transcoding.yml\n    #   service: cpu # set to one of [nvenc, quicksync, rkmpp, vaapi, vaapi-wsl] for accelerated transcoding\n    volumes:\n      # Do not edit the next line. If you want to change the media storage location on your system, edit the value of UPLOAD_LOCATION in the .env file\n      - ./data/immich/upload:/usr/src/app/upload\n      # - ${UPLOAD_LOCATION}:/usr/src/app/upload\n      - /etc/localtime:/etc/localtime:ro\n    env_file:\n      - .env\n    ports:\n      - \'2283:2283\'\n    depends_on:\n      - redis\n      - database\n    restart: always\n    healthcheck:\n      disable: false\n\n  immich-machine-learning:\n    container_name: immich_machine_learning\n    # For hardware acceleration, add one of -[armnn, cuda, openvino] to the image tag.\n    # Example tag: ${IMMICH_VERSION:-release}-cuda\n    # image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}\n    image: ghcr.hjkl01.cn/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}\n    # extends: # uncomment this section for hardware acceleration - see https://immich.app/docs/features/ml-hardware-acceleration\n    #   file: hwaccel.ml.yml\n    #   service: cpu # set to one of [armnn, cuda, openvino, openvino-wsl] for accelerated inference - use the `-wsl` version for WSL2 where applicable\n    volumes:\n      - ./data/immich_machine_learning/model-cache:/cache\n    env_file:\n      - .env\n    restart: always\n    healthcheck:\n      disable: false\n\n  redis:\n    container_name: immich_redis\n    image: docker.io/redis:6.2-alpine@sha256:eaba718fecd1196d88533de7ba49bf903ad33664a92debb24660a922ecd9cac8\n    healthcheck:\n      test: redis-cli ping || exit 1\n    restart: always\n\n  database:\n    container_name: immich_postgres\n    image: docker.io/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0\n    environment:\n      POSTGRES_PASSWORD: ${DB_PASSWORD}\n      POSTGRES_USER: ${DB_USERNAME}\n      POSTGRES_DB: ${DB_DATABASE_NAME}\n      POSTGRES_INITDB_ARGS: \'--data-checksums\'\n    volumes:\n      # Do not edit the next line. If you want to change the database storage location on your system, edit the value of DB_DATA_LOCATION in the .env file\n      - ./data/immich_postgres/data:/var/lib/postgresql/data\n    healthcheck:\n      test: >-\n        pg_isready --dbname="$${POSTGRES_DB}" --username="$${POSTGRES_USER}" || exit 1;\n        Chksum="$$(psql --dbname="$${POSTGRES_DB}" --username="$${POSTGRES_USER}" --tuples-only --no-align\n        --command=\'SELECT COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database\')";\n        echo "checksum failure count is $$Chksum";\n        [ "$$Chksum" = \'0\' ] || exit 1\n      interval: 5m\n      start_interval: 30s\n      start_period: 5m\n    command: >-\n      postgres\n      -c shared_preload_libraries=vectors.so\n      -c \'search_path="$$user", public, vectors\'\n      -c logging_collector=on\n      -c max_wal_size=2GB\n      -c shared_buffers=512MB\n      -c wal_compression=on\n    restart: always\n'})}),"\n",(0,t.jsx)(n.h3,{id:"env",children:".env"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'# You can find documentation for all the supported env variables at https://immich.app/docs/install/environment-variables\n\n# The location where your uploaded files are stored\nUPLOAD_LOCATION=./library\n# The location where your database files are stored\nDB_DATA_LOCATION=./postgres\n\n# To set a timezone, uncomment the next line and change Etc/UTC to a TZ identifier from this list: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List\n# TZ=Etc/UTC\n\n# The Immich version to use. You can pin this to a specific version like "v1.71.0"\nIMMICH_VERSION=release\n\n# Connection secret for postgres. You should change it to a random password\n# Please use only the characters `A-Za-z0-9`, without special characters or spaces\nDB_PASSWORD=password\n\n# The values below this line do not need to be changed\n###################################################################################\nDB_USERNAME=postgres\nDB_DATABASE_NAME=immich\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>c});var t=a(6540);const i={},o=t.createContext(i);function s(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);