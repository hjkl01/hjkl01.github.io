"use strict";(self.webpackChunknotes_3_5_2=self.webpackChunknotes_3_5_2||[]).push([[530],{8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>s});var o=n(6540);const a={},r=o.createContext(a);function i(e){const t=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),o.createElement(r.Provider,{value:t},e.children)}},8786:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var o=n(4848),a=n(8453);const r={},i="Makefile",s={id:"makefile",title:"Makefile",description:"",source:"@site/notes/python/makefile.md",sourceDirName:".",slug:"/makefile",permalink:"/notes/python/makefile",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"loguru",permalink:"/notes/python/loguru"},next:{title:"mitmproxy",permalink:"/notes/python/mitmproxy"}},l={},c=[];function h(e){const t={code:"code",h1:"h1",header:"header",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"makefile",children:"Makefile"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-makefile",children:'# Makefile for FastAPI Backend\n\n# Variables\nPYTHON := .venv/bin/python3\nPIP := .venv/bin/pip\nUV := .venv/bin/uv\nUVICORN := .venv/bin/uvicorn\nAPP := main:app\nHOST := 0.0.0.0\nPORT := 8080\n\n# Default target\n.PHONY: help\nhelp:\n\t@echo "FastAPI Backend Makefile"\n\t@echo "============================"\n\t@echo "Available targets:"\n\t@echo "  install     - Install dependencies"\n\t@echo "  start       - Start the development server"\n\t@echo "  format      - Format code with black"\n\t@echo "  help        - Show this help message"\n\n# Install dependencies\n.PHONY: install\ninstall:\n\t@if [ ! -d ".venv" ]; then \\\n\t\techo "Creating virtual environment..."; \\\n\t\tpython3.12 -m venv .venv; \\\n\t\techo "Virtual environment created in .venv"; \\\n\telse \\\n\t\techo "Virtual environment already exists."; \\\n\tfi\n\t$(PIP) install -U pip uv\n\t@source .venv/bin/activate && $(UV) pip install -r requirements.txt\n\n# dev the development server\n.PHONY: dev\ndev:\n\t@echo "Starting FastAPI Backend..."\n\t@echo "Access the application at http://localhost:$(PORT)"\n\t@echo "API documentation: http://localhost:$(PORT)/docs"\n\t@echo "Press Ctrl+C to stop the server"\n\tenv OLLAMA_API_URL=http://localhost:11434 OLLAMA_MODEL=qwen3:14b $(UVICORN) $(APP) --host $(HOST) --port $(PORT) --reload\n\n# Start the development server\n.PHONY: start\nstart:\n\t@echo "Starting FastAPI Backend..."\n\t@echo "Access the application at http://localhost:$(PORT)"\n\t@echo "API documentation: http://localhost:$(PORT)/docs"\n\t@echo "Press Ctrl+C to stop the server"\n\tenv OLLAMA_API_URL=http://localhost:11434 OLLAMA_MODEL=qwen3:14b $(UVICORN) $(APP) --host $(HOST) --port $(PORT)\n\n# Run linting (if linting tools are installed)\n.PHONY: lint\nlint:\n\t@source .venv/bin/activate && flake8 --max-line-length 120 --exclude .venv\n\n# Run formatting (if formatting tools are installed)\n.PHONY: format\nformat:\n\t@source .venv/bin/activate && black -l 120 .\n'})})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}}}]);