"use strict";(self.webpackChunkdocusaurus_classic_typescript=self.webpackChunkdocusaurus_classic_typescript||[]).push([[2545],{31571:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>f});var o=t(85893),s=t(11151);const l={},r="settings.py",i={id:"settings",title:"settings.py",description:"settings.py example",source:"@site/notes/python/settings.md",sourceDirName:".",slug:"/settings",permalink:"/notes/python/settings",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"selenium",permalink:"/notes/python/selenium"}},a={},f=[{value:"settings.py example",id:"settingspy-example",level:2},{value:"settings.py(old)",id:"settingspyold",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",pre:"pre",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"settingspy",children:"settings.py"}),"\n",(0,o.jsx)(n.h2,{id:"settingspy-example",children:"settings.py example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# settings.py\n# pip install dynaconf loguru\nimport os\n\nfrom loguru import logger\nfrom dynaconf import Dynaconf\n\nBASE_DIR = os.path.abspath(os.path.dirname(__file__)).rstrip("/common")\n\nlog_file_path = os.path.join(BASE_DIR, "logs/stdout.log")\nerr_log_file_path = os.path.join(BASE_DIR, "logs/error.log")\n\nlogger.add(\n    log_file_path,\n    format="{process} {thread} {time:YYYY.MM.DD HH.mm.ss} {level}.{file}.{name}.{module}.{line} {message}",\n    rotation="100 MB",\n    colorize=True,\n    enqueue=True,\n    backtrace=True,\n    diagnose=True,\n    level="INFO",\n)\nlogger.add(\n    err_log_file_path,\n    format="{time:YYYY.MM.DD HH.mm.ss} {level}.{file}.{name}.{module}.{line} {message}",\n    rotation="100 MB",\n    level="ERROR",\n    colorize=True,\n    enqueue=True,\n    backtrace=True,\n    diagnose=True,\n)\n\n\nConfig = Dynaconf(settings_files=[".secrets.toml"])\n\nprint(Config.__dict__)\nprint(Config.redis_ip)\n'})}),"\n",(0,o.jsx)(n.h2,{id:"settingspyold",children:"settings.py(old)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# pip install python-dotenv pyyaml loguru\nimport os\nimport sys\n\nimport toml\nimport yaml\nfrom loguru import logger\nfrom dotenv import load_dotenv\n\nBASE_DIR = os.path.abspath(os.path.dirname(__file__)).rstrip("/common")\n\nlog_file_path = os.path.join(BASE_DIR, "logs/stdout.log")\nerr_log_file_path = os.path.join(BASE_DIR, "logs/error.log")\n\nlogger.add(\n    log_file_path,\n    format="{process} {thread} {time:YYYY.MM.DD HH.mm.ss} {level}.{file}.{name}.{module}.{line} {message}",\n    rotation="100 MB",\n    colorize=True,\n    enqueue=True,\n    backtrace=True,\n    diagnose=True,\n    level="INFO",\n)\nlogger.add(\n    err_log_file_path,\n    format="{time:YYYY.MM.DD HH.mm.ss} {level}.{file}.{name}.{module}.{line} {message}",\n    rotation="100 MB",\n    level="ERROR",\n    colorize=True,\n    enqueue=True,\n    backtrace=True,\n    diagnose=True,\n)\n\n\nclass SettingsMeta:\n    def __init__(self, _file=None):\n        self.file = _file\n\n    # read config.yaml\n    def read_yaml(self, key, file="settings.yaml"):\n        if os.path.exists(file):\n            with open(file, "r") as f:\n                con = yaml.safe_load(f)\n            if con:\n                #  logger.debug(con)\n                return con.get(key)\n\n    # read .secrets.toml\n    def read_toml(self, key, file=".secrets.toml"):\n        if os.path.exists(file):\n            con = toml.load(file)\n            if con:\n                #  logger.debug(con)\n                return con.get(key)\n\n    # read .env\n    def read_env(self, key):\n        load_dotenv()\n        return os.getenv(key)\n\n    def __getattr__(self, key):\n        result = None\n\n        file_function = {\n            "yaml": self.read_yaml,\n            "toml": self.read_toml,\n            "env": self.read_env,\n        }\n\n        if self.file:\n            file_type = self.file.split(".")\n            func = file_function.get(file_type[-1])\n            if func:\n                return func(key)\n            else:\n                return\n\n        functions = [self.read_yaml, self.read_toml, self.read_env]\n        for ft in functions:\n            result = ft(key)\n            if result:\n                return result\n        return result\n\n\nsettings = SettingsMeta()\n'})})]})}function p(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>r});var o=t(67294);const s={},l=o.createContext(s);function r(e){const n=o.useContext(l);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(l.Provider,{value:n},e.children)}}}]);