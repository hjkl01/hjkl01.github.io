"use strict";(self.webpackChunknotes_3_5_2=self.webpackChunknotes_3_5_2||[]).push([[5850],{3338:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var t=r(4848),s=r(8453);const a={},o="celery",i={id:"celery",title:"celery",description:"celery \u7528\u6cd5",source:"@site/notes/python/celery.md",sourceDirName:".",slug:"/celery",permalink:"/notes/python/celery",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"python",permalink:"/notes/python/"},next:{title:"chrome",permalink:"/notes/python/chrome"}},l={},p=[{value:"celery \u7528\u6cd5",id:"celery-\u7528\u6cd5",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"celery",children:"celery"})}),"\n",(0,t.jsx)(n.h2,{id:"celery-\u7528\u6cd5",children:"celery \u7528\u6cd5"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# test.py\nimport time\nfrom datetime import datetime\n\nfrom celery import Celery\n\n# result_address = \'elasticsearch://user:passwd@ip:port/index\'\n\nbroker = \'redis://:passwd@ip:port/db\'\nresult_address = "mongodb://user:password@ip:port/db"\n\napp = Celery("tasks", broker=broker, backend=result_address)\n\n\ndef my_on_failure(exc, task_id, args, kwargs, einfo):\n    print("task failed")\n    for argv in [exc, task_id, args, kwargs, einfo]:\n        print(argv)\n\n\napp.conf.update(\n    task_serializer="json",\n    accept_content=["json"],  # Ignore other content\n    result_serializer="json",\n    timezone="Asia/Shanghai",\n    enable_utc=True,\n    #  \u4e0b\u9762\u8fd9\u4e2a\u5c31\u662f\u9650\u5236tasks\u6a21\u5757\u4e0b\u7684add\u51fd\u6570\uff0c\u6bcf\u79d2\u949f\u53ea\u80fd\u6267\u884c10\u6b21\n    #  CELERY_ANNOTATIONS = {\'tasks.add\':{\'rate_limit\':\'10/s\'}}\n    #  \u6216\u8005\u9650\u5236\u6240\u6709\u7684\u4efb\u52a1\u7684\u5237\u65b0\u9891\u7387\n    task_annotations={"tasks.add": {"rate_limit": "2/m"}},\n    #  annotations={"tasks.add": {"rate_limit": "5/m", "on_failure": my_on_failure}},\n    #  annotations={"*": {"rate_limit": "10/s", "on_failure": my_on_failure}},\n    #  celery worker\u7684\u5e76\u53d1\u6570\uff0c\u9ed8\u8ba4\u662f\u670d\u52a1\u5668\u7684\u5185\u6838\u6570\u76ee,\u4e5f\u662f\u547d\u4ee4\u884c-c\u53c2\u6570\u6307\u5b9a\u7684\u6570\u76ee\n    worker_concurrency=10,\n    #  celery worker \u6bcf\u6b21\u53bbBROKER\u4e2d\u9884\u53d6\u4efb\u52a1\u7684\u6570\u91cf\n    prefetch_multiplier=1,\n    #  \u5355\u4e2a\u4efb\u52a1\u7684\u8fd0\u884c\u65f6\u95f4\u9650\u5236\uff0c\u5426\u5219\u4f1a\u88ab\u6740\u6b7b\n    task_time_limit=60,\n    #  \u538b\u7f29\u65b9\u6848\u9009\u62e9\uff0c\u53ef\u4ee5\u662fzlib, bzip2\uff0c\u9ed8\u8ba4\u662f\u53d1\u9001\u6ca1\u6709\u538b\u7f29\u7684\u6570\u636e\n    message_compression="zlib",\n)\n\n\n@app.task(default_retry_delay=30, max_retries=2, retry_kwargs={"max_retries": 3})\ndef add(x, y):\n    print(x, y)\n    #  time.sleep(3)\n    return x + y\n\n\n@app.task\ndef sleep(seconds):\n    time.sleep(seconds)\n\n\n@app.task\ndef echo(msg, timestamp=False):\n    time.sleep(3)\n    return "%s: %s" % (datetime.now(), msg) if timestamp else msg\n\n\n@app.task\ndef error(msg):\n    raise Exception(msg)\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:'# generate.py\n# https://github.com/mher/flower/blob/master/docs/api.ipynb\nimport requests\nimport json\n\ndef main():\n    api_root = "http://localhost:5566/api"\n    task_api = "{}/task".format(api_root)\n\n    url = "{}/queues/length".format(api_root)\n    print(url)\n    resp = requests.get(url)\n    print(resp.json())\n\n    for i in range(20):\n        args = {"args": [i, i**i]}\n        url = "{}/async-apply/tasks.add".format(task_api)\n        #  url = "{}/apply/tasks.add".format(task_api)\n        print(url)\n        resp = requests.post(url, data=json.dumps(args))\n        reply = resp.json()\n        print(reply)\n\n        args = {"args": [i, True]}\n        url = "{}/async-apply/tasks.echo".format(task_api)\n        print(url)\n        resp = requests.post(url, data=json.dumps(args))\n        reply = resp.json()\n        print(reply)\n\n    #  url = "{}/result/{}".format(task_api, reply["task-id"])\n    #  print(url)\n    #  resp = requests.get(url)\n    #  print(resp.json())\nmain()\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"celery -A tasks worker --loglevel=info >> logs/celery_worker.log 2>&1 &\n\ncelery -A tasks flower --loglevel=info --address=127.0.0.1 --port=5566 >> logs/celery_flower.log 2>&1 &\n"})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>i});var t=r(6540);const s={},a=t.createContext(s);function o(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);