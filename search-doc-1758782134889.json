{"searchDocs":[{"title":"Tutorial Intro","type":0,"sectionRef":"#","url":"/docs/intro","content":"","keywords":"","version":"Next"},{"title":"Getting Started​","type":1,"pageTitle":"Tutorial Intro","url":"/docs/intro#getting-started","content":" Get started by creating a new site.  Or try Docusaurus immediately with docusaurus.new.  ","version":"Next","tagName":"h2"},{"title":"What you'll need​","type":1,"pageTitle":"Tutorial Intro","url":"/docs/intro#what-youll-need","content":" Node.js version 18.0 or above: When installing Node.js, you are recommended to check all checkboxes related to dependencies.  ","version":"Next","tagName":"h3"},{"title":"Generate a new site​","type":1,"pageTitle":"Tutorial Intro","url":"/docs/intro#generate-a-new-site","content":" Generate a new Docusaurus site using the classic template.  The classic template will automatically be added to your project after you run the command:  npm init docusaurus@latest my-website classic   You can type this command into Command Prompt, Powershell, Terminal, or any other integrated terminal of your code editor.  The command also installs all necessary dependencies you need to run Docusaurus.  ","version":"Next","tagName":"h2"},{"title":"Start your site​","type":1,"pageTitle":"Tutorial Intro","url":"/docs/intro#start-your-site","content":" Run the development server:  cd my-website npm run start   The cd command changes the directory you're working with. In order to work with your newly created Docusaurus site, you'll need to navigate the terminal there.  The npm run start command builds your website locally and serves it through a development server, ready for you to view at http://localhost:3000/.  Open docs/intro.md (this page) and edit some lines: the site reloads automatically and displays your changes. ","version":"Next","tagName":"h2"},{"title":"Congratulations!","type":0,"sectionRef":"#","url":"/docs/tutorial-basics/congratulations","content":"","keywords":"","version":"Next"},{"title":"What's next?​","type":1,"pageTitle":"Congratulations!","url":"/docs/tutorial-basics/congratulations#whats-next","content":" Read the official documentationModify your site configuration with docusaurus.config.jsAdd navbar and footer items with themeConfigAdd a custom Design and LayoutAdd a search barFind inspirations in the Docusaurus showcaseGet involved in the Docusaurus Community ","version":"Next","tagName":"h2"},{"title":"Create a Document","type":0,"sectionRef":"#","url":"/docs/tutorial-basics/create-a-document","content":"","keywords":"","version":"Next"},{"title":"Create your first Doc​","type":1,"pageTitle":"Create a Document","url":"/docs/tutorial-basics/create-a-document#create-your-first-doc","content":" Create a Markdown file at docs/hello.md:  docs/hello.md # Hello This is my **first Docusaurus document**!   A new document is now available at http://localhost:3000/docs/hello.  ","version":"Next","tagName":"h2"},{"title":"Configure the Sidebar​","type":1,"pageTitle":"Create a Document","url":"/docs/tutorial-basics/create-a-document#configure-the-sidebar","content":" Docusaurus automatically creates a sidebar from the docs folder.  Add metadata to customize the sidebar label and position:  docs/hello.md --- sidebar_label: 'Hi!' sidebar_position: 3 --- # Hello This is my **first Docusaurus document**!   It is also possible to create your sidebar explicitly in sidebars.js:  sidebars.js export default { tutorialSidebar: [ 'intro', 'hello', { type: 'category', label: 'Tutorial', items: ['tutorial-basics/create-a-document'], }, ], };  ","version":"Next","tagName":"h2"},{"title":"Create a Blog Post","type":0,"sectionRef":"#","url":"/docs/tutorial-basics/create-a-blog-post","content":"","keywords":"","version":"Next"},{"title":"Create your first Post​","type":1,"pageTitle":"Create a Blog Post","url":"/docs/tutorial-basics/create-a-blog-post#create-your-first-post","content":" Create a file at blog/2021-02-28-greetings.md:  blog/2021-02-28-greetings.md --- slug: greetings title: Greetings! authors: - name: Joel Marcey title: Co-creator of Docusaurus 1 url: https://github.com/JoelMarcey image_url: https://github.com/JoelMarcey.png - name: Sébastien Lorber title: Docusaurus maintainer url: https://sebastienlorber.com image_url: https://github.com/slorber.png tags: [greetings] --- Congratulations, you have made your first post! Feel free to play around and edit this post as much as you like.   A new blog post is now available at http://localhost:3000/blog/greetings. ","version":"Next","tagName":"h2"},{"title":"Deploy your site","type":0,"sectionRef":"#","url":"/docs/tutorial-basics/deploy-your-site","content":"","keywords":"","version":"Next"},{"title":"Build your site​","type":1,"pageTitle":"Deploy your site","url":"/docs/tutorial-basics/deploy-your-site#build-your-site","content":" Build your site for production:  npm run build   The static files are generated in the build folder.  ","version":"Next","tagName":"h2"},{"title":"Deploy your site​","type":1,"pageTitle":"Deploy your site","url":"/docs/tutorial-basics/deploy-your-site#deploy-your-site-1","content":" Test your production build locally:  npm run serve   The build folder is now served at http://localhost:3000/.  You can now deploy the build folder almost anywhere easily, for free or very small cost (read the Deployment Guide). ","version":"Next","tagName":"h2"},{"title":"Manage Docs Versions","type":0,"sectionRef":"#","url":"/docs/tutorial-extras/manage-docs-versions","content":"","keywords":"","version":"Next"},{"title":"Create a docs version​","type":1,"pageTitle":"Manage Docs Versions","url":"/docs/tutorial-extras/manage-docs-versions#create-a-docs-version","content":" Release a version 1.0 of your project:  npm run docusaurus docs:version 1.0   The docs folder is copied into versioned_docs/version-1.0 and versions.json is created.  Your docs now have 2 versions:  1.0 at http://localhost:3000/docs/ for the version 1.0 docscurrent at http://localhost:3000/docs/next/ for the upcoming, unreleased docs  ","version":"Next","tagName":"h2"},{"title":"Add a Version Dropdown​","type":1,"pageTitle":"Manage Docs Versions","url":"/docs/tutorial-extras/manage-docs-versions#add-a-version-dropdown","content":" To navigate seamlessly across versions, add a version dropdown.  Modify the docusaurus.config.js file:  docusaurus.config.js export default { themeConfig: { navbar: { items: [ { type: 'docsVersionDropdown', }, ], }, }, };   The docs version dropdown appears in your navbar:    ","version":"Next","tagName":"h2"},{"title":"Update an existing version​","type":1,"pageTitle":"Manage Docs Versions","url":"/docs/tutorial-extras/manage-docs-versions#update-an-existing-version","content":" It is possible to edit versioned docs in their respective folder:  versioned_docs/version-1.0/hello.md updates http://localhost:3000/docs/hellodocs/hello.md updates http://localhost:3000/docs/next/hello ","version":"Next","tagName":"h2"},{"title":"Create a Page","type":0,"sectionRef":"#","url":"/docs/tutorial-basics/create-a-page","content":"","keywords":"","version":"Next"},{"title":"Create your first React Page​","type":1,"pageTitle":"Create a Page","url":"/docs/tutorial-basics/create-a-page#create-your-first-react-page","content":" Create a file at src/pages/my-react-page.js:  src/pages/my-react-page.js import React from 'react'; import Layout from '@theme/Layout'; export default function MyReactPage() { return ( &lt;Layout&gt; &lt;h1&gt;My React page&lt;/h1&gt; &lt;p&gt;This is a React page&lt;/p&gt; &lt;/Layout&gt; ); }   A new page is now available at http://localhost:3000/my-react-page.  ","version":"Next","tagName":"h2"},{"title":"Create your first Markdown Page​","type":1,"pageTitle":"Create a Page","url":"/docs/tutorial-basics/create-a-page#create-your-first-markdown-page","content":" Create a file at src/pages/my-markdown-page.md:  src/pages/my-markdown-page.md # My Markdown page This is a Markdown page   A new page is now available at http://localhost:3000/my-markdown-page. ","version":"Next","tagName":"h2"},{"title":"Markdown Features","type":0,"sectionRef":"#","url":"/docs/tutorial-basics/markdown-features","content":"","keywords":"","version":"Next"},{"title":"Front Matter​","type":1,"pageTitle":"Markdown Features","url":"/docs/tutorial-basics/markdown-features#front-matter","content":" Markdown documents have metadata at the top called Front Matter:  my-doc.md --- id: my-doc-id title: My document title description: My document description slug: /my-custom-url --- ## Markdown heading Markdown text with [links](./hello.md)   ","version":"Next","tagName":"h2"},{"title":"Links​","type":1,"pageTitle":"Markdown Features","url":"/docs/tutorial-basics/markdown-features#links","content":" Regular Markdown links are supported, using url paths or relative file paths.  Let's see how to [Create a page](/create-a-page).   Let's see how to [Create a page](./create-a-page.md).   Result: Let's see how to Create a page.  ","version":"Next","tagName":"h2"},{"title":"Images​","type":1,"pageTitle":"Markdown Features","url":"/docs/tutorial-basics/markdown-features#images","content":" Regular Markdown images are supported.  You can use absolute paths to reference images in the static directory (static/img/docusaurus.png):  ![Docusaurus logo](/img/docusaurus.png)     You can reference images relative to the current file as well. This is particularly useful to colocate images close to the Markdown files using them:  ![Docusaurus logo](./img/docusaurus.png)   ","version":"Next","tagName":"h2"},{"title":"Code Blocks​","type":1,"pageTitle":"Markdown Features","url":"/docs/tutorial-basics/markdown-features#code-blocks","content":" Markdown code blocks are supported with Syntax highlighting.  ```jsx title=&quot;src/components/HelloDocusaurus.js&quot; function HelloDocusaurus() { return &lt;h1&gt;Hello, Docusaurus!&lt;/h1&gt;; } ```   src/components/HelloDocusaurus.js function HelloDocusaurus() { return &lt;h1&gt;Hello, Docusaurus!&lt;/h1&gt;; }   ","version":"Next","tagName":"h2"},{"title":"Admonitions​","type":1,"pageTitle":"Markdown Features","url":"/docs/tutorial-basics/markdown-features#admonitions","content":" Docusaurus has a special syntax to create admonitions and callouts:  :::tip[My tip] Use this awesome feature option ::: :::danger[Take care] This action is dangerous :::   My tip Use this awesome feature option  Take care This action is dangerous  ","version":"Next","tagName":"h2"},{"title":"MDX and React Components​","type":1,"pageTitle":"Markdown Features","url":"/docs/tutorial-basics/markdown-features#mdx-and-react-components","content":" MDX can make your documentation more interactive and allows using any React components inside Markdown:  export const Highlight = ({children, color}) =&gt; ( &lt;span style={{ backgroundColor: color, borderRadius: '20px', color: '#fff', padding: '10px', cursor: 'pointer', }} onClick={() =&gt; { alert(`You clicked the color ${color} with label ${children}`) }}&gt; {children} &lt;/span&gt; ); This is &lt;Highlight color=&quot;#25c2a0&quot;&gt;Docusaurus green&lt;/Highlight&gt; ! This is &lt;Highlight color=&quot;#1877F2&quot;&gt;Facebook blue&lt;/Highlight&gt; !     This is Docusaurus green !  This is Facebook blue ! ","version":"Next","tagName":"h2"},{"title":"Translate your site","type":0,"sectionRef":"#","url":"/docs/tutorial-extras/translate-your-site","content":"","keywords":"","version":"Next"},{"title":"Configure i18n​","type":1,"pageTitle":"Translate your site","url":"/docs/tutorial-extras/translate-your-site#configure-i18n","content":" Modify docusaurus.config.js to add support for the fr locale:  docusaurus.config.js export default { i18n: { defaultLocale: 'en', locales: ['en', 'fr'], }, };   ","version":"Next","tagName":"h2"},{"title":"Translate a doc​","type":1,"pageTitle":"Translate your site","url":"/docs/tutorial-extras/translate-your-site#translate-a-doc","content":" Copy the docs/intro.md file to the i18n/fr folder:  mkdir -p i18n/fr/docusaurus-plugin-content-docs/current/ cp docs/intro.md i18n/fr/docusaurus-plugin-content-docs/current/intro.md   Translate i18n/fr/docusaurus-plugin-content-docs/current/intro.md in French.  ","version":"Next","tagName":"h2"},{"title":"Start your localized site​","type":1,"pageTitle":"Translate your site","url":"/docs/tutorial-extras/translate-your-site#start-your-localized-site","content":" Start your site on the French locale:  npm run start -- --locale fr   Your localized site is accessible at http://localhost:3000/fr/ and the Getting Started page is translated.  警告 In development, you can only use one locale at a time.  ","version":"Next","tagName":"h2"},{"title":"Add a Locale Dropdown​","type":1,"pageTitle":"Translate your site","url":"/docs/tutorial-extras/translate-your-site#add-a-locale-dropdown","content":" To navigate seamlessly across languages, add a locale dropdown.  Modify the docusaurus.config.js file:  docusaurus.config.js export default { themeConfig: { navbar: { items: [ { type: 'localeDropdown', }, ], }, }, };   The locale dropdown now appears in your navbar:    ","version":"Next","tagName":"h2"},{"title":"Build your localized site​","type":1,"pageTitle":"Translate your site","url":"/docs/tutorial-extras/translate-your-site#build-your-localized-site","content":" Build your site for a specific locale:  npm run build -- --locale fr   Or build your site to include all the locales at once:  npm run build  ","version":"Next","tagName":"h2"},{"title":"caddy","type":0,"sectionRef":"#","url":"/notes/docker/caddy","content":"","keywords":"","version":"Next"},{"title":"test command​","type":1,"pageTitle":"caddy","url":"/notes/docker/caddy#test-command","content":" caddy file-server --root ./public --listen :3000 caddy reverse-proxy --from :8000 --to 127.0.0.1:9000   ","version":"Next","tagName":"h3"},{"title":"docker-compose.yml​","type":1,"pageTitle":"caddy","url":"/notes/docker/caddy#docker-composeyml","content":" version: &quot;3.7&quot; services: caddy: image: caddy:alpine restart: unless-stopped container_name: caddy network_mode: &quot;host&quot; volumes: - ./data/caddy/Caddyfile:/etc/caddy/Caddyfile - /etc/caddy/conf.d/:/etc/caddy/conf.d/ # - ./data/caddy/cert:/data - ./data/caddy/dist/:/www/ # Caddyfile import /etc/caddy/conf.d/*   ","version":"Next","tagName":"h3"},{"title":"conf.d/some.conf​","type":1,"pageTitle":"caddy","url":"/notes/docker/caddy#confdsomeconf","content":" # 反向代理 news.hjkl01.cn { reverse_proxy 127.0.0.1:8000 reverse_proxy api/* 127.0.0.1:8080 encode zstd gzip header * { # cors Access-Control-Allow-Origin * Access-Control-Allow-Methods &quot;GET, POST, OPTIONS&quot; header_upstream Host {host} header_upstream X-Real-IP {remote} header_upstream X-Forwarded-For {remote} header_upstream X-Forwarded-Proto {scheme} } # ssl # tls /etc/caddy/conf.d/example.com_nginx/example.com_bundle.pem /etc/caddy/conf.d/example.com_nginx/example.com.key } # 静态文件 blog.hjkl01.cn { root * /data/blog templates file_server browse try_files {path} /index.html # try_files {path} {path}.html log { output file /var/log/caddy/access.log { roll_size 1gb roll_keep 5 roll_keep_for 720h } } } # 混合 dev.hjkl01.cn:14567 { # 静态文件服务 root * /data/build handle /ws/* { reverse_proxy localhost:8080 { # WebSocket 支持的关键配置 transport http { keepalive_idle_conns 100 keepalive_idle_conns_per_host 10 } # 保持连接头 header_up Connection {http.request.header.Connection} header_up Upgrade {http.request.header.Upgrade} } } # API 请求代理到后端 handle /api/* { reverse_proxy localhost:8080 } # SPA 路由支持（可选） handle /* { try_files {path} {path}/ /index.html file_server } encode zstd gzip import cloudflare }   ","version":"Next","tagName":"h3"},{"title":"auth​","type":1,"pageTitle":"caddy","url":"/notes/docker/caddy#auth","content":" caddy hash-password basicauth /* { username output }   ","version":"Next","tagName":"h3"},{"title":"dns.providers.cloudflare​","type":1,"pageTitle":"caddy","url":"/notes/docker/caddy#dnsproviderscloudflare","content":" go install github.com/caddyserver/xcaddy/cmd/xcaddy@latest xcaddy build --with github.com/caddy-dns/cloudflare sudo mv caddy /usr/local/bin/   Caddyfile 创建cf令牌​  (cloudflare) { tls { dns cloudflare token } } example.com:port { reverse_proxy http://localhost:8080 import cloudflare }   /etc/systemd/system/caddy.service​  [Unit] Description=Caddy Documentation=caddy --help After=network.target StartLimitIntervalSec=30 StartLimitBurst=2 [Service] ExecStart=/usr/local/bin/caddy run --config /etc/caddy/Caddyfile Restart=always RestartSec=1 [Install] Alias=caddy.service WantedBy=multi-user.target  ","version":"Next","tagName":"h3"},{"title":"code server","type":0,"sectionRef":"#","url":"/notes/docker/code_server","content":"","keywords":"","version":"Next"},{"title":"docker-compose.yml​","type":1,"pageTitle":"code server","url":"/notes/docker/code_server#docker-composeyml","content":" address  --- version: &quot;2.1&quot; services: code-server: image: lscr.io/linuxserver/code-server:latest container_name: code-server environment: - PUID=1000 - PGID=1000 - TZ=Asia/Shanghai - PASSWORD=secrets #optional - HASHED_PASSWORD= #optional - SUDO_PASSWORD=secrets #optional - SUDO_PASSWORD_HASH= #optional - PROXY_DOMAIN=code-server.my.domain #optional - DEFAULT_WORKSPACE=/somedir #optional volumes: - ./data/code_server/config:/config - /home/user/somedir:/somedir ports: - 192.168.32.4:8443:8443 restart: unless-stopped networks: default: external: name: nginx-proxy  ","version":"Next","tagName":"h2"},{"title":"docker","type":0,"sectionRef":"#","url":"/notes/docker","content":"","keywords":"","version":"Next"},{"title":"install​","type":1,"pageTitle":"docker","url":"/notes/docker#install","content":" ","version":"Next","tagName":"h2"},{"title":"on Linux​","type":1,"pageTitle":"docker","url":"/notes/docker#on-linux","content":" wget -qO- https://get.docker.com/ | sh sudo usermod -aG docker $USER # 修改源 /etc/docker/daemon.json sudo tee /etc/docker/daemon.json &lt;&lt;EOF { &quot;registry-mirrors&quot;: [&quot;https://docker.hjkl01.cn&quot;] } EOF # 配置完后需要重启 Docker 服务 sudo systemctl restart docker   ","version":"Next","tagName":"h3"},{"title":"on Mac​","type":1,"pageTitle":"docker","url":"/notes/docker#on-mac","content":" https://github.com/abiosoft/colima  # volumes colima start --vm-type=vz colima start --kubernetes=false vi ~/.colima/default/colima.yaml # docker: {} docker: registry-mirrors: - https://docker.hjkl01.cn colima restart # colima delete # colima start   ","version":"Next","tagName":"h3"},{"title":"use mirror example​","type":1,"pageTitle":"docker","url":"/notes/docker#use-mirror-example","content":" # docker pull nginx:latest docker pull docker.hjkl01.cn/library/nginx:latest # 拉取 Docker 官方镜像 # docker pull quay.io/coreos/etcd:latest docker pull quay.hjkl01.cn/coreos/etcd:latest # 拉取 Quay 镜像 # docker pull gcr.io/google-containers/busybox:latest docker pull gcr.hjkl01.cn/google-containers/busybox:latest # 拉取 GCR 镜像 # docker pull k8s.gcr.io/pause:latest docker pull k8s-gcr.hjkl01.cn/pause:latest # 拉取 k8s.gcr.io 镜像 # docker pull registry.k8s.io/pause:latest docker pull k8s.hjkl01.cn/pause:latest # 拉取 registry.k8s.io 镜像 # docker pull ghcr.io/github/super-linter:latest docker pull ghcr.hjkl01.cn/github/super-linter:latest # 拉取 GitHub 容器镜像 # docker pull docker.cloudsmith.io/public/repo/image:latest docker pull cloudsmith.hjkl01.cn/public/repo/image:latest # 拉取 Cloudsmith 镜像   ","version":"Next","tagName":"h2"},{"title":"常用命令​","type":1,"pageTitle":"docker","url":"/notes/docker#常用命令","content":" # export docker save -o &lt;path for generated tar file&gt; &lt;image name&gt; example: docker save -o ./centos.tar centos:16 # load docker load -i &lt;path to image tar file&gt; # run image docker run -it --rm ubuntu bash # exec container docker exec -it openwrt zsh # tail log docker logs -f --tail 100 9f7d   ","version":"Next","tagName":"h2"},{"title":"example Dockerfile​","type":1,"pageTitle":"docker","url":"/notes/docker#example-dockerfile","content":" FROM python:3.11-slim RUN sed -i.bak -e 's|http://deb.debian.org/debian|http://mirrors.aliyun.com/debian|g' \\ -e 's|http://security.debian.org/debian-security|http://mirrors.aliyun.com/debian-security|g' \\ /etc/apt/sources.list.d/debian.sources RUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\ openssh-client \\ git nodejs binutils build-essential \\ poppler-utils \\ libreoffice \\ libreoffice-l10n-zh-cn fonts-wqy-zenhei fonts-wqy-microhei fonts-arphic-ukai fonts-arphic-uming \\ &amp;&amp; rm -rf /var/lib/apt/lists/* # 设置工作目录 WORKDIR /app # 复制项目文件 COPY backend/requirements.txt . RUN pip install --no-cache-dir uv -i https://mirrors.aliyun.com/pypi/simple/ RUN uv pip install --no-cache-dir -r requirements.txt --index-url https://mirrors.aliyun.com/pypi/simple/ --system RUN pip install pyinstaller -i https://mirrors.aliyun.com/pypi/simple/ # 暴露端口 EXPOSE 19000 # 启动应用 CMD [&quot;tail&quot;,&quot;-f&quot;, &quot;/dev/null&quot;]   ","version":"Next","tagName":"h2"},{"title":"example docker-compose.yml​","type":1,"pageTitle":"docker","url":"/notes/docker#example-docker-composeyml","content":" version: '3.8' services: project-api: build: context: ./project-api dockerfile: Dockerfile ports: - &quot;8000:8000&quot; volumes: - ./project-api:/app environment: - ENV_VAR=value networks: - project-network   ","version":"Next","tagName":"h2"},{"title":"push to aliyun​","type":1,"pageTitle":"docker","url":"/notes/docker#push-to-aliyun","content":" # login docker login --username=762293490@qq.com registry.cn-hangzhou.aliyuncs.com # password: your aliyun password docker build -t build . -f ./Dockerfile.actions docker tag build:latest registry.cn-hangzhou.aliyuncs.com/hjkl01/hjkl01:amd_250826 docker push registry.cn-hangzhou.aliyuncs.com/hjkl01/hjkl01:amd_250826   ","version":"Next","tagName":"h2"},{"title":"tools​","type":1,"pageTitle":"docker","url":"/notes/docker#tools","content":" linuxservergithub docker-libraryctoplazydocker  docker run -it -v /var/run/docker.sock:/var/run/docker.sock -v /tmp:/.config/jesseduffield/lazydocker lazyteam/lazydocker   portainer  version: '3.1' services: portainer: image: portainer/portainer restart: always ports: - 8000:8000 - 9000:9000 volumes: - /var/run/docker.sock:/var/run/docker.sock - ./data/portainer:/data networks: default: external: name: nginx-proxy # docker network create nginx-proxy   dozzle  version: &quot;3&quot; services: dozzle: container_name: dozzle image: amir20/dozzle:latest volumes: - /var/run/docker.sock:/var/run/docker.sock:ro ports: - 8888:8080   ","version":"Next","tagName":"h2"},{"title":"减少镜像体积​","type":1,"pageTitle":"docker","url":"/notes/docker#减少镜像体积","content":" // hello.go package main import &quot;fmt&quot; func main () { fmt.Println(&quot;Hello, world!&quot;) }   # Dockerfile FROM golang COPY hello.go . RUN go build hello.go # FROM scratch # FROM alpine FROM busybox:glibc COPY --from=0 /go/hello . CMD [&quot;./hello&quot;]  ","version":"Next","tagName":"h2"},{"title":"cowrie","type":0,"sectionRef":"#","url":"/notes/docker/cowrie","content":"","keywords":"","version":"Next"},{"title":"Cowrie SSH/Telnet Honeypot​","type":1,"pageTitle":"cowrie","url":"/notes/docker/cowrie#cowrie-sshtelnet-honeypot","content":" ","version":"Next","tagName":"h2"},{"title":"https://github.com/cowrie/cowrie​","type":1,"pageTitle":"cowrie","url":"/notes/docker/cowrie#httpsgithubcomcowriecowrie","content":" ","version":"Next","tagName":"h2"},{"title":"docker-compose.yml​","type":1,"pageTitle":"cowrie","url":"/notes/docker/cowrie#docker-composeyml","content":" version: &quot;3&quot; services: cowrie: image: cowrie/cowrie:latest container_name: cowrie restart: always ports: - 22:2222 networks: default: external: name: nginx-proxy  ","version":"Next","tagName":"h2"},{"title":"cloudreve minIO alist","type":0,"sectionRef":"#","url":"/notes/docker/cloudreve","content":"","keywords":"","version":"Next"},{"title":"cloudreve​","type":1,"pageTitle":"cloudreve minIO alist","url":"/notes/docker/cloudreve#cloudreve","content":" # office 文档预览服务 # https://view.xdocin.com/view?src={$src} # mkdir -vp cloudreve/{uploads,avatar} \\ &amp;&amp; touch cloudreve/conf.ini \\ &amp;&amp; touch cloudreve/cloudreve.db \\ &amp;&amp; mkdir -p aria2/config \\ &amp;&amp; mkdir -p data/aria2 \\ &amp;&amp; chmod -R 777 data/aria2 version: &quot;3.8&quot; services: cloudreve: container_name: cloudreve image: cloudreve/cloudreve:latest restart: unless-stopped ports: - &quot;5212:5212&quot; volumes: - ./data/aria2/downloads:/downloads - ./data/cloudreve/uploads:/cloudreve/uploads - ./data/cloudreve/conf.ini:/cloudreve/conf.ini - ./data/cloudreve/cloudreve.db:/cloudreve/cloudreve.db - ./data/cloudreve/avatar:/cloudreve/avatar networks: default: external: name: nginx-proxy   ","version":"Next","tagName":"h2"},{"title":"nginx​","type":1,"pageTitle":"cloudreve minIO alist","url":"/notes/docker/cloudreve#nginx","content":" server { listen 15212 ssl http2; listen [::]:15212 ssl http2; server_name hjkl01.cn; ssl_certificate /etc/nginx/cert/hjkl01.cn_nginx/hjkl01.cn_bundle.crt; ssl_certificate_key /etc/nginx/cert/hjkl01.cn_nginx/hjkl01.cn.key; ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; ssl_protocols TLSv1.2 TLSv1.3; ssl_prefer_server_ciphers on; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $http_host; proxy_redirect off; client_max_body_size 90000m; location / { proxy_pass http://192.168.50.4:5212; } }   ","version":"Next","tagName":"h3"},{"title":"minIO​","type":1,"pageTitle":"cloudreve minIO alist","url":"/notes/docker/cloudreve#minio","content":" version: &quot;3.7&quot; # Settings and configurations that are common for all containers x-minio-common: &amp;minio-common image: quay.io/minio/minio:RELEASE.2022-05-23T18-45-11Z command: server --console-address &quot;:9001&quot; http://minio{1...4}/data{1...2} environment: - MINIO_ROOT_USER=username - MINIO_ROOT_PASSWORD=password expose: - &quot;9000&quot; - &quot;9001&quot; healthcheck: test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:9000/minio/health/live&quot;] interval: 30s timeout: 20s retries: 3 # starts 4 docker containers running minio server instances. # using nginx reverse proxy, load balancing, you can access # it through port 9000. services: minio1: &lt;&lt;: *minio-common hostname: minio1 volumes: - ./data/minio/data1-1:/data1 - ./data/minio/data1-2:/data2 minio2: &lt;&lt;: *minio-common hostname: minio2 volumes: - ./data/minio/data2-1:/data1 - ./data/minio/data2-2:/data2 minio3: &lt;&lt;: *minio-common hostname: minio3 volumes: - ./data/minio/data3-1:/data1 - ./data/minio/data3-2:/data2 minio4: &lt;&lt;: *minio-common hostname: minio4 volumes: - ./data/minio/data4-1:/data1 - ./data/minio/data4-2:/data2 nginx: image: nginx:1.19.2-alpine hostname: nginx volumes: - ./nginx.conf:/etc/nginx/nginx.conf:ro ports: - &quot;9000:9000&quot; - &quot;9002:9001&quot; depends_on: - minio1 - minio2 - minio3 - minio4   ","version":"Next","tagName":"h2"},{"title":"nginx​","type":1,"pageTitle":"cloudreve minIO alist","url":"/notes/docker/cloudreve#nginx-1","content":" user nginx; worker_processes auto; error_log /var/log/nginx/error.log warn; pid /var/run/nginx.pid; events { worker_connections 4096; } http { include /etc/nginx/mime.types; default_type application/octet-stream; log_format main '$remote_addr - $remote_user [$time_local] &quot;$request&quot; ' '$status $body_bytes_sent &quot;$http_referer&quot; ' '&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;'; access_log /var/log/nginx/access.log main; sendfile on; keepalive_timeout 65; # include /etc/nginx/conf.d/*.conf; upstream minio { server minio1:9000; server minio2:9000; server minio3:9000; server minio4:9000; } upstream console { ip_hash; server minio1:9001; server minio2:9001; server minio3:9001; server minio4:9001; } server { listen 9000; listen [::]:9000; server_name localhost; # To allow special characters in headers ignore_invalid_headers off; # Allow any size file to be uploaded. # Set to a value such as 1000m; to restrict file size to a specific value client_max_body_size 0; # To disable buffering proxy_buffering off; proxy_request_buffering off; location / { proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_connect_timeout 300; # Default is HTTP/1, keepalive is only enabled in HTTP/1.1 proxy_http_version 1.1; proxy_set_header Connection &quot;&quot;; chunked_transfer_encoding off; proxy_pass http://minio; } } server { listen 9001; listen [::]:9001; server_name localhost; # To allow special characters in headers ignore_invalid_headers off; # Allow any size file to be uploaded. # Set to a value such as 1000m; to restrict file size to a specific value client_max_body_size 0; # To disable buffering proxy_buffering off; proxy_request_buffering off; location / { proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-NginX-Proxy true; # This is necessary to pass the correct IP to be hashed real_ip_header X-Real-IP; proxy_connect_timeout 300; # To support websocket proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &quot;upgrade&quot;; chunked_transfer_encoding off; proxy_pass http://console; } } }   ","version":"Next","tagName":"h3"},{"title":"alist​","type":1,"pageTitle":"cloudreve minIO alist","url":"/notes/docker/cloudreve#alist","content":" version: &quot;3.8&quot; services: alist: container_name: alist image: xhofe/alist:v3.44.0 restart: unless-stopped environment: - PUID=0 - PGID=0 - UMASK=022 ports: - &quot;5244:5244&quot; volumes: - ./data/alist:/opt/alist/data - /some_dir:/mnt networks: default: external: name: nginx-proxy  ","version":"Next","tagName":"h2"},{"title":"convertX","type":0,"sectionRef":"#","url":"/notes/docker/convertX","content":"","keywords":"","version":"Next"},{"title":"convertX​","type":1,"pageTitle":"convertX","url":"/notes/docker/convertX#convertx-1","content":" services: convertx: image: ghcr.io/c4illin/convertx container_name: convertx restart: unless-stopped ports: - &quot;3000:3000&quot; environment: - JWT_SECRET=aLongAndSecretStringUsedToSignTheJSONWebToken1234 # will use randomUUID() if unset volumes: - ./data/convertx:/app/data  ","version":"Next","tagName":"h2"},{"title":"ddns","type":0,"sectionRef":"#","url":"/notes/docker/ddns","content":"","keywords":"","version":"Next"},{"title":"创建/查看cloudflare TOKEN​","type":1,"pageTitle":"ddns","url":"/notes/docker/ddns#创建查看cloudflare-token","content":"","version":"Next","tagName":"h3"},{"title":"dosgame","type":0,"sectionRef":"#","url":"/notes/docker/dosgame","content":"dosgame version: &quot;3.9&quot; services: dosgame-web-docker: image: &quot;oldiy/dosgame-web-docker:latest&quot; container_name: dosgame ports: - &quot;8262:262&quot; networks: default: external: name: nginx-proxy ","keywords":"","version":"Next"},{"title":"firefox","type":0,"sectionRef":"#","url":"/notes/docker/firefox","content":"","keywords":"","version":"Next"},{"title":"Dockerfile.firefox​","type":1,"pageTitle":"firefox","url":"/notes/docker/firefox#dockerfilefirefox","content":" FROM jlesage/firefox RUN set -eux; \\ sed -i 's/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g' /etc/apk/repositories &amp;&amp; \\ apk add --no-cache font-noto-cjk   ","version":"Next","tagName":"h3"},{"title":"build command​","type":1,"pageTitle":"firefox","url":"/notes/docker/firefox#build-command","content":" docker build -t firefox . -f Dockerfile.firefox   ","version":"Next","tagName":"h3"},{"title":"docker-compose.yml​","type":1,"pageTitle":"firefox","url":"/notes/docker/firefox#docker-composeyml","content":" version: &quot;3&quot; services: firefox: # image: jlesage/firefox image: firefox container_name: firefox ports: - &quot;5800:5800&quot; - &quot;5900:5900&quot; environment: - VNC_PASSWORD=xxx volumes: - ./data/firefox/config:/config:rw - /dev/shm:/dev/shm # 避免内存太小导致崩溃 restart: unless-stopped  ","version":"Next","tagName":"h3"},{"title":"frp","type":0,"sectionRef":"#","url":"/notes/docker/frp","content":"","keywords":"","version":"Next"},{"title":"downloads​","type":1,"pageTitle":"frp","url":"/notes/docker/frp#downloads","content":" https://github.com/fatedier/frp/releases  ","version":"Next","tagName":"h2"},{"title":"config​","type":1,"pageTitle":"frp","url":"/notes/docker/frp#config","content":" https://github.com/fatedier/frp/blob/dev/conf/frps_full_example.tomlhttps://github.com/fatedier/frp/blob/dev/conf/frpc_full_example.toml  ","version":"Next","tagName":"h2"},{"title":"docker​","type":1,"pageTitle":"frp","url":"/notes/docker/frp#docker","content":" services: frps: image: gists/frp restart: unless-stopped network_mode: &quot;host&quot; volumes: - ./data/frp/frps.toml:/frps.toml command: frps -c /frps.toml frpc: image: gists/frp restart: unless-stopped volumes: - ./data/frp/frpc.toml:/frpc.toml command: frpc -c /frpc.toml   ","version":"Next","tagName":"h2"},{"title":"frps.toml​","type":1,"pageTitle":"frp","url":"/notes/docker/frp#frpstoml","content":" bindAddr = &quot;0.0.0.0&quot; bindPort = 35000 webServer.addr = &quot;0.0.0.0&quot; webServer.port = 7000 webServer.user = &quot;username&quot; webServer.password = &quot;password&quot; auth.token = &quot;token...&quot;   ","version":"Next","tagName":"h3"},{"title":"frpc.toml​","type":1,"pageTitle":"frp","url":"/notes/docker/frp#frpctoml","content":" user = &quot;Some_Device&quot; serverAddr = &quot;frps_server_address&quot; serverPort = 35000 auth.token = &quot;token...&quot; [[proxies]] name = &quot;ssh&quot; type = &quot;tcp&quot; localIP = &quot;127.0.0.1&quot; localPort = 22 remotePort = 22222  ","version":"Next","tagName":"h3"},{"title":"API tool: httpbin hoppscotch","type":0,"sectionRef":"#","url":"/notes/docker/hoppscotch","content":"API tool: httpbin hoppscotch version: &quot;3.1&quot; services: httpbin: image: kennethreitz/httpbin container_name: httpbin restart: always ports: - &quot;127.0.0.1:7999:80&quot; hoppscotch: image: hoppscotch/hoppscotch:latest container_name: hoppscotch restart: always ports: - &quot;127.0.0.1:3000:3000&quot; networks: default: external: name: nginx-proxy ","keywords":"","version":"Next"},{"title":"immich","type":0,"sectionRef":"#","url":"/notes/docker/immich","content":"","keywords":"","version":"Next"},{"title":"docker-compose.yml​","type":1,"pageTitle":"immich","url":"/notes/docker/immich#docker-composeyml","content":" # # WARNING: Make sure to use the docker-compose.yml of the current release: # # https://github.com/immich-app/immich/releases/latest/download/docker-compose.yml # # The compose file on main may not be compatible with the latest release. # name: immich services: immich-server: container_name: immich_server # image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release} image: ghcr.hjkl01.cn/immich-app/immich-server:${IMMICH_VERSION:-release} # extends: # file: hwaccel.transcoding.yml # service: cpu # set to one of [nvenc, quicksync, rkmpp, vaapi, vaapi-wsl] for accelerated transcoding volumes: # Do not edit the next line. If you want to change the media storage location on your system, edit the value of UPLOAD_LOCATION in the .env file - ./data/immich/upload:/usr/src/app/upload # - ${UPLOAD_LOCATION}:/usr/src/app/upload - /etc/localtime:/etc/localtime:ro env_file: - .env ports: - '2283:2283' depends_on: - redis - database restart: always healthcheck: disable: false immich-machine-learning: container_name: immich_machine_learning # For hardware acceleration, add one of -[armnn, cuda, openvino] to the image tag. # Example tag: ${IMMICH_VERSION:-release}-cuda # image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release} image: ghcr.hjkl01.cn/immich-app/immich-machine-learning:${IMMICH_VERSION:-release} # extends: # uncomment this section for hardware acceleration - see https://immich.app/docs/features/ml-hardware-acceleration # file: hwaccel.ml.yml # service: cpu # set to one of [armnn, cuda, openvino, openvino-wsl] for accelerated inference - use the `-wsl` version for WSL2 where applicable volumes: - ./data/immich_machine_learning/model-cache:/cache env_file: - .env restart: always healthcheck: disable: false redis: container_name: immich_redis image: docker.io/redis:6.2-alpine@sha256:eaba718fecd1196d88533de7ba49bf903ad33664a92debb24660a922ecd9cac8 healthcheck: test: redis-cli ping || exit 1 restart: always database: container_name: immich_postgres image: docker.io/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0 environment: POSTGRES_PASSWORD: ${DB_PASSWORD} POSTGRES_USER: ${DB_USERNAME} POSTGRES_DB: ${DB_DATABASE_NAME} POSTGRES_INITDB_ARGS: '--data-checksums' volumes: # Do not edit the next line. If you want to change the database storage location on your system, edit the value of DB_DATA_LOCATION in the .env file - ./data/immich_postgres/data:/var/lib/postgresql/data healthcheck: test: &gt;- pg_isready --dbname=&quot;$${POSTGRES_DB}&quot; --username=&quot;$${POSTGRES_USER}&quot; || exit 1; Chksum=&quot;$$(psql --dbname=&quot;$${POSTGRES_DB}&quot; --username=&quot;$${POSTGRES_USER}&quot; --tuples-only --no-align --command='SELECT COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database')&quot;; echo &quot;checksum failure count is $$Chksum&quot;; [ &quot;$$Chksum&quot; = '0' ] || exit 1 interval: 5m start_interval: 30s start_period: 5m command: &gt;- postgres -c shared_preload_libraries=vectors.so -c 'search_path=&quot;$$user&quot;, public, vectors' -c logging_collector=on -c max_wal_size=2GB -c shared_buffers=512MB -c wal_compression=on restart: always   ","version":"Next","tagName":"h3"},{"title":".env​","type":1,"pageTitle":"immich","url":"/notes/docker/immich#env","content":" # You can find documentation for all the supported env variables at https://immich.app/docs/install/environment-variables # The location where your uploaded files are stored UPLOAD_LOCATION=./library # The location where your database files are stored DB_DATA_LOCATION=./postgres # To set a timezone, uncomment the next line and change Etc/UTC to a TZ identifier from this list: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List # TZ=Etc/UTC # The Immich version to use. You can pin this to a specific version like &quot;v1.71.0&quot; IMMICH_VERSION=release # Connection secret for postgres. You should change it to a random password # Please use only the characters `A-Za-z0-9`, without special characters or spaces DB_PASSWORD=password # The values below this line do not need to be changed ################################################################################### DB_USERNAME=postgres DB_DATABASE_NAME=immich  ","version":"Next","tagName":"h3"},{"title":"gitea","type":0,"sectionRef":"#","url":"/notes/docker/gitea","content":"","keywords":"","version":"Next"},{"title":"gitea​","type":1,"pageTitle":"gitea","url":"/notes/docker/gitea#gitea-1","content":" 设置都有级别,如 Runner: 实例级别：Runner将为实例中的所有存储库运行Job。组织级别：Runner将为组织中的所有存储库运行Job。存储库级别：Runner将为其所属的存储库运行Job。需要在 Gitea 中注册 Runner, 需要在 Gitea 的 Web UI 中获取 GITEA_RUNNER_REGISTRATION_TOKEN。 变量 密钥: secrets变量: vars  ","version":"Next","tagName":"h2"},{"title":"docker-compose.yml​","type":1,"pageTitle":"gitea","url":"/notes/docker/gitea#docker-composeyml","content":" # ssh example: ssh://git@git.hjkl01.cn:33030/admin/project.git version: &quot;3&quot; networks: gitea-net: services: gitea: image: docker.gitea.com/gitea:1.23.6 container_name: gitea environment: - USER_UID=1000 - USER_GID=1000 restart: always volumes: - ./data/gitea:/data ports: - &quot;3000:3000&quot; # Web UI - &quot;22222:22&quot; networks: - gitea-net act_runner: # image: gitea/act_runner:latest image: gitea/act_runner:nightly container_name: gitea_act_runner restart: always depends_on: - gitea volumes: - /var/run/docker.sock:/var/run/docker.sock - ./data/runner:/data environment: - GITEA_INSTANCE_URL=http://gitea:3030 - GITEA_RUNNER_REGISTRATION_TOKEN=启动后在 Gitea 中注册 Runner - GITEA_RUNNER_NAME=runner-docker - GITEA_RUNNER_LABELS=docker:docker networks: - gitea-net   ","version":"Next","tagName":"h2"},{"title":".gitea/workflows/pull_on_push.yml​","type":1,"pageTitle":"gitea","url":"/notes/docker/gitea#giteaworkflowspull_on_pushyml","content":" name: Deploy to Multiple Servers on: push: branches: [ main ] jobs: deploy: runs-on: docker container: image: alpine:3.20 env: SERVER_USER: ${{ vars.USER }} SERVER_IP: ${{ vars.SERVER_IP }} steps: - name: Update apk mirrors (TUNA mirror) run: | sed -i 's/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g' /etc/apk/repositories apk update - name: Install ssh client &amp; git run: apk add --no-cache openssh-client git - name: Setup SSH key run: | mkdir -p ~/.ssh echo &quot;${{ secrets.SSH_PRIVATE_KEY }}&quot; &gt; ~/.ssh/id_ed25519 chmod 600 ~/.ssh/id_ed25519 touch ~/.ssh/known_hosts ssh-keyscan -p 22 $(echo ${{ vars.SERVER_IP }} | cut -d@ -f2) &gt;&gt; ~/.ssh/known_hosts 2&gt;/dev/null || true - name: Debug variables run: | echo &quot;Server user: $SERVER_USER&quot; echo &quot;Server IP: $SERVER_IP&quot; - name: Deploy via SSH run: | ssh -i ~/.ssh/id_ed25519 $SERVER_USER@$SERVER_IP &quot;cd /some_dir &amp;&amp; git pull&quot;  ","version":"Next","tagName":"h2"},{"title":"k8s","type":0,"sectionRef":"#","url":"/notes/docker/k8s","content":"","keywords":"","version":"Next"},{"title":"install​","type":1,"pageTitle":"k8s","url":"/notes/docker/k8s#install","content":" brew install kubectl brew install minikube # https://github.com/kubernetes/minikube/releases docker pull kicbase/stable:v0.0.44 # tag list: https://hub.docker.com/r/kicbase/stable/tags minikube start --base-image=&quot;kicbase/stable:v0.0.44&quot;  ","version":"Next","tagName":"h2"},{"title":"jackett","type":0,"sectionRef":"#","url":"/notes/docker/jackett","content":"jackett address --- services: jackett: image: lscr.io/linuxserver/jackett:latest container_name: jackett environment: - PUID=1000 - PGID=1000 - TZ=Etc/UTC - AUTO_UPDATE=true #optional - RUN_OPTS= #optional volumes: - /path/to/data:/config - /path/to/blackhole:/downloads ports: - 9117:9117 restart: unless-stopped networks: default: external: name: nginx-proxy ","keywords":"","version":"Next"},{"title":"jumpserver","type":0,"sectionRef":"#","url":"/notes/docker/jumpserver","content":"","keywords":"","version":"Next"},{"title":"docs​","type":1,"pageTitle":"jumpserver","url":"/notes/docker/jumpserver#docs","content":" ","version":"Next","tagName":"h2"},{"title":"github​","type":1,"pageTitle":"jumpserver","url":"/notes/docker/jumpserver#github","content":" docker volume create jsdata &amp;&gt; /dev/null docker volume create pgdata &amp;&gt; /dev/null docker run -d --name jms_all --restart always \\ -e SECRET_KEY=PleaseChangeMe \\ -e BOOTSTRAP_TOKEN=PleaseChangeMe \\ -v jsdata:/opt/data \\ -v pgdata:/var/lib/postgresql \\ -v $PWD/conf.py:/opt/jumpserver/apps/jumpserver/conf.py \\ -p 8085:80 -p 2222:2222 jumpserver/jms_all # conf.py 从容器里复制 修改domain   ","version":"Next","tagName":"h2"},{"title":"初始账号​","type":1,"pageTitle":"jumpserver","url":"/notes/docker/jumpserver#初始账号","content":" 默认账号: admin 默认密码: ChangeMe   --- services: jumpserver: image: jumpserver/jms_all container_name: jumpserver environment: - SECRET_KEY=PleaseChangeMe - BOOTSTRAP_TOKEN=PleaseChangeMe volumes: - ./data/jumpserver/jsdata/:/opt/data - ./data/jumpserver/pgdata/:/var/lib/postgresql # - ./data/jumpserver/conf.py:/opt/jumpserver/apps/jumpserver/conf.py ports: - 80:80 - 2222:2222 restart: unless-stopped  ","version":"Next","tagName":"h3"},{"title":"meetings","type":0,"sectionRef":"#","url":"/notes/docker/meetings","content":"","keywords":"","version":"Next"},{"title":"搭建视频会议​","type":1,"pageTitle":"meetings","url":"/notes/docker/meetings#搭建视频会议","content":" install: https://jitsi.github.io/handbook/docs/devops-guide/devops-guide-docker/  ","version":"Next","tagName":"h2"},{"title":"PUBLIC_URL 设置为 nginx/caddy 的外网地址​","type":1,"pageTitle":"meetings","url":"/notes/docker/meetings#public_url-设置为-nginxcaddy-的外网地址","content":"","version":"Next","tagName":"h3"},{"title":"music","type":0,"sectionRef":"#","url":"/notes/docker/music","content":"","keywords":"","version":"Next"},{"title":"download example​","type":1,"pageTitle":"music","url":"/notes/docker/music#download-example","content":" yt-dlp -x --audio-format best --audio-quality 0 --yes-playlist http://www.bilibili.com/video/BV1Ex4y1y7Wa   ","version":"Next","tagName":"h2"},{"title":"mStream​","type":1,"pageTitle":"music","url":"/notes/docker/music#mstream","content":" --- version: &quot;2.1&quot; services: mstream: image: lscr.io/linuxserver/mstream:latest container_name: mstream environment: - PUID=1000 - PGID=1000 - TZ=Asia/Shanghai volumes: - ./data/mstream/config:/config - ./data/mstream/music:/music ports: - 127.0.0.1:3000:3000 restart: unless-stopped networks: default: external: name: nginx-proxy   ","version":"Next","tagName":"h2"},{"title":"Navidrome​","type":1,"pageTitle":"music","url":"/notes/docker/music#navidrome","content":" version: &quot;3&quot; services: navidrome: container_name: navidrome image: deluan/navidrome:latest user: 0:0 #0:0代表用root用户运行 ports: - &quot;127.0.0.1:4533:4533&quot; restart: unless-stopped environment: # Optional: put your config options customization here. Examples: ND_SCANSCHEDULE: 1h ND_LOGLEVEL: info ND_SESSIONTIMEOUT: 24h ND_BASEURL: &quot;&quot; ND_ENABLETRANSCODINGCONFIG: &quot;true&quot; ND_TRANSCODINGCACHESIZE: &quot;4000M&quot; ND_IMAGECACHESIZE: &quot;1000M&quot; volumes: - &quot;./data/navidrome/data:/data&quot; - &quot;./data/mstream/music:/music&quot; networks: default: external: name: nginx-proxy  ","version":"Next","tagName":"h2"},{"title":"netdata","type":0,"sectionRef":"#","url":"/notes/docker/netdata","content":"netdata version: &quot;3&quot; services: netdata: image: netdata/netdata container_name: netdata hostname: 192.168.32.5 ports: - 19999:19999 restart: unless-stopped cap_add: - SYS_PTRACE security_opt: - apparmor:unconfined volumes: - /etc/passwd:/host/etc/passwd:ro - /etc/group:/host/etc/group:ro - /proc:/host/proc:ro - /sys:/host/sys:ro - /etc/os-release:/host/etc/os-release:ro networks: default: external: name: nginx-proxy ","keywords":"","version":"Next"},{"title":"nginx-proxy-manager","type":0,"sectionRef":"#","url":"/notes/docker/nginx","content":"nginx-proxy-manager version: &quot;3&quot; services: app: image: &quot;jc21/nginx-proxy-manager:latest&quot; restart: unless-stopped ports: - &quot;80:80&quot; - &quot;81:81&quot; - &quot;443:443&quot; volumes: - ./data:/data - ./letsencrypt:/etc/letsencrypt networks: default: external: name: nginx-proxy # open http://127.0.0.1:81 # Default Admin User: Email: admin@example.com Password: changeme ","keywords":"","version":"Next"},{"title":"movies","type":0,"sectionRef":"#","url":"/notes/docker/movies","content":"","keywords":"","version":"Next"},{"title":"bitplay​","type":1,"pageTitle":"movies","url":"/notes/docker/movies#bitplay","content":" services: bitplay: image: ghcr.io/aculix/bitplay:main container_name: bitplay ports: - 3347:3347 # Expose the web UI port volumes: # Mount the config directory for persistent settings (Optional) - ./data/bitplay_config:/app/config restart: unless-stopped   ","version":"Next","tagName":"h2"},{"title":"aria2​","type":1,"pageTitle":"movies","url":"/notes/docker/movies#aria2","content":" version: &quot;3.8&quot; services: Aria2-Pro: container_name: aria2-pro image: p3terx/aria2-pro environment: - PUID=65534 - PGID=65534 - UMASK_SET=022 - RPC_SECRET=updateme!!! - RPC_PORT=6800 - LISTEN_PORT=6888 - DISK_CACHE=64M - IPV6_MODE=true - UPDATE_TRACKERS=true - CUSTOM_TRACKER_URL= - TZ=Asia/Shanghai volumes: - ${PWD}/data/aria2-config:/config - ${PWD}/data/downloads:/downloads network_mode: host # network_mode: bridge # ports: # - 6800:6800 # - 6888:6888 # - 6888:6888/udp restart: unless-stopped logging: driver: json-file options: max-size: 1m AriaNg: container_name: ariang image: p3terx/ariang command: --port 6880 --ipv6 # network_mode: host ports: - 127.0.0.1:6880:6880 restart: unless-stopped logging: driver: json-file options: max-size: 1m jellyfin: image: jellyfin/jellyfin:latest container_name: jellyfin_server volumes: - ./data/jellyfin/config:/config # Configuration directory - ./data/jellyfin/cache:/cache - ./data/downloads:/downloads ports: - 127.0.0.1:8096:8096 restart: unless-stopped openlist: image: 'openlistteam/openlist:latest' container_name: openlist user: '0:0' # Please replace `0:0` with the actual user ID and group ID you want to use to run OpenList. environment: - PUID=0 - PGID=0 - UMASK=022 - TZ=Asia/Shanghai - OPENLIST_ADMIN_PASSWORD=xxx volumes: - './data/openlist:/opt/openlist/data' - '/somedir:/mnt' ports: - '5244:5244' restart: unless-stopped networks: default: external: name: nginx-proxy   ","version":"Next","tagName":"h2"},{"title":"caddy​","type":1,"pageTitle":"movies","url":"/notes/docker/movies#caddy","content":" movies.domain.com { reverse_proxy 127.0.0.1:8096 encode zstd gzip } aria.domain.com { reverse_proxy 127.0.0.1:6800 encode zstd gzip }   ","version":"Next","tagName":"h2"},{"title":"nginx​","type":1,"pageTitle":"movies","url":"/notes/docker/movies#nginx","content":" 链接 ","version":"Next","tagName":"h2"},{"title":"mongoDB","type":0,"sectionRef":"#","url":"/notes/docker/mongo","content":"","keywords":"","version":"Next"},{"title":"export && restore​","type":1,"pageTitle":"mongoDB","url":"/notes/docker/mongo#export--restore","content":" yay --noconfirm -S mongodb-tools-bin USER='' PASSWD='' HOST='192.168.32.6' PORT='27017' echo $(date +%s) echo $(date +%c) echo $(date +%Y%m%d_%H%M%S) FILENAME=sql/${HOST}_$(date +%Y%m%d_%H%M%S).json mongodump --uri=mongodb://${USER}:${PASSWD}@${HOST}:${PORT}/ --authenticationDatabase=admin -o ${FILENAME} # mongorestore --uri=mongodb://${USER}:${PASSWD}@${HOST}:${PORT}/ --authenticationDatabase=admin --dir ${FILENAME}  ","version":"Next","tagName":"h2"},{"title":"ollama","type":0,"sectionRef":"#","url":"/notes/docker/ollama","content":"","keywords":"","version":"Next"},{"title":"docker-compose.yml​","type":1,"pageTitle":"ollama","url":"/notes/docker/ollama#docker-composeyml","content":" Github  # CPU services: ollama: image: ollama/ollama container_name: ollama environment: - OLLAMA_ORIGINS=* ports: - '11434:11434' volumes: - './data/ollama:/root/.ollama' fmaclen: image: 'ghcr.io/fmaclen/hollama:latest' ports: - '4173:4173' # GPU services: ollama: image: ollama/ollama container_name: ollama environment: - OLLAMA_ORIGINS=* ports: - &quot;11434:11434&quot; volumes: - ./data/ollama_model:/root/.ollama deploy: resources: reservations: devices: - capabilities: [gpu] restart: unless-stopped  ","version":"Next","tagName":"h3"},{"title":"omni-tools","type":0,"sectionRef":"#","url":"/notes/docker/omni-tools","content":"","keywords":"","version":"Next"},{"title":"address​","type":1,"pageTitle":"omni-tools","url":"/notes/docker/omni-tools#address","content":" services: omni-tools: image: iib0011/omni-tools:latest container_name: omni-tools restart: unless-stopped ports: - &quot;8080:80&quot;  ","version":"Next","tagName":"h2"},{"title":"prest","type":0,"sectionRef":"#","url":"/notes/docker/prest","content":"prest # https://github.com/prest/prest#test-using-docker version: &quot;3&quot; services: postgres: image: postgres volumes: - &quot;./data/postgres:/var/lib/postgresql/data&quot; environment: - POSTGRES_USER=prest - POSTGRES_DB=prest - POSTGRES_PASSWORD=prest ports: - &quot;5432:5432&quot; healthcheck: test: [&quot;CMD-SHELL&quot;, &quot;pg_isready&quot;, &quot;-U&quot;, &quot;prest&quot;] interval: 30s retries: 3 prest: # use latest build - analyze the risk of using this version in production image: prest/prest links: - &quot;postgres:postgres&quot; environment: - PREST_DEBUG=false - PREST_AUTH_ENABLED=true - PREST_PG_HOST=postgres - PREST_PG_USER=prest - PREST_PG_PASS=prest - PREST_PG_DATABASE=prest - PREST_PG_PORT=5432 - PREST_SSL_MODE=disable depends_on: postgres: condition: service_healthy ports: - &quot;3000:3000&quot; networks: default: external: name: nginx-proxy ","keywords":"","version":"Next"},{"title":"redis","type":0,"sectionRef":"#","url":"/notes/docker/redis","content":"","keywords":"","version":"Next"},{"title":"redis 及其持久化​","type":1,"pageTitle":"redis","url":"/notes/docker/redis#redis-及其持久化","content":" ","version":"Next","tagName":"h2"},{"title":"redis.conf​","type":1,"pageTitle":"redis","url":"/notes/docker/redis#redisconf","content":" requirepass 123456 appendonly yes daemonize no   ","version":"Next","tagName":"h3"},{"title":"docker-compose.yml​","type":1,"pageTitle":"redis","url":"/notes/docker/redis#docker-composeyml","content":" version: &quot;3&quot; services: redis: image: redis restart: unless-stopped # command: redis-server --requirepass 123456 command: redis-server /usr/local/etc/redis/redis.conf ports: - 6379:6379 volumes: - ./redis.conf:/usr/local/etc/redis/redis.conf - ./data/redis:/data/ networks: default: external: name: nginx-proxy  ","version":"Next","tagName":"h2"},{"title":"mysql","type":0,"sectionRef":"#","url":"/notes/docker/mysql","content":"","keywords":"","version":"Next"},{"title":"docker-compose.yml​","type":1,"pageTitle":"mysql","url":"/notes/docker/mysql#docker-composeyml","content":" version: &quot;3.1&quot; services: db: # We use a mariadb image which supports both amd64 &amp; arm64 architecture image: mariadb:10.6.4-focal # If you really want to use MySQL, uncomment the following line #image: mysql:8.0.27 command: &quot;--default-authentication-plugin=mysql_native_password&quot; volumes: - ./data/mysql:/var/lib/mysql restart: always environment: - MYSQL_ROOT_PASSWORD=password - MYSQL_DATABASE=data - MYSQL_USER=user - MYSQL_PASSWORD=password - MYSQL_ROOT_HOST=% ports: - 3306:3306 networks: default: external: name: nginx-proxy   ","version":"Next","tagName":"h2"},{"title":"linux 配置​","type":1,"pageTitle":"mysql","url":"/notes/docker/mysql#linux-配置","content":" /etc/mysql/my.cnf: [client] default-character-set = utf8 [mysqld] default-storage-engine = INNODB character-set-server = utf8 collation-server = utf8_general_ci   ","version":"Next","tagName":"h3"},{"title":"others​","type":1,"pageTitle":"mysql","url":"/notes/docker/mysql#others","content":" protected-mode yes mysqldump -u root -p --all-databases &gt; data.txt source data.txt CREATE DATABASE testDB CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; http://docs.peewee-orm.com/en/latest/peewee/playhouse.html#pwiz-a-model-generator  ","version":"Next","tagName":"h3"},{"title":"openwrt","type":0,"sectionRef":"#","url":"/notes/docker/openwrt","content":"","keywords":"","version":"Next"},{"title":"command​","type":1,"pageTitle":"openwrt","url":"/notes/docker/openwrt#command","content":" # command sudo ip link set enp3s0 promisc on docker network create -d macvlan --subnet=192.168.50.0/24 --gateway=192.168.50.1 -o parent=enp3s0 macnet docker run --restart always --name openwrt -d --network macnet --privileged registry.cn-shanghai.aliyuncs.com/suling/openwrt:x86_64 /sbin/init docker exec -it openwrt zsh vim /etc/config/network config interface 'lan' option type 'bridge' option ifname 'eth0' option proto 'static' option ipaddr '192.168.50.18' option netmask '255.255.255.0' option ip6assign '60' option gateway '192.168.50.1' option broadcast '192.168.50.255' option dns '192.168.50.1' /etc/init.d/network restart   ","version":"Next","tagName":"h2"},{"title":"docker-compose​","type":1,"pageTitle":"openwrt","url":"/notes/docker/openwrt#docker-compose","content":" # 参考: https://docs.docker.com/network/macvlan/ # 虚拟网卡技术: 可以选择macvlan模式，也可以ipvlan模式 # 注意: 如果宿主机采用的是WIFI连接网络，则使用ipvlan模式，macvlan模式适合宿主机为有线连接网络的情况 # 手动创建网络命令 # ipvlan, parent为宿主机网卡 # docker network create -d ipvlan --subnet=192.168.2.1/24 --gateway=192.168.2.1 -o parent=enp3s0 -o ipvlan_mode=l2 ipvlan # macvlan, parent为宿主机网卡 # docker network create -d macvlan --subnet=192.168.2.1/24 --gateway=192.168.2.1 -o parent=enp3s0 macvlan # 使用docker-compose创建网络时，docker-compose V3版本配置时不支持设置网关,如有需要，可以使用version2.4的版本 # https://docs.docker.com/compose/compose-file/ # Additional IPAM configurations, such as gateway, are only honored for version 2 at the moment. version: &quot;3.7&quot; services: openwrt: image: crazygit/lean-openwrt-x86-64 restart: always privileged: true volumes: - ./openwrt/etc/config/network:/etc/config/network - ./openwrt/etc/config/dhcp:/etc/config/dhcp - ./openwrt/etc/rc.local:/etc/rc.local networks: - macvlan #- ipvlan networks: macvlan: driver: macvlan driver_opts: # 宿主机网卡 parent: enp3s0 ipam: config: - subnet: 192.168.2.0/24 #gateway: 192.168.2.1 #ipvlan: # driver: ipvlan # driver_opts: # ipvlan_mode: l2 # # 宿主机网卡 # parent: enp3s0 # ipam: # config: # - subnet: 192.168.2.0/24 # #gateway: 192.168.2.1  ","version":"Next","tagName":"h2"},{"title":"postgresql","type":0,"sectionRef":"#","url":"/notes/docker/postgresql","content":"","keywords":"","version":"Next"},{"title":"postgres adminer pgadmin4​","type":1,"pageTitle":"postgresql","url":"/notes/docker/postgresql#postgres-adminer-pgadmin4","content":" version: &quot;3&quot; services: db: image: postgres:15-alpine restart: always ports: - 5432:5432 environment: POSTGRES_PASSWORD: &quot;password&quot; POSTGRES_USER: &quot;user&quot; POSTGRES_DB: &quot;postgres&quot; PGDATA: &quot;/var/lib/postgresql/data&quot; volumes: - ./data/postgres:/var/lib/postgresql/data dbgate: image: dbgate/dbgate restart: always ports: - 80:3000 depends_on: - db volumes: - ./data/dbgate-data:/root/.dbgate admin: image: adminer restart: always depends_on: - db ports: - 8080:8080 pgadmin: container_name: pgadmin4_container image: dpage/pgadmin4 restart: always environment: PGADMIN_DEFAULT_EMAIL: xx@xx.com PGADMIN_DEFAULT_PASSWORD: password ports: - &quot;80:80&quot; networks: default: external: name: nginx-proxy   ","version":"Next","tagName":"h3"},{"title":"other config​","type":1,"pageTitle":"postgresql","url":"/notes/docker/postgresql#other-config","content":" # 可视化工具推荐 docker run -d -e SESSIONS=true -p 8081:8081 sosedoff/pgweb # mac tableplus psql -U dbuser -d exampledb -h 127.0.0.1 -p 5432 # 导入导出 pg_dump -h hostname -U username -d database_name -f backup.sql psql -h hostname -U username -d database_name -f backup.sql sudo vi /etc/postgresql/9.5/main/postgresql.conf sudo gedit /etc/postgresql/9.5/main/pg_hba.conf host all all 0.0.0.0/0 md5 sudo /etc/init.d/postgresql restart # 查询有外键的数据 select count(*) from &quot;case&quot; where court_id in (select id from court where province =''); # 查询重复数据 select uuid from case group by uuid having count(uuid) &gt; 1 # 查询同一列所有值出现的次数 SELECT country ,COUNT(*) FROM tablename GROUP BY country # update existed data update sometable set somekey = concat('new value', somekey) where prod_code = '12345' # 导出数据结构 python -m pwiz -e postgresql -u user -P db &gt; model.py python -m pwiz -e mysql -H 192.168.1.x -u root -P dbname &gt; model.py   ","version":"Next","tagName":"h3"},{"title":"python example​","type":1,"pageTitle":"postgresql","url":"/notes/docker/postgresql#python-example","content":" # pip install psycopg2-binary pandas import sys import psycopg2 import pandas as pd HOST = &quot;&quot; PORT = &quot;5432&quot; DATABASE = &quot;postgres&quot; USER = &quot;&quot; PASSWORD = &quot;&quot; TABLENAME = &quot;sometablename&quot; SERIALIZE_DICT = { &quot;create_date&quot;: &quot;日期&quot;, &quot;sales_channel_level_1&quot;: &quot;销售渠道一级&quot;, &quot;sales_channel_level_1_code&quot;: &quot;销售渠道二级编码&quot;, &quot;sales_channel_level_2&quot;: &quot;销售渠道二级名称&quot;, &quot;product_name&quot;: &quot;商品名称&quot;, &quot;category_level_1&quot;: &quot;一级分类品名&quot;, &quot;category_level_2&quot;: &quot;二级分类品名&quot;, &quot;category_level_3&quot;: &quot;三级分类品名&quot;, &quot;import_area&quot;: &quot;进口地区&quot;, &quot;brand&quot;: &quot;品牌&quot;, &quot;sales_unit&quot;: &quot;销售单位&quot;, &quot;weight&quot;: &quot;公斤重量&quot;, &quot;price&quot;: &quot;单价/公斤&quot;, &quot;if_import&quot;: &quot;是否进口&quot;, &quot;variety&quot;: &quot;品种&quot;, &quot;category&quot;: &quot;类别&quot;, } KEYS = None VALUES = &quot;,&quot;.join([f&quot;%({v})s&quot; for v in SERIALIZE_DICT.values()]) def main(filename): if not KEYS: print(&quot;,&quot;.join(SERIALIZE_DICT.keys())) return conn = psycopg2.connect( host=HOST, port=PORT, database=DATABASE, user=USER, password=PASSWORD, ) cur = conn.cursor() temp = &quot;,&quot;.join([f&quot;{k} varchar &quot; for k, _ in SERIALIZE_DICT.items()]) sql = f'CREATE TABLE IF NOT EXISTS &quot;{TABLENAME}&quot; ( id serial PRIMARY KEY, {temp}); ' print(sql) cur.execute(sql) conn.commit() df = pd.read_excel(filename) data_dict = df.to_dict(&quot;records&quot;) for d in data_dict: try: print(d) sql = f&quot;INSERT INTO {TABLENAME} ({KEYS}) VALUES ({VALUES})&quot; cur.execute(sql, d) conn.commit() except Exception as err: print(err) cur.close() conn.close() if __name__ == &quot;__main__&quot;: argv = sys.argv[:] main(argv[1])  ","version":"Next","tagName":"h3"},{"title":"docker registry","type":0,"sectionRef":"#","url":"/notes/docker/registry","content":"","keywords":"","version":"Next"},{"title":"registry.yml​","type":1,"pageTitle":"docker registry","url":"/notes/docker/registry#registryyml","content":" version: '3' services: registry: image: registry:2 container_name: registry restart: always ports: - &quot;15005:5000&quot; volumes: - ./data/registry/data:/var/lib/registry - ./data/registry/auth:/auth - ./data/registry/config.yml:/etc/docker/registry/config.yml:ro environment: REGISTRY_AUTH: htpasswd REGISTRY_AUTH_HTPASSWD_PATH: /auth/htpasswd REGISTRY_AUTH_HTPASSWD_REALM: Registry Realm   ","version":"Next","tagName":"h2"},{"title":"生成密码​","type":1,"pageTitle":"docker registry","url":"/notes/docker/registry#生成密码","content":" sudo apt install apache2-utils -y # 创建第一个用户（-c 表示创建新文件） sudo htpasswd -Bc ./data/registry/auth/htpasswd admin   ","version":"Next","tagName":"h2"},{"title":"config.yml​","type":1,"pageTitle":"docker registry","url":"/notes/docker/registry#configyml","content":" version: 0.1 log: fields: service: registry storage: cache: blobdescriptor: inmemory filesystem: rootdirectory: /var/lib/registry http: addr: :5000 headers: X-Content-Type-Options: [nosniff] health: storagedriver: enabled: true interval: 10s threshold: 3   ","version":"Next","tagName":"h2"},{"title":"客户端​","type":1,"pageTitle":"docker registry","url":"/notes/docker/registry#客户端","content":" # /etc/docker/daemon.json { &quot;insecure-registries&quot;: [&quot;你的-registry-ip:5000&quot;] } sudo systemctl restart docker docker login http://你的-registry-ip:5000 # 拉取一个测试镜像 docker pull hello-world # 打标签 docker tag hello-world 你的-registry-ip:5000/hello-world:latest # 推送 docker push 你的-registry-ip:5000/hello-world:latest # 查看已推送的镜像 curl -u admin:mypassword -X GET http://你的-registry-ip:5000/v2/_catalog  ","version":"Next","tagName":"h2"},{"title":"shiori 书签管理器","type":0,"sectionRef":"#","url":"/notes/docker/shiori","content":"","keywords":"","version":"Next"},{"title":"原链接​","type":1,"pageTitle":"shiori 书签管理器","url":"/notes/docker/shiori#原链接","content":" https://github.com/go-shiori/shiori/  提示 loginuser: shiori passwd: gopher  version: &quot;2.1&quot; services: shiori: image: nicholaswilde/shiori:latest container_name: shiori-default environment: TZ: Asia/Shanghai PUID: 1000 PGID: 1000 SHIORI_PG_HOST: db SHIORI_PG_PORT: 5432 SHIORI_PG_USER: user SHIORI_PG_PASS: password SHIORI_PG_NAME: &quot;&quot; ports: - 8080:8080 restart: unless-stopped volumes: - ./data/shiori:/data depends_on: - db db: image: postgres restart: always environment: POSTGRES_USER: user POSTGRES_PASSWORD: password volumes: - ./data/shiori_postgres:/var/lib/postgresql/data networks: default: external: name: nginx-proxy  ","version":"Next","tagName":"h2"},{"title":"wxedge","type":0,"sectionRef":"#","url":"/notes/docker/wxedge","content":"","keywords":"","version":"Next"},{"title":"host 模式​","type":1,"pageTitle":"wxedge","url":"/notes/docker/wxedge#host-模式","content":" docker run -d --name=wxedge --restart=always --privileged --net=host -v /dockers/data:/storage:rw registry.hub.docker.com/onething1/wxedge   ","version":"Next","tagName":"h2"},{"title":"混杂模式实例​","type":1,"pageTitle":"wxedge","url":"/notes/docker/wxedge#混杂模式实例","content":" sudo ip link set wlp2s0 promisc on docker network create -d macvlan --subnet=192.168.32.0/24 --gateway=192.168.32.1 -o parent=wlp2s0 macvlandocker docker run -d --name=wxedge --restart=always --privileged --net=macvlandocker --ip=192.168.32.46 -p 192.168.32.46:18888:18888 -v /dockers/data:/storage:rw registry.hub.docker.com/onething1/wxedge   ","version":"Next","tagName":"h2"},{"title":"绑定​","type":1,"pageTitle":"wxedge","url":"/notes/docker/wxedge#绑定","content":" 打开 ip:18888, APP 扫码 ","version":"Next","tagName":"h2"},{"title":"linux","type":0,"sectionRef":"#","url":"/notes/linux","content":"","keywords":"","version":"Next"},{"title":"我的配置文件​","type":1,"pageTitle":"linux","url":"/notes/linux#我的配置文件","content":" https://github.com/hjkl01/dotfiles  ","version":"Next","tagName":"h2"},{"title":"set mirror​","type":1,"pageTitle":"linux","url":"/notes/linux#set-mirror","content":" curl -L https://gitee.com/RubyMetric/chsrc/releases/download/pre/chsrc-x64-linux -o chsrc; chmod +x ./chsrc \\ &amp;&amp; ./chsrc set debian first \\ &amp;&amp; ./chsrc set pip first   ","version":"Next","tagName":"h2"},{"title":"install wechat​","type":1,"pageTitle":"linux","url":"/notes/linux#install-wechat","content":" # package name wechat-uos-bwrap wechat-uos-qt   ","version":"Next","tagName":"h2"},{"title":"get date​","type":1,"pageTitle":"linux","url":"/notes/linux#get-date","content":" current_time=$(date &quot;+%Y-%m-%d %H:%M:%S&quot;) echo $current_time   ","version":"Next","tagName":"h2"},{"title":"zsh​","type":1,"pageTitle":"linux","url":"/notes/linux#zsh","content":" # run command background 1. setopt NO_HUP 2. nohup &lt;command&gt; &amp; disown   ","version":"Next","tagName":"h2"},{"title":"find​","type":1,"pageTitle":"linux","url":"/notes/linux#find","content":" # online command curl cht.sh/find # find by name find . -name &quot;*.log&quot; # 查找内容 grep &quot;hello&quot; example.txt grep -r &quot;hello&quot; my_directory find directory | xargs grep &quot;string&quot; # udpate filename find . -type f -name 'some.*' | while read FILE; do newfile=&quot;$(echo ${FILE} | sed -e 's/some/result/')&quot; mv &quot;${FILE}&quot; &quot;${newfile}&quot; done # delte size &lt; 1k find -size 1k -delete # linux sed -i 's/oo/kk/g' testfile # Mac sed -i &quot;&quot; 's/oo/kk/g' testfile # example sed -i 's|https://github.com|https://ghp.ci/https://github.com|g' example.txt  ","version":"Next","tagName":"h2"},{"title":"samba nfs","type":0,"sectionRef":"#","url":"/notes/docker/samba","content":"","keywords":"","version":"Next"},{"title":"samba​","type":1,"pageTitle":"samba nfs","url":"/notes/docker/samba#samba","content":" version: &quot;3.4&quot; services: samba: image: dperson/samba environment: TZ: &quot;EST5EDT&quot; ports: - &quot;139:139/tcp&quot; - &quot;445:445/tcp&quot; read_only: false restart: unless-stopped volumes: - ./data:/mnt:z - ./data:/mnt:ro command: '-s &quot;Volume;/mnt;yes;no;no;foo&quot; -u &quot;foo;bar&quot; -p' # &quot;&lt;name;/path&gt;[;browse;readonly;guest;users;admins;writelist;comment]&quot; networks: default: external: name: nginx-proxy   ","version":"Next","tagName":"h2"},{"title":"nfs​","type":1,"pageTitle":"samba nfs","url":"/notes/docker/samba#nfs","content":" version: &quot;2.1&quot; services: # https://hub.docker.com/r/itsthenetwork/nfs-server-alpine nfs: image: itsthenetwork/nfs-server-alpine:12 container_name: nfs restart: unless-stopped privileged: true environment: - SHARED_DIRECTORY=/data volumes: - ./data/jellyfin/movies:/data ports: - 2049:2049 networks: default: external: name: nginx-proxy  ","version":"Next","tagName":"h2"},{"title":"adb","type":0,"sectionRef":"#","url":"/notes/linux/adb","content":"","keywords":"","version":"Next"},{"title":"常用命令​","type":1,"pageTitle":"adb","url":"/notes/linux/adb#常用命令","content":" # adb commands adb devices #查看连接设备 adb start-server 启动adb 服务，基本不会用到，因为只要设备连接正确，会自动启动adb server adb kill-server 停止adb server adb -s cf27456f shell # 指定连接设备使用命令 adb install test.apk # 安装应用 adb install -r demo.apk #安装apk 到sd 卡： adb uninstall cn.com.test.mobile #卸载应用，需要指定包 adb uninstall -k cn.com.test.mobile #卸载app 但保留数据和缓存文件 adb shell pm list packages #列出手机装的所有app 的包名 adb shell pm list packages -s 列出系统应用的所有包名 adb shell pm list packages -3 #列出除了系统应用的第三方应用包名 adb shell pm clear cn.com.test.mobile #清除应用数据与缓存 adb shell am start -ncn.com.test.mobile/.ui.SplashActivity #启动应用 adb shell dumpsys package #包信息Package Information adb shell dumpsys meminfo #内存使用情况Memory Usage adb -s 192.168.32.10:6666 shell pm list packages -3&quot;|cut -f 2 -d &quot;: #列出运行的app adb shell am force-stop cn.com.test.mobile #强制停止应用 adb logcat #查看日志 adb logcat -c #清除log 缓存 adb reboot #重启 adb get-serialno #获取序列号 adb shell getprop ro.build.version.release #查看Android 系统版本 adb shell top -s 10 #查看占用内存前10 的app adb push &lt;local&gt; &lt;remote&gt; #从本地复制文件到设备 adb pull &lt;remote&gt; &lt;local&gt; #从设备复制文件到本地 adb bugreport #查看bug 报告 adb help #查看ADB 帮助   ","version":"Next","tagName":"h3"},{"title":"开启调试​","type":1,"pageTitle":"adb","url":"/notes/linux/adb#开启调试","content":" # USB 连接调试 adb -s some_device_id tcpip 6666 # android 11 开启无线调试 # 开发者模式中 选择无线调试 # 选择 配对码连接 port随机 注意看设备显示 adb pair host:port # 查看设备显示的端口 adb connect host:port   ","version":"Next","tagName":"h3"},{"title":"authorized​","type":1,"pageTitle":"adb","url":"/notes/linux/adb#authorized","content":" # need root cat ~/.android/adbkey.pub # add to /data/misc/adb/adb_keys  ","version":"Next","tagName":"h3"},{"title":"arch","type":0,"sectionRef":"#","url":"/notes/linux/arch","content":"","keywords":"","version":"Next"},{"title":"我的配置​","type":1,"pageTitle":"arch","url":"/notes/linux/arch#我的配置","content":" https://github.com/hjkl01/dotfiles  ","version":"Next","tagName":"h3"},{"title":"安装参考​","type":1,"pageTitle":"arch","url":"/notes/linux/arch#安装参考","content":" archlinux link2  ","version":"Next","tagName":"h3"},{"title":"常用工具安装​","type":1,"pageTitle":"arch","url":"/notes/linux/arch#常用工具安装","content":" sudo openssh python3 which bc gcc   ","version":"Next","tagName":"h3"},{"title":"wifi​","type":1,"pageTitle":"arch","url":"/notes/linux/arch#wifi","content":" iwctl device list station list station wlan0 scan station wlan0 show station wlan0 connect SSID   ","version":"Next","tagName":"h3"},{"title":"安装​","type":1,"pageTitle":"arch","url":"/notes/linux/arch#安装","content":" 关闭安全启动以及快速启动 磁盘分区 fdisk -l cfdisk /dev/sdb /boot分区，用来存储启动信息，该分区一般 512M 足够。BIOS 引导可以不单独分这个分区，但是 UEFI 引导必须有该分区作为 EFI 分区。 /swap分区，交换分区，该分区功能很多，不等同于 Windows 的虚拟内存，建议每一个用户至少创建一个 2G 大小的交换分区。该分区大小视电脑内存大小而定。一般选取自身电脑内存的四分之一即可，及本人电脑为16G，那么我将选择创建4G的swap分区 /home分区（可选），即用户分区，用于存储用户的数据。该分区是用户自己数据存储的地方。如果你不单独分出 home 分区，则你的所有数据将仅存储在/mnt 分区。对于新手，建议不创建单独的 /home 分区；。 /mnt分区，即根目录，储存用户的数据，如果你创建单独的/home 分区，则建议该分区大小不小于 20G，根据你的需求和剩余空间大小而定；如果不创建单独的 /home 分区，就把磁盘所有剩余空间留给 /mnt。 mkfs.ext4 /dev/sdb4 mkfs.vfat -F32 /dev/sdb2 mkswap /dev/sdb3 # mkfs.ext4 /dev/sdb5 mount /dev/sdb4 /mnt mkdir -p /mnt/boot mount /dev/sdb2 /mnt/boot swapon /dev/sdb3 # mkdir /mnt/home # mount /dev/sdb5 /mnt/home reflector --country 'China' --age 12 --protocol https --sort rate --save /etc/pacman.d/mirrorlist Server = https://mirrors.aliyun.com/archlinux/$repo/os/$arch Server = https://mirror.nyist.edu.cn/archlinux/$repo/os/$arch Server = https://mirrors.jcut.edu.cn/archlinux/$repo/os/$arch Server = https://mirrors.shanghaitech.edu.cn/archlinux/$repo/os/$arch Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch pacstrap /mnt base base-devel linux linux-firmware neovim e2fsprogs ntfs-3g zsh tmux fzf zoxide neovim lua stylua git htop tree lsof # fcitx5-rime alacritty pacman -Sy archlinux-keyring genfstab -U -p /mnt &gt;&gt; /mnt/etc/fstab arch-chroot /mnt /bin/bash passwd root useradd -m -G wheel -s /usr/bin/zsh 你的用户名 passwd 你的用户名 nvim /etc/sudoers echo archlinux &gt; /etc/hostname nvim /etc/hosts 127.0.0.1\tlocalhost ::1 localhost # amd pacman -S amd-ucode # intel pacman -S intel-ucode pacman -S grub efibootmgr os-prober # uefi grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=grub --recheck #非uefi启动 grub-install --target=i386-pc /dev/sdbX grub-mkconfig -o /boot/grub/grub.cfg nvim /etc/locale.gen #en_US.UTF-8 UTF-8 #zh_CN.UTF-8 UTF-8 locale-gen echo LANG=zh_CN.UTF-8 &gt; /etc/locale.conf ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime systemctl enable systemd-timesyncd pacman -S xorg pacman -S gnome gdm systemctl enable gdm pacman -S wqy-microhei nvim ~/.xprofile export LANG=zh_CN.UTF-8 export LANGUAGE=zh_CN:en_US export LC_CTYPE=en_US.UTF-8 cp ~/.xprofile /home/你的用户名 # after install lspci -k # example pacman --noconfirm -S broadcom-wl pacman -S dhcpcd iwd networkmanager systemctl enable dhcpcd.service systemctl enable iwd.service systemctl enable NetworkManager # Windows 双系统引导 nvim /etc/default/grub # GRUB_DISABLE_OS_PROBER=false sudo grub-mkconfig -o /boot/grub/grub.cfg   ","version":"Next","tagName":"h3"},{"title":"yay​","type":1,"pageTitle":"arch","url":"/notes/linux/arch#yay","content":" pacman -S --needed git base-devel git clone https://aur.archlinux.org/yay-bin.git cd yay-bin sed -i 's|https://github.com|https://gh.hjkl01.cn/https://github.com|g' PKGBUILD makepkg -si   ","version":"Next","tagName":"h3"},{"title":"输入法 参考​","type":1,"pageTitle":"arch","url":"/notes/linux/arch#输入法-参考","content":" vi ~/.xprofile export GTK_IM_MODULE=fcitx export QT_IM_MODULE=fcitx export XMODIFIERS=&quot;@im=fcitx&quot; fcitx5 &amp; # 如果不生效 取出export 写入到/etc/environment INPUT_METHOD=fcitx5 GTK_IM_MODULE=fcitx5 QT_IM_MODULE=fcitx5 XMODIFIERS=@im=fcitx5   ","version":"Next","tagName":"h3"},{"title":"ufw​","type":1,"pageTitle":"arch","url":"/notes/linux/arch#ufw","content":" sudo pacman --noconfirm -S ufw sudo systemctl enable --now ufw.service sudo ufw enable sudo ufw default deny sudo ufw allow 22 sudo ufw delete 22 sudo ufw allow 11200:11299/tcp sudo ufw status   ","version":"Next","tagName":"h3"},{"title":"pppoe 拨号​","type":1,"pageTitle":"arch","url":"/notes/linux/arch#pppoe-拨号","content":" yay -S --noconfirm rp-pppoe net-tools ifconfig # 查看对应的网卡 sudo ifconfig 网卡 down # 停止网卡服务 sudo pppoe-setup # 输入对应的用户名密码等信息 sudo pppoe-start sudo route delete default sudo route add default ppp0 # ppp0可能是其他名字 ifconfig查看 sudo nvim /etc/resolvconf.conf # 更新name_servers sudo resolvconf -u # 更新DNS   ","version":"Next","tagName":"h3"},{"title":"missing libcrypto.so.1.1​","type":1,"pageTitle":"arch","url":"/notes/linux/arch#missing-libcryptoso11","content":" https://unix.stackexchange.com/questions/723616/how-to-fix-missing-libcrypto-so-1-1  ","version":"Next","tagName":"h3"},{"title":"install on vps​","type":1,"pageTitle":"arch","url":"/notes/linux/arch#install-on-vps","content":" 从现有_Linux_发行版安装_Arch_Linux wiki: https://gitlab.com/drizzt/vps2arch/-/wikis/Tested-VPS-Providers ⚠️ 设置 root 的密码​  wget https://github.com/hjkl01/hjkl01.github.io/releases/download/vps2arch/vps2arch sudo sh ./vps2arch sync ; reboot -f  ","version":"Next","tagName":"h3"},{"title":"ascii","type":0,"sectionRef":"#","url":"/notes/linux/ascii","content":"","keywords":"","version":"Next"},{"title":"ASCII 编码一览表​","type":1,"pageTitle":"ascii","url":"/notes/linux/ascii#ascii-编码一览表","content":" 二进制\t十进制\t十六进制\t字符/缩写\t解释00000000\t0\t00\tNUL (NULL)\t空字符 00000001\t1\t01\tSOH (Start Of Headling)\t标题开始 00000010\t2\t02\tSTX (Start Of Text)\t正文开始 00000011\t3\t03\tETX (End Of Text)\t正文结束 00000100\t4\t04\tEOT (End Of Transmission)\t传输结束 00000101\t5\t05\tENQ (Enquiry)\t请求 00000110\t6\t06\tACK (Acknowledge)\t回应/响应/收到通知 00000111\t7\t07\tBEL (Bell)\t响铃 00001000\t8\t08\tBS (Backspace)\t退格 00001001\t9\t09\tHT (Horizontal Tab)\t水平制表符 00001010\t10\t0A\tLF/NL(Line Feed/New Line)\t换行键 00001011\t11\t0B\tVT (Vertical Tab)\t垂直制表符 00001100\t12\t0C\tFF/NP (Form Feed/New Page)\t换页键 00001101\t13\t0D\tCR (Carriage Return)\t回车键 00001110\t14\t0E\tSO (Shift Out)\t不用切换 00001111\t15\t0F\tSI (Shift In)\t启用切换 00010000\t16\t10\tDLE (Data Link Escape)\t数据链路转义 00010001\t17\t11\tDC1/XON (Device Control 1/Transmission On)\t设备控制1/传输开始 00010010\t18\t12\tDC2 (Device Control 2)\t设备控制2 00010011\t19\t13\tDC3/XOFF (Device Control 3/Transmission Off)\t设备控制3/传输中断 00010100\t20\t14\tDC4 (Device Control 4)\t设备控制4 00010101\t21\t15\tNAK (Negative Acknowledge)\t无响应/非正常响应/拒绝接收 00010110\t22\t16\tSYN (Synchronous Idle)\t同步空闲 00010111\t23\t17\tETB (End of Transmission Block)\t传输块结束/块传输终止 00011000\t24\t18\tCAN (Cancel)\t取消 00011001\t25\t19\tEM (End of Medium)\t已到介质末端/介质存储已满/介质中断 00011010\t26\t1A\tSUB (Substitute)\t替补/替换 00011011\t27\t1B\tESC (Escape)\t逃离/取消 00011100\t28\t1C\tFS (File Separator)\t文件分割符 00011101\t29\t1D\tGS (Group Separator)\t组分隔符/分组符 00011110\t30\t1E\tRS (Record Separator)\t记录分离符 00011111\t31\t1F\tUS (Unit Separator)\t单元分隔符 00100000\t32\t20\t(Space)\t空格 00100001\t33\t21\t! 00100010\t34\t22\t&quot; 00100011\t35\t23\t# 00100100\t36\t24\t$ 00100101\t37\t25\t% 00100110\t38\t26\t&amp; 00100111\t39\t27\t' 00101000\t40\t28\t( 00101001\t41\t29\t) 00101010\t42\t2A\t* 00101011\t43\t2B\t+ 00101100\t44\t2C\t, 00101101\t45\t2D\t- 00101110\t46\t2E\t. 00101111\t47\t2F\t/ 00110000\t48\t30\t0 00110001\t49\t31\t1 00110010\t50\t32\t2 00110011\t51\t33\t3 00110100\t52\t34\t4 00110101\t53\t35\t5 00110110\t54\t36\t6 00110111\t55\t37\t7 00111000\t56\t38\t8 00111001\t57\t39\t9 00111010\t58\t3A\t: 00111011\t59\t3B\t; 00111100\t60\t3C\t&lt; 00111101\t61\t3D\t= 00111110\t62\t3E\t&gt; 00111111\t63\t3F\t? 01000000\t64\t40\t@ 01000001\t65\t41\tA 01000010\t66\t42\tB 01000011\t67\t43\tC 01000100\t68\t44\tD 01000101\t69\t45\tE 01000110\t70\t46\tF 01000111\t71\t47\tG 01001000\t72\t48\tH 01001001\t73\t49\tI 01001010\t74\t4A\tJ 01001011\t75\t4B\tK 01001100\t76\t4C\tL 01001101\t77\t4D\tM 01001110\t78\t4E\tN 01001111\t79\t4F\tO 01010000\t80\t50\tP 01010001\t81\t51\tQ 01010010\t82\t52\tR 01010011\t83\t53\tS 01010100\t84\t54\tT 01010101\t85\t55\tU 01010110\t86\t56\tV 01010111\t87\t57\tW 01011000\t88\t58\tX 01011001\t89\t59\tY 01011010\t90\t5A\tZ 01011011\t91\t5B\t[ 01011100\t92\t5C\t| 01011101\t93\t5D\t] 01011110\t94\t5E\t^ 01011111\t95\t5F\t_ 01100000\t96\t60\t` 01100001\t97\t61\ta 01100010\t98\t62\tb 01100011\t99\t63\tc 01100100\t100\t64\td 01100101\t101\t65\te 01100110\t102\t66\tf 01100111\t103\t67\tg 01101000\t104\t68\th 01101001\t105\t69\ti 01101010\t106\t6A\tj 01101011\t107\t6B\tk 01101100\t108\t6C\tl 01101101\t109\t6D\tm 01101110\t110\t6E\tn 01101111\t111\t6F\to 01110000\t112\t70\tp 01110001\t113\t71\tq 01110010\t114\t72\tr 01110011\t115\t73\ts 01110100\t116\t74\tt 01110101\t117\t75\tu 01110110\t118\t76\tv 01110111\t119\t77\tw 01111000\t120\t78\tx 01111001\t121\t79\ty 01111010\t122\t7A\tz 01111011\t123\t7B\t{ 01111100\t124\t7C 01111101\t125\t7D\t} 01111110\t126\t7E\t~ 01111111\t127\t7F\tDEL (Delete)\t删除 ","version":"Next","tagName":"h3"},{"title":"asdf","type":0,"sectionRef":"#","url":"/notes/linux/asdf","content":"","keywords":"","version":"Next"},{"title":"install asdf​","type":1,"pageTitle":"asdf","url":"/notes/linux/asdf#install-asdf","content":" git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.10.0 # add following to ~/.zshrc # mac # . /usr/local/opt/asdf/libexec/asdf.sh # linux . $HOME/.asdf/asdf.sh   ","version":"Next","tagName":"h3"},{"title":"install plugin example​","type":1,"pageTitle":"asdf","url":"/notes/linux/asdf#install-plugin-example","content":" asdf plugin add nodejs asdf list all nodejs asdf install nodejs lts # asdf install nodejs latest asdf list nodejs asdf global nodejs lts   ","version":"Next","tagName":"h3"},{"title":"asdf 安装Python加速​","type":1,"pageTitle":"asdf","url":"/notes/linux/asdf#asdf-安装python加速","content":" 找到需要安装的对应版本 如3.11.12  example: https://mirrors.ustc.edu.cn/python/3.11.12/Python-3.11.12.tar.xz # https://mirrors.aliyun.com/python-release/source # 分别替换GitHub和Python的地址 vi ~/.asdf/plugins/python/pyenv/plugins/python-build/share/python-build/3.11.12  ","version":"Next","tagName":"h3"},{"title":"iptables","type":0,"sectionRef":"#","url":"/notes/linux/iptables","content":"iptables # 查看 sudo ip6tables -vnL # example config *filter :INPUT DROP [0:0] :FORWARD DROP [0:0] :OUTPUT ACCEPT [0:0] -A INPUT -i lo -j ACCEPT -A INPUT -p tcp --dport 22 -j ACCEPT -A INPUT -p tcp --dport 10000:20000 -j ACCEPT COMMIT ","keywords":"","version":"Next"},{"title":"ffmpeg","type":0,"sectionRef":"#","url":"/notes/linux/ffpmeg","content":"","keywords":"","version":"Next"},{"title":"视频转图片​","type":1,"pageTitle":"ffmpeg","url":"/notes/linux/ffpmeg#视频转图片","content":" current_time=$(date &quot;+%Y-%m-%d %H:%M:%S&quot;) echo $current_time ffmpeg -i some.mp4 -t 1 -s 640x360 -r 15 pic/op_%04d.jpg -t 需要转换的视频时长 -s 设置目标图片的分辨率 -r 帧率，每秒产生图片的数量 op_%04d.jpg 生成图片文件的名称   ","version":"Next","tagName":"h2"},{"title":"图片转视频​","type":1,"pageTitle":"ffmpeg","url":"/notes/linux/ffpmeg#图片转视频","content":" ffmpeg -f image2 -i pic/op_%04d.jpg -r 25 output_$current_time.mp4 -f 源图片的格式，image2不是image -i 输入文件序列 op_%04d.jpg 源图片的名称 -r 目标视频的帧率   ","version":"Next","tagName":"h2"},{"title":"截图​","type":1,"pageTitle":"ffmpeg","url":"/notes/linux/ffpmeg#截图","content":" ffmpeg -i some.mp4 -y -f image2 -ss 00:00:03 -vframes 1 -s 640x360 1.jpg -y 强制覆盖已有文件 -f 指定图片格式 -ss 开始截图时刻 -vframes 截图图片数量 1：一张图（40ms） -s 指定图片分辨率   ","version":"Next","tagName":"h2"},{"title":"生成gif动图​","type":1,"pageTitle":"ffmpeg","url":"/notes/linux/ffpmeg#生成gif动图","content":" ffmpeg -i some.mp4 -t 5 -r 3 image1.gif -t 5 共截图5s -r 3 每秒3fps image1.gif 动图名称   ","version":"Next","tagName":"h2"},{"title":"提取音频​","type":1,"pageTitle":"ffmpeg","url":"/notes/linux/ffpmeg#提取音频","content":" ffmpeg -i input.mp4 -vn -ar 44100 -ab 128k -f mp3 output.mp3 在这里： -vn 表示不包含任何视频流（只提取音频）。 -ar 44100 设置输出音频的采样率为44.1kHz。 -ab 128k 设置音频比特率为128kbit/s。 -f mp3 指定输出格式为MP3。   ","version":"Next","tagName":"h2"},{"title":"合并音频到MP4​","type":1,"pageTitle":"ffmpeg","url":"/notes/linux/ffpmeg#合并音频到mp4","content":" ffmpeg -i video_input.mp4 -i audio_input.mp3 -c copy -map 0:v:0 -map 1:a:0 -shortest output.mp4 在这个命令中： -i video_input.mp4 是你的视频输入文件。 -i audio_input.mp3 是你的音频输入文件。 -c copy 指示FFmpeg复制视频和音频流而不重新编码，除非有必要。这对于快速合并特别有用，因为它可以避免编码时间。 -map 0:v:0 指示FFmpeg从第一个输入（视频输入）中选择视频流。 -map 1:a:0 指示FFmpeg从第二个输入（音频输入）中选择音频流。 -shortest 参数告诉FFmpeg输出文件的持续时间应与最短的输入流相同。如果你不想限制输出文件的长度，可以省略这个参数。 output.mp4 是最终输出的文件名。 但是，如果你发现音频和视频的同步有问题，你可能需要调整音频的延迟。你可以使用-itsoffset参数来增加或减少音频的延迟，例如： ffmpeg -i video_input.mp4 -i audio_input.mp3 -c copy -map 0:v:0 -map 1:a:0 -itsoffset 0.5 -shortest output.mp4 这里的-itsoffset 0.5会使音频延迟半秒。如果需要提前音频，可以使用负值。   ","version":"Next","tagName":"h2"},{"title":"ffmpeg推流到nginx​","type":1,"pageTitle":"ffmpeg","url":"/notes/linux/ffpmeg#ffmpeg推流到nginx","content":" # nginx-rtmp services: nginx-rtmp: image: tiangolo/nginx-rtmp container_name: nginx-rtmp ports: - &quot;8080:80&quot; - &quot;1935:1935&quot; # ffmpeg command ffmpeg -re -i output.mp4 -c:v libx264 -preset veryfast -b:v 3000k -c:a aac -b:a 128k -f flv rtmp://localhost:1935/live/stream  ","version":"Next","tagName":"h2"},{"title":"neovim lua","type":0,"sectionRef":"#","url":"/notes/linux/neovim_lua","content":"","keywords":"","version":"Next"},{"title":"replace​","type":1,"pageTitle":"neovim lua","url":"/notes/linux/neovim_lua#replace","content":" # global replace :%s/old/new/g # replace line 9 s/old/new/9  ","version":"Next","tagName":"h2"},{"title":"command","type":0,"sectionRef":"#","url":"/notes/linux/command","content":"","keywords":"","version":"Next"},{"title":"Fork From​","type":1,"pageTitle":"command","url":"/notes/linux/command#fork-from","content":" 命令行的艺术    前言基础日常使用文件及数据处理系统调试单行脚本冷门但有用仅限 OS X 系统仅限 Windows 系统更多资源免责声明  熟练使用命令行是一种常常被忽视，或被认为难以掌握的技能，但实际上，它会提高你作为工程师的灵活性以及生产力。本文是一份我在 Linux 上工作时，发现的一些命令行使用技巧的摘要。有些技巧非常基础，而另一些则相当复杂，甚至晦涩难懂。这篇文章并不长，但当你能够熟练掌握这里列出的所有技巧时，你就学会了很多关于命令行的东西了。  这篇文章是许多作者和译者共同的成果。 这里的部分内容首次出现于 Quora， 但已经迁移到了 GitHub，并由众多高手做出了许多改进。 如果你在本文中发现了错误或者存在可以改善的地方，请贡献你的一份力量  ","version":"Next","tagName":"h2"},{"title":"前言​","type":1,"pageTitle":"command","url":"/notes/linux/command#前言","content":" 涵盖范围：  这篇文章不仅能帮助刚接触命令行的新手，而且对具有经验的人也大有裨益。本文致力于做到覆盖面广（涉及所有重要的内容），具体（给出具体的最常用的例子），以及简洁（避免冗余的内容，或是可以在其他地方轻松查到的细枝末节）。在特定应用场景下，本文的内容属于基本功或者能帮助您节约大量的时间。本文主要为 Linux 所写，但在仅限 OS X 系统章节和仅限 Windows 系统章节中也包含有对应操作系统的内容。除去这两个章节外，其它的内容大部分均可在其他类 Unix 系统或 OS X，甚至 Cygwin 中得到应用。本文主要关注于交互式 Bash，但也有很多技巧可以应用于其他 shell 和 Bash 脚本当中。除去“标准的”Unix 命令，本文还包括了一些依赖于特定软件包的命令（前提是它们具有足够的价值）。  注意事项：  为了能在一页内展示尽量多的东西，一些具体的信息可以在引用的页面中找到。我们相信机智的你知道如何使用 Google 或者其他搜索引擎来查阅到更多的详细信息。文中部分命令需要您使用 apt-get，yum，dnf，pacman，pip 或 brew（以及其它合适的包管理器）来安装依赖的程序。遇到问题的话，请尝试使用 Explainshell 去获取相关命令、参数、管道等内容的解释。  ","version":"Next","tagName":"h2"},{"title":"基础​","type":1,"pageTitle":"command","url":"/notes/linux/command#基础","content":" 学习 Bash 的基础知识。具体地，在命令行中输入 man bash 并至少全文浏览一遍; 它理解起来很简单并且不冗长。其他的 shell 可能很好用，但 Bash 的功能已经足够强大并且到几乎总是可用的（ 如果你只学习 zsh，fish 或其他的 shell 的话，在你自己的设备上会显得很方便，但过度依赖这些功能会给您带来不便，例如当你需要在服务器上工作时）。 熟悉至少一个基于文本的编辑器。通常而言 Vim （vi） 会是你最好的选择，毕竟在终端中编辑文本时 Vim 是最好用的工具（甚至大部分情况下 Vim 要比 Emacs、大型 IDE 或是炫酷的编辑器更好用）。 学会如何使用 man 命令去阅读文档。学会使用 apropos 去查找文档。知道有些命令并不对应可执行文件，而是在 Bash 内置好的，此时可以使用 help 和 help -d 命令获取帮助信息。你可以用 type 命令 来判断这个命令到底是可执行文件、shell 内置命令还是别名。 学会使用 &gt; 和 &lt; 来重定向输出和输入，学会使用 | 来重定向管道。明白 &gt; 会覆盖了输出文件而 &gt;&gt; 是在文件末添加。了解标准输出 stdout 和标准错误 stderr。 学会使用通配符 * （或许再算上 ? 和 [...]） 和引用以及引用中 ' 和 &quot; 的区别（后文中有一些具体的例子）。 熟悉 Bash 中的任务管理工具：&amp;，ctrl-z，ctrl-c，jobs，fg，bg，kill 等。 学会使用 ssh 进行远程命令行登录，最好知道如何使用 ssh-agent，ssh-add 等命令来实现基础的无密码认证登录。 学会基本的文件管理工具：ls 和 ls -l （了解 ls -l 中每一列代表的意义），less，head，tail 和 tail -f （甚至 less +F），ln 和 ln -s （了解硬链接与软链接的区别），chown，chmod，du （硬盘使用情况概述：du -hs *）。 关于文件系统的管理，学习 df，mount，fdisk，mkfs，lsblk。知道 inode 是什么（与 ls -i 和 df -i 等命令相关）。 学习基本的网络管理工具：ip 或 ifconfig，dig。 学习并使用一种版本控制管理系统，例如 git。 熟悉正则表达式，学会使用 grep／egrep，它们的参数中 -i，-o，-v，-A，-B 和 -C 这些是很常用并值得认真学习的。 学会使用 apt-get，yum，dnf 或 pacman （具体使用哪个取决于你使用的 Linux 发行版）来查找和安装软件包。并确保你的环境中有 pip 来安装基于 Python 的命令行工具 （接下来提到的部分程序使用 pip 来安装会很方便）。  ","version":"Next","tagName":"h2"},{"title":"日常使用​","type":1,"pageTitle":"command","url":"/notes/linux/command#日常使用","content":" 在 Bash 中，可以通过按 Tab 键实现自动补全参数，使用 ctrl-r 搜索命令行历史记录（按下按键之后，输入关键字便可以搜索，重复按下 ctrl-r 会向后查找匹配项，按下 Enter 键会执行当前匹配的命令，而按下右方向键会将匹配项放入当前行中，不会直接执行，以便做出修改）。 在 Bash 中，可以按下 ctrl-w 删除你键入的最后一个单词，ctrl-u 可以删除行内光标所在位置之前的内容，alt-b 和 alt-f 可以以单词为单位移动光标，ctrl-a 可以将光标移至行首，ctrl-e 可以将光标移至行尾，ctrl-k 可以删除光标至行尾的所有内容，ctrl-l 可以清屏。键入 man readline 可以查看 Bash 中的默认快捷键。内容有很多，例如 alt-. 循环地移向前一个参数，而 alt-* 可以展开通配符。 你喜欢的话，可以执行 set -o vi 来使用 vi 风格的快捷键，而执行 set -o emacs 可以把它改回来。 为了便于编辑长命令，在设置你的默认编辑器后（例如 export EDITOR=vim），ctrl-x ctrl-e 会打开一个编辑器来编辑当前输入的命令。在 vi 风格下快捷键则是 escape-v。 键入 history 查看命令行历史记录，再用 !n（n 是命令编号）就可以再次执行。其中有许多缩写，最有用的大概就是 !$， 它用于指代上次键入的参数，而 !! 可以指代上次键入的命令了（参考 man 页面中的“HISTORY EXPANSION”）。不过这些功能，你也可以通过快捷键 ctrl-r 和 alt-. 来实现。 cd 命令可以切换工作路径，输入 cd ~ 可以进入 home 目录。要访问你的 home 目录中的文件，可以使用前缀 ~（例如 ~/.bashrc）。在 sh 脚本里则用环境变量 $HOME 指代 home 目录的路径。 回到前一个工作路径：cd -。 如果你输入命令的时候中途改了主意，按下 alt-# 在行首添加 # 把它当做注释再按下回车执行（或者依次按下 ctrl-a， #， enter）。这样做的话，之后借助命令行历史记录，你可以很方便恢复你刚才输入到一半的命令。 使用 xargs （ 或 parallel）。他们非常给力。注意到你可以控制每行参数个数（-L）和最大并行数（-P）。如果你不确定它们是否会按你想的那样工作，先使用 xargs echo 查看一下。此外，使用 -I{} 会很方便。例如：   find . -name '*.py' | xargs grep some_function cat hosts | xargs -I{} ssh root@{} hostname   pstree -p 以一种优雅的方式展示进程树。 使用 pgrep 和 pkill 根据名字查找进程或发送信号（-f 参数通常有用）。 了解你可以发往进程的信号的种类。比如，使用 kill -STOP [pid] 停止一个进程。使用 man 7 signal 查看详细列表。 使用 nohup 或 disown 使一个后台进程持续运行。 使用 netstat -lntp 或 ss -plat 检查哪些进程在监听端口（默认是检查 TCP 端口; 添加参数 -u 则检查 UDP 端口）或者 lsof -iTCP -sTCP:LISTEN -P -n (这也可以在 OS X 上运行)。 lsof 来查看开启的套接字和文件。 使用 uptime 或 w 来查看系统已经运行多长时间。 使用 alias 来创建常用命令的快捷形式。例如：alias ll='ls -latr' 创建了一个新的命令别名 ll。 可以把别名、shell 选项和常用函数保存在 ~/.bashrc，具体看下这篇文章。这样做的话你就可以在所有 shell 会话中使用你的设定。 把环境变量的设定以及登陆时要执行的命令保存在 ~/.bash_profile。而对于从图形界面启动的 shell 和 cron 启动的 shell，则需要单独配置文件。 要想在几台电脑中同步你的配置文件（例如 .bashrc 和 .bash_profile），可以借助 Git。 当变量和文件名中包含空格的时候要格外小心。Bash 变量要用引号括起来，比如 &quot;$FOO&quot;。尽量使用 -0 或 -print0 选项以便用 NULL 来分隔文件名，例如 locate -0 pattern | xargs -0 ls -al 或 find / -print0 -type d | xargs -0 ls -al。如果 for 循环中循环访问的文件名含有空字符（空格、tab 等字符），只需用 IFS=$'\\n' 把内部字段分隔符设为换行符。 在 Bash 脚本中，使用 set -x 去调试输出（或者使用它的变体 set -v，它会记录原始输入，包括多余的参数和注释）。尽可能地使用严格模式：使用 set -e 令脚本在发生错误时退出而不是继续运行；使用 set -u 来检查是否使用了未赋值的变量；试试 set -o pipefail，它可以监测管道中的错误。当牵扯到很多脚本时，使用 trap 来检测 ERR 和 EXIT。一个好的习惯是在脚本文件开头这样写，这会使它能够检测一些错误，并在错误发生时中断程序并输出信息：   set -euo pipefail trap &quot;echo 'error: Script failed: see failed command above'&quot; ERR   在 Bash 脚本中，子 shell（使用括号 (...)）是一种组织参数的便捷方式。一个常见的例子是临时地移动工作路径，代码如下：   # do something in current dir (cd /some/other/dir &amp;&amp; other-command) # continue in original dir   在 Bash 中，变量有许多的扩展方式。${name:?error message} 用于检查变量是否存在。此外，当 Bash 脚本只需要一个参数时，可以使用这样的代码 input_file=${1:?usage: $0 input_file}。在变量为空时使用默认值：${name:-default}。如果你要在之前的例子中再加一个（可选的）参数，可以使用类似这样的代码 output_file=${2:-logfile}，如果省略了 $2，它的值就为空，于是 output_file 就会被设为 logfile。数学表达式：i=$(( (i + 1) % 5 ))。序列：{1..10}。截断字符串：${var%suffix} 和 ${var#prefix}。例如，假设 var=foo.pdf，那么 echo ${var%.pdf}.txt 将输出 foo.txt。 使用括号扩展（{...}）来减少输入相似文本，并自动化文本组合。这在某些情况下会很有用，例如 mv foo.{txt,pdf} some-dir（同时移动两个文件），cp somefile{,.bak}（会被扩展成 cp somefile somefile.bak）或者 mkdir -p test-{a,b,c}/subtest-{1,2,3}（会被扩展成所有可能的组合，并创建一个目录树）。 通过使用 &lt;(some command) 可以将输出视为文件。例如，对比本地文件 /etc/hosts 和一个远程文件：   diff /etc/hosts &lt;(ssh somehost cat /etc/hosts)   编写脚本时，你可能会想要把代码都放在大括号里。缺少右括号的话，代码就会因为语法错误而无法执行。如果你的脚本是要放在网上分享供他人使用的，这样的写法就体现出它的好处了，因为这样可以防止下载不完全代码被执行。  { # 在这里写代码 }   了解 Bash 中的“here documents”，例如 cat &lt;&lt;EOF ...。 在 Bash 中，同时重定向标准输出和标准错误：some-command &gt;logfile 2&gt;&amp;1 或者 some-command &amp;&gt;logfile。通常，为了保证命令不会在标准输入里残留一个未关闭的文件句柄捆绑在你当前所在的终端上，在命令后添加 &lt;/dev/null 是一个好习惯。 使用 man ascii 查看具有十六进制和十进制值的ASCII表。man unicode，man utf-8，以及 man latin1 有助于你去了解通用的编码信息。 使用 screen 或 tmux 来使用多份屏幕，当你在使用 ssh 时（保存 session 信息）将尤为有用。而 byobu 可以为它们提供更多的信息和易用的管理工具。另一个轻量级的 session 持久化解决方案是 dtach。 ssh 中，了解如何使用 -L 或 -D（偶尔需要用 -R）开启隧道是非常有用的，比如当你需要从一台远程服务器上访问 web 页面。 对 ssh 设置做一些小优化可能是很有用的，例如这个 ~/.ssh/config 文件包含了防止特定网络环境下连接断开、压缩数据、多通道等选项：   TCPKeepAlive=yes ServerAliveInterval=15 ServerAliveCountMax=6 Compression=yes ControlMaster auto ControlPath /tmp/%r@%h:%p ControlPersist yes   一些其他的关于 ssh 的选项是与安全相关的，应当小心翼翼的使用。例如你应当只能在可信任的网络中启用 StrictHostKeyChecking=no，ForwardAgent=yes。 考虑使用 mosh 作为 ssh 的替代品，它使用 UDP 协议。它可以避免连接被中断并且对带宽需求更小，但它需要在服务端做相应的配置。 获取八进制形式的文件访问权限（修改系统设置时通常需要，但 ls 的功能不那么好用并且通常会搞砸），可以使用类似如下的代码：   stat -c '%A %a %n' /etc/timezone   使用 percol 或者 fzf 可以交互式地从另一个命令输出中选取值。 使用 fpp（PathPicker）可以与基于另一个命令(例如 git）输出的文件交互。 将 web 服务器上当前目录下所有的文件（以及子目录）暴露给你所处网络的所有用户，使用：python -m SimpleHTTPServer 7777 （使用端口 7777 和 Python 2）或python -m http.server 7777 （使用端口 7777 和 Python 3）。 以其他用户的身份执行命令，使用 sudo。默认以 root 用户的身份执行；使用 -u 来指定其他用户。使用 -i 来以该用户登录（需要输入_你自己的_密码）。 将 shell 切换为其他用户，使用 su username 或者 su - username。加入 - 会使得切换后的环境与使用该用户登录后的环境相同。省略用户名则默认为 root。切换到哪个用户，就需要输入_哪个用户的_密码。 了解命令行的 128K 限制。使用通配符匹配大量文件名时，常会遇到“Argument list too long”的错误信息。（这种情况下换用 find 或 xargs 通常可以解决。） 当你需要一个基本的计算器时，可以使用 python 解释器（当然你要用 python 的时候也是这样）。例如：  &gt;&gt;&gt; 2+3 5   ","version":"Next","tagName":"h2"},{"title":"文件及数据处理​","type":1,"pageTitle":"command","url":"/notes/linux/command#文件及数据处理","content":" 在当前目录下通过文件名查找一个文件，使用类似于这样的命令：find . -iname '*something*'。在所有路径下通过文件名查找文件，使用 locate something （但注意到 updatedb 可能没有对最近新建的文件建立索引，所以你可能无法定位到这些未被索引的文件）。 使用 ag 在源代码或数据文件里检索（grep -r 同样可以做到，但相比之下 ag 更加先进）。 将 HTML 转为文本：lynx -dump -stdin。 Markdown，HTML，以及所有文档格式之间的转换，试试 pandoc。 当你要处理棘手的 XML 时候，xmlstarlet 算是上古时代流传下来的神器。 使用 jq 处理 JSON。 使用 shyaml 处理 YAML。 要处理 Excel 或 CSV 文件的话，csvkit 提供了 in2csv，csvcut，csvjoin，csvgrep 等方便易用的工具。 当你要处理 Amazon S3 相关的工作的时候，s3cmd 是一个很方便的工具而 s4cmd 的效率更高。Amazon 官方提供的 aws 以及 saws 是其他 AWS 相关工作的基础，值得学习。 了解如何使用 sort 和 uniq，包括 uniq 的 -u 参数和 -d 参数，具体内容在后文单行脚本节中。另外可以了解一下 comm。 了解如何使用 cut，paste 和 join 来更改文件。很多人都会使用 cut，但遗忘了 join。 了解如何运用 wc 去计算新行数（-l），字符数（-m），单词数（-w）以及字节数（-c）。 了解如何使用 tee 将标准输入复制到文件甚至标准输出，例如 ls -al | tee file.txt。 要进行一些复杂的计算，比如分组、逆序和一些其他的统计分析，可以考虑使用 datamash。 注意到语言设置（中文或英文等）对许多命令行工具有一些微妙的影响，比如排序的顺序和性能。大多数 Linux 的安装过程会将 LANG 或其他有关的变量设置为符合本地的设置。要意识到当你改变语言设置时，排序的结果可能会改变。明白国际化可能会使 sort 或其他命令运行效率下降许多倍。某些情况下（例如集合运算）你可以放心的使用 export LC_ALL=C 来忽略掉国际化并按照字节来判断顺序。 你可以单独指定某一条命令的环境，只需在调用时把环境变量设定放在命令的前面，例如 TZ=Pacific/Fiji date 可以获取斐济的时间。 了解如何使用 awk 和 sed 来进行简单的数据处理。 参阅 One-liners 获取示例。 替换一个或多个文件中出现的字符串：   perl -pi.bak -e 's/old-string/new-string/g' my-files-*.txt   使用 repren 来批量重命名文件，或是在多个文件中搜索替换内容。（有些时候 rename 命令也可以批量重命名，但要注意，它在不同 Linux 发行版中的功能并不完全一样。）   # 将文件、目录和内容全部重命名 foo -&gt; bar: repren --full --preserve-case --from foo --to bar . # 还原所有备份文件 whatever.bak -&gt; whatever: repren --renames --from '(.*)\\.bak' --to '\\1' *.bak # 用 rename 实现上述功能（若可用）: rename 's/\\.bak$//' *.bak   根据 man 页面的描述，rsync 是一个快速且非常灵活的文件复制工具。它闻名于设备之间的文件同步，但其实它在本地情况下也同样有用。在安全设置允许下，用 rsync 代替 scp 可以实现文件续传，而不用重新从头开始。它同时也是删除大量文件的最快方法之一：  mkdir empty &amp;&amp; rsync -r --delete empty/ some-dir &amp;&amp; rmdir some-dir   若要在复制文件时获取当前进度，可使用 pv，pycp，progress，rsync --progress。若所执行的复制为block块拷贝，可以使用 dd status=progress。 使用 shuf 可以以行为单位来打乱文件的内容或从一个文件中随机选取多行。 了解 sort 的参数。显示数字时，使用 -n 或者 -h 来显示更易读的数（例如 du -h 的输出）。明白排序时关键字的工作原理（-t 和 -k）。例如，注意到你需要 -k1，1 来仅按第一个域来排序，而 -k1 意味着按整行排序。稳定排序（sort -s）在某些情况下很有用。例如，以第二个域为主关键字，第一个域为次关键字进行排序，你可以使用 sort -k1，1 | sort -s -k2，2。 如果你想在 Bash 命令行中写 tab 制表符，按下 ctrl-v [Tab] 或键入 $'\\t' （后者可能更好，因为你可以复制粘贴它）。 标准的源代码对比及合并工具是 diff 和 patch。使用 diffstat 查看变更总览数据。注意到 diff -r 对整个文件夹有效。使用 diff -r tree1 tree2 | diffstat 查看变更的统计数据。vimdiff 用于比对并编辑文件。 对于二进制文件，使用 hd，hexdump 或者 xxd 使其以十六进制显示，使用 bvi，hexedit 或者 biew 来进行二进制编辑。 同样对于二进制文件，strings（包括 grep 等工具）可以帮助在二进制文件中查找特定比特。 制作二进制差分文件（Delta 压缩），使用 xdelta3。 使用 iconv 更改文本编码。需要更高级的功能，可以使用 uconv，它支持一些高级的 Unicode 功能。例如，这条命令移除了所有重音符号：   uconv -f utf-8 -t utf-8 -x '::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] &gt;; ::Any-NFC; ' &lt; input.txt &gt; output.txt   拆分文件可以使用 split（按大小拆分）和 csplit（按模式拆分）。 操作日期和时间表达式，可以用 dateutils 中的 dateadd、datediff、strptime 等工具。 使用 zless、zmore、zcat 和 zgrep 对压缩过的文件进行操作。 文件属性可以通过 chattr 进行设置，它比文件权限更加底层。例如，为了保护文件不被意外删除，可以使用不可修改标记：sudo chattr +i /critical/directory/or/file 使用 getfacl 和 setfacl 以保存和恢复文件权限。例如：   getfacl -R /some/path &gt; permissions.txt setfacl --restore=permissions.txt   为了高效地创建空文件，请使用 truncate（创建稀疏文件），fallocate（用于 ext4，xfs，btrf 和 ocfs2 文件系统），xfs_mkfile（适用于几乎所有的文件系统，包含在 xfsprogs 包中），mkfile（用于类 Unix 操作系统，比如 Solaris 和 Mac OS）。  ","version":"Next","tagName":"h2"},{"title":"系统调试​","type":1,"pageTitle":"command","url":"/notes/linux/command#系统调试","content":" curl 和 curl -I 可以被轻松地应用于 web 调试中，它们的好兄弟 wget 也是如此，或者也可以试试更潮的 httpie。 获取 CPU 和硬盘的使用状态，通常使用使用 top（htop 更佳），iostat 和 iotop。而 iostat -mxz 15 可以让你获悉 CPU 和每个硬盘分区的基本信息和性能表现。 使用 netstat 和 ss 查看网络连接的细节。 dstat 在你想要对系统的现状有一个粗略的认识时是非常有用的。然而若要对系统有一个深度的总体认识，使用 glances，它会在一个终端窗口中向你提供一些系统级的数据。 若要了解内存状态，运行并理解 free 和 vmstat 的输出。值得留意的是“cached”的值，它指的是 Linux 内核用来作为文件缓存的内存大小，而与空闲内存无关。 Java 系统调试则是一件截然不同的事，一个可以用于 Oracle 的 JVM 或其他 JVM 上的调试的技巧是你可以运行 kill -3 &lt;pid&gt; 同时一个完整的栈轨迹和堆概述（包括 GC 的细节）会被保存到标准错误或是日志文件。JDK 中的 jps，jstat，jstack，jmap 很有用。SJK tools 更高级。 使用 mtr 去跟踪路由，用于确定网络问题。 用 ncdu 来查看磁盘使用情况，它比寻常的命令，如 du -sh *，更节省时间。 查找正在使用带宽的套接字连接或进程，使用 iftop 或 nethogs。 ab 工具（Apache 中自带）可以简单粗暴地检查 web 服务器的性能。对于更复杂的负载测试，使用 siege。 wireshark，tshark 和 ngrep 可用于复杂的网络调试。 了解 strace 和 ltrace。这俩工具在你的程序运行失败、挂起甚至崩溃，而你却不知道为什么或你想对性能有个总体的认识的时候是非常有用的。注意 profile 参数（-c）和附加到一个运行的进程参数 （-p）。 了解使用 ldd 来检查共享库。但是永远不要在不信任的文件上运行。 了解如何运用 gdb 连接到一个运行着的进程并获取它的堆栈轨迹。 学会使用 /proc。它在调试正在出现的问题的时候有时会效果惊人。比如：/proc/cpuinfo，/proc/meminfo，/proc/cmdline，/proc/xxx/cwd，/proc/xxx/exe，/proc/xxx/fd/，/proc/xxx/smaps（这里的 xxx 表示进程的 id 或 pid）。 当调试一些之前出现的问题的时候，sar 非常有用。它展示了 cpu、内存以及网络等的历史数据。 关于更深层次的系统分析以及性能分析，看看 stap（SystemTap），perf，以及sysdig。 查看你当前使用的系统，使用 uname，uname -a（Unix／kernel 信息）或者 lsb_release -a（Linux 发行版信息）。 无论什么东西工作得很欢乐（可能是硬件或驱动问题）时可以试试 dmesg。 如果你删除了一个文件，但通过 du 发现没有释放预期的磁盘空间，请检查文件是否被进程占用：lsof | grep deleted | grep &quot;filename-of-my-big-file&quot;  ","version":"Next","tagName":"h2"},{"title":"单行脚本​","type":1,"pageTitle":"command","url":"/notes/linux/command#单行脚本","content":" 一些命令组合的例子：  当你需要对文本文件做集合交、并、差运算时，sort 和 uniq 会是你的好帮手。具体例子请参照代码后面的，此处假设 a 与 b 是两内容不同的文件。这种方式效率很高，并且在小文件和上 G 的文件上都能运用（注意尽管在 /tmp 在一个小的根分区上时你可能需要 -T 参数，但是实际上 sort 并不被内存大小约束），参阅前文中关于 LC_ALL 和 sort 的 -u 参数的部分。   sort a b | uniq &gt; c # c 是 a 并 b sort a b | uniq -d &gt; c # c 是 a 交 b sort a b b | uniq -u &gt; c # c 是 a - b   使用 grep . *（每行都会附上文件名）或者 head -100 *（每个文件有一个标题）来阅读检查目录下所有文件的内容。这在检查一个充满配置文件的目录（如 /sys、/proc、/etc）时特别好用。 计算文本文件第三列中所有数的和（可能比同等作用的 Python 代码快三倍且代码量少三倍）：   awk '{ x += $3 } END { print x }' myfile   如果你想在文件树上查看大小/日期，这可能看起来像递归版的 ls -l 但比 ls -lR 更易于理解：   find . -type f -ls   假设你有一个类似于 web 服务器日志文件的文本文件，并且一个确定的值只会出现在某些行上，假设一个 acct_id 参数在 URI 中。如果你想计算出每个 acct_id 值有多少次请求，使用如下代码：   egrep -o 'acct_id=[0-9]+' access.log | cut -d= -f2 | sort | uniq -c | sort -rn   要持续监测文件改动，可以使用 watch，例如检查某个文件夹中文件的改变，可以用 watch -d -n 2 'ls -rtlh | tail'；或者在排查 WiFi 设置故障时要监测网络设置的更改，可以用 watch -d -n 2 ifconfig。 运行这个函数从这篇文档中随机获取一条技巧（解析 Markdown 文件并抽取项目）：   function taocl() { curl -s https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README-zh.md| pandoc -f markdown -t html | iconv -f 'utf-8' -t 'unicode' | xmlstarlet fo --html --dropdtd | xmlstarlet sel -t -v &quot;(html/body/ul/li[count(p)&gt;0])[$RANDOM mod last()+1]&quot; | xmlstarlet unesc | fmt -80 }   ","version":"Next","tagName":"h2"},{"title":"冷门但有用​","type":1,"pageTitle":"command","url":"/notes/linux/command#冷门但有用","content":" expr：计算表达式或正则匹配 m4：简单的宏处理器 yes：多次打印字符串 cal：漂亮的日历 env：执行一个命令（脚本文件中很有用） printenv：打印环境变量（调试时或在写脚本文件时很有用） look：查找以特定字符串开头的单词或行 cut，paste 和 join：数据修改 fmt：格式化文本段落 pr：将文本格式化成页／列形式 fold：包裹文本中的几行 column：将文本格式化成多个对齐、定宽的列或表格 expand 和 unexpand：制表符与空格之间转换 nl：添加行号 seq：打印数字 bc：计算器 factor：分解因数 gpg：加密并签名文件 toe：terminfo 入口列表 nc：网络调试及数据传输 socat：套接字代理，与 netcat 类似 slurm：网络流量可视化 dd：文件或设备间传输数据 file：确定文件类型 tree：以树的形式显示路径和文件，类似于递归的 ls stat：文件信息 time：执行命令，并计算执行时间 timeout：在指定时长范围内执行命令，并在规定时间结束后停止进程 lockfile：使文件只能通过 rm -f 移除 logrotate： 切换、压缩以及发送日志文件 watch：重复运行同一个命令，展示结果并／或高亮有更改的部分 when-changed：当检测到文件更改时执行指定命令。参阅 inotifywait 和 entr。 tac：反向输出文件 shuf：文件中随机选取几行 comm：一行一行的比较排序过的文件 strings：从二进制文件中抽取文本 tr：转换字母 iconv 或 uconv：文本编码转换 split 和 csplit：分割文件 sponge：在写入前读取所有输入，在读取文件后再向同一文件写入时比较有用，例如 grep -v something some-file | sponge some-file units：将一种计量单位转换为另一种等效的计量单位（参阅 /usr/share/units/definitions.units） apg：随机生成密码 xz：高比例的文件压缩 ldd：动态库信息 nm：提取 obj 文件中的符号 ab 或 wrk：web 服务器性能分析 strace：调试系统调用 mtr：更好的网络调试跟踪工具 cssh：可视化的并发 shell rsync：通过 ssh 或本地文件系统同步文件和文件夹 wireshark 和 tshark：抓包和网络调试工具 ngrep：网络层的 grep host 和 dig：DNS 查找 lsof：列出当前系统打开文件的工具以及查看端口信息 dstat：系统状态查看 glances：高层次的多子系统总览 iostat：硬盘使用状态 mpstat： CPU 使用状态 vmstat： 内存使用状态 htop：top 的加强版 last：登入记录 w：查看处于登录状态的用户 id：用户/组 ID 信息 sar：系统历史数据 iftop 或 nethogs：套接字及进程的网络利用情况 ss：套接字数据 dmesg：引导及系统错误信息 sysctl： 在内核运行时动态地查看和修改内核的运行参数 hdparm：SATA/ATA 磁盘更改及性能分析 lsblk：列出块设备信息：以树形展示你的磁盘以及磁盘分区信息 lshw，lscpu，lspci，lsusb 和 dmidecode：查看硬件信息，包括 CPU、BIOS、RAID、显卡、USB设备等 lsmod 和 modinfo：列出内核模块，并显示其细节 fortune，ddate 和 sl：额，这主要取决于你是否认为蒸汽火车和莫名其妙的名人名言是否“有用”  ","version":"Next","tagName":"h2"},{"title":"仅限 OS X 系统​","type":1,"pageTitle":"command","url":"/notes/linux/command#仅限-os-x-系统","content":" 以下是仅限于 OS X 系统的技巧。  用 brew （Homebrew）或者 port （MacPorts）进行包管理。这些可以用来在 OS X 系统上安装以上的大多数命令。 用 pbcopy 复制任何命令的输出到桌面应用，用 pbpaste 粘贴输入。 若要在 OS X 终端中将 Option 键视为 alt 键（例如在上面介绍的 alt-b、alt-f 等命令中用到），打开 偏好设置 -&gt; 描述文件 -&gt; 键盘 并勾选“使用 Option 键作为 Meta 键”。 用 open 或者 open -a /Applications/Whatever.app 使用桌面应用打开文件。 Spotlight：用 mdfind 搜索文件，用 mdls 列出元数据（例如照片的 EXIF 信息）。 注意 OS X 系统是基于 BSD UNIX 的，许多命令（例如 ps，ls，tail，awk，sed）都和 Linux 中有微妙的不同（ Linux 很大程度上受到了 System V-style Unix 和 GNU 工具影响）。你可以通过标题为 &quot;BSD General Commands Manual&quot; 的 man 页面发现这些不同。在有些情况下 GNU 版本的命令也可能被安装（例如 gawk 和 gsed 对应 GNU 中的 awk 和 sed ）。如果要写跨平台的 Bash 脚本，避免使用这些命令（例如，考虑 Python 或者 perl ）或者经过仔细的测试。 用 sw_vers 获取 OS X 的版本信息。  ","version":"Next","tagName":"h2"},{"title":"仅限 Windows 系统​","type":1,"pageTitle":"command","url":"/notes/linux/command#仅限-windows-系统","content":" 以下是仅限于 Windows 系统的技巧。  ","version":"Next","tagName":"h2"},{"title":"在 Windows 下获取 Unix 工具​","type":1,"pageTitle":"command","url":"/notes/linux/command#在-windows-下获取-unix-工具","content":" 可以安装 Cygwin 允许你在 Microsoft Windows 中体验 Unix shell 的威力。这样的话，本文中介绍的大多数内容都将适用。 在 Windows 10 上，你可以使用 Bash on Ubuntu on Windows，它提供了一个熟悉的 Bash 环境，包含了不少 Unix 命令行工具。好处是它允许 Linux 上编写的程序在 Windows 上运行，而另一方面，Windows 上编写的程序却无法在 Bash 命令行中运行。 如果你在 Windows 上主要想用 GNU 开发者工具（例如 GCC），可以考虑 MinGW 以及它的 MSYS 包，这个包提供了例如 bash，gawk，make 和 grep 的工具。MSYS 并不包含所有可以与 Cygwin 媲美的特性。当制作 Unix 工具的原生 Windows 端口时 MinGW 将特别地有用。 另一个在 Windows 下实现接近 Unix 环境外观效果的选项是 Cash。注意在此环境下只有很少的 Unix 命令和命令行可用。  ","version":"Next","tagName":"h3"},{"title":"实用 Windows 命令行工具​","type":1,"pageTitle":"command","url":"/notes/linux/command#实用-windows-命令行工具","content":" 可以使用 wmic 在命令行环境下给大部分 Windows 系统管理任务编写脚本以及执行这些任务。 Windows 实用的原生命令行网络工具包括 ping，ipconfig，tracert，和 netstat。 可以使用 Rundll32 命令来实现许多有用的 Windows 任务 。  ","version":"Next","tagName":"h3"},{"title":"Cygwin 技巧​","type":1,"pageTitle":"command","url":"/notes/linux/command#cygwin-技巧","content":" 通过 Cygwin 的包管理器来安装额外的 Unix 程序。 使用 mintty 作为你的命令行窗口。 要访问 Windows 剪贴板，可以通过 /dev/clipboard。 运行 cygstart 以通过默认程序打开一个文件。 要访问 Windows 注册表，可以使用 regtool。 注意 Windows 驱动器路径 C:\\ 在 Cygwin 中用 /cygdrive/c 代表，而 Cygwin 的 / 代表 Windows 中的 C:\\cygwin。要转换 Cygwin 和 Windows 风格的路径可以用 cygpath。这在需要调用 Windows 程序的脚本里很有用。 学会使用 wmic，你就可以从命令行执行大多数 Windows 系统管理任务，并编成脚本。 要在 Windows 下获得 Unix 的界面和体验，另一个办法是使用 Cash。需要注意的是，这个环境支持的 Unix 命令和命令行参数非常少。 要在 Windows 上获取 GNU 开发者工具（比如 GCC）的另一个办法是使用 MinGW 以及它的 MSYS 软件包，该软件包提供了 bash、gawk、make、grep 等工具。然而 MSYS 提供的功能没有 Cygwin 完善。MinGW 在创建 Unix 工具的 Windows 原生移植方面非常有用。  ","version":"Next","tagName":"h3"},{"title":"更多资源​","type":1,"pageTitle":"command","url":"/notes/linux/command#更多资源","content":" awesome-shell：一份精心组织的命令行工具及资源的列表。awesome-osx-command-line：一份针对 OS X 命令行的更深入的指南。Strict mode：为了编写更好的脚本文件。shellcheck：一个静态 shell 脚本分析工具，本质上是 bash／sh／zsh 的 lint。Filenames and Pathnames in Shell：有关如何在 shell 脚本里正确处理文件名的细枝末节。Data Science at the Command Line：用于数据科学的一些命令和工具，摘自同名书籍。  ","version":"Next","tagName":"h2"},{"title":"免责声明​","type":1,"pageTitle":"command","url":"/notes/linux/command#免责声明","content":" 除去特别小的工作，你编写的代码应当方便他人阅读。能力往往伴随着责任，你 有能力 在 Bash 中玩一些奇技淫巧并不意味着你应该去做！;)  ","version":"Next","tagName":"h2"},{"title":"授权条款​","type":1,"pageTitle":"command","url":"/notes/linux/command#授权条款","content":"   本文使用授权协议 Creative Commons Attribution-ShareAlike 4.0 International License。 ","version":"Next","tagName":"h2"},{"title":"nginx","type":0,"sectionRef":"#","url":"/notes/linux/nginx","content":"","keywords":"","version":"Next"},{"title":"https 证书​","type":1,"pageTitle":"nginx","url":"/notes/linux/nginx#https-证书","content":" # 安装certbot # sudo ufw allow 80 yay -S --noconfirm certbot sudo certbot certonly --standalone -d domain sudo certbot certonly -d domain --webroot -w /html/filepath/ sudo crontab -e 15 2 * */2 * systemctl stop nginx.service &amp;&amp; certbot renew &amp;&amp; systemctl restart nginx.service   ","version":"Next","tagName":"h2"},{"title":"基本配置​","type":1,"pageTitle":"nginx","url":"/notes/linux/nginx#基本配置","content":" server { listen 80; listen [::]:80; server_name blog.hjkl01.cn; # 静态文件 # root /html/github; # location / { # index index.html index.htm; # } root /html/github/; location / { # try_files $uri $uri/ =404; try_files $uri $uri /index.html; } # ip location / { default_type application/json; return 200 &quot;{\\&quot;ip\\&quot;:\\&quot;$remote_addr\\&quot;}&quot;; } # django location /static/ { alias /home/ubuntu/djangoapp/static/; } location /media/ { alias /home/ubuntu/djangoapp/media/; } location / { proxy_pass http://127.0.0.1:8000; proxy_set_header X-Forwarded-Host $server_name; proxy_set_header X-Real-IP $remote_addr; proxy_redirect off; add_header P3P 'CP=&quot;ALL DSP COR PSAa OUR NOR ONL UNI COM NAV&quot;'; add_header Access-Control-Allow-Origin *; } # 转发端口 location / { proxy_pass http://127.0.0.1:8000/; } # 重定向 return 301 https://$host$request_uri; # rewrite ^(.*)$ https://blog.hjkl01.cn; #将所有HTTP请求通过rewrite指令重定向到HTTPS。 # CORS add_header Access-Control-Allow-Origin *; add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS'; add_header Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization'; }   ","version":"Next","tagName":"h2"},{"title":"ssl​","type":1,"pageTitle":"nginx","url":"/notes/linux/nginx#ssl","content":" server { listen 443 ssl http2; listen [::]:443 ssl http2; server_name blog.hjkl01.cn; ssl_certificate /etc/letsencrypt/live/blog.hjkl01.cn/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/blog.hjkl01.cn/privkey.pem; ssl_trusted_certificate /etc/letsencrypt/live/blog.hjkl01.cn/chain.pem; ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; # 静态文件 location / { root /html/github; #站点目录。 index index.html index.htm; } # 转发端口 location / { proxy_pass http://127.0.0.1:8080/; } }   ","version":"Next","tagName":"h3"},{"title":"转发 mongo 端口(TCP)​","type":1,"pageTitle":"nginx","url":"/notes/linux/nginx#转发-mongo-端口tcp","content":" stream { server { listen &lt;your incoming Mongo TCP port&gt;; proxy_connect_timeout 1s; proxy_timeout 3s; proxy_pass stream_mongo_backend; } upstream stream_mongo_backend { server &lt;localhost:your local Mongo TCP port&gt;; } }   ","version":"Next","tagName":"h3"},{"title":"auth​","type":1,"pageTitle":"nginx","url":"/notes/linux/nginx#auth","content":" htpasswd -c /etc/nginx/.htpasswd yourusername # nginx.conf server { listen 80; server_name yourdomain.com; location / { auth_basic &quot;Restricted Content&quot;; auth_basic_user_file /etc/nginx/.htpasswd; proxy_pass http://localhost:port; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } }   ","version":"Next","tagName":"h3"},{"title":"限流​","type":1,"pageTitle":"nginx","url":"/notes/linux/nginx#限流","content":" ","version":"Next","tagName":"h2"},{"title":"正常限流​","type":1,"pageTitle":"nginx","url":"/notes/linux/nginx#正常限流","content":" # nginx.conf http { limit_req_zone $binary_remote_addr zone=myRateLimit:10m rate=10r/s; } # server server { location / { limit_req zone=myRateLimit; proxy_pass http://my_upstream; } }   key ：定义限流对象，binaryremote_addr 是一种 key，表示基于 remote_addr(客户端 IP) 来做限流，binary 的目的是压缩内存占用量。zone：定义共享内存区来存储访问信息， myRateLimit:10m 表示一个大小为 10M，名字为 myRateLimit 的内存区域。1M 能存储 16000 IP 地址的访问信息，10M 可以存储 16W IP 地址访问信息。rate 用于设置最大访问速率，rate=10r/s 表示每秒最多处理 10 个请求。Nginx 实际上以毫秒为粒度来跟踪请求信息，因此 10r/s 实际上是限制：每 100 毫秒处理一个请求。这意味着，自上一个请求处理完后，若后续 100 毫秒内又有请求到达，将拒绝处理该请求。  ","version":"Next","tagName":"h3"},{"title":"处理突发流量​","type":1,"pageTitle":"nginx","url":"/notes/linux/nginx#处理突发流量","content":" server { location / { limit_req zone=myRateLimit burst=20 nodelay; proxy_pass http://my_upstream; } }   ","version":"Next","tagName":"h3"},{"title":"限制连接数​","type":1,"pageTitle":"nginx","url":"/notes/linux/nginx#限制连接数","content":" limit_conn_zone $binary_remote_addr zone=perip:10m; limit_conn_zone $server_name zone=perserver:10m; server { ... limit_conn perip 10; limit_conn perserver 100; }   limit_conn perip 10 作用的 key 是 $binary_remote_addr，表示限制单个 IP 同时最多能持有 10 个连接。 limit_conn perserver 100 作用的 key 是 $server_name，表示虚拟主机(server) 同时能处理并发连接的总数。 需要注意的是：只有当 request header 被后端 server 处理后，这个连接才进行计数。  ","version":"Next","tagName":"h3"},{"title":"设置白名单​","type":1,"pageTitle":"nginx","url":"/notes/linux/nginx#设置白名单","content":" # nginx.conf geo $limit { default 1; 10.0.0.0/8 0; 192.168.0.0/24 0; 172.20.0.35 0; } map $limit $limit_key { 0 &quot;&quot;; 1 $binary_remote_addr; } limit_req_zone $limit_key zone=myRateLimit:10m rate=10r/s;   geo 对于白名单(子网或 IP 都可以) 将返回 0，其他 IP 将返回 1。 map 将 $limit 转换为 $limit_key，如果是 $limit 是 0(白名单)，则返回空字符串；如果是 1，则返回客户端实际 IP。 limit_req_zone 限流的 key 不再使用 $binary_remote_addr，而是 $limit_key 来动态获取值。如果是白名单，limit_req_zone 的限流 key 则为空字符串，将不会限流；若不是白名单，将会对客户端真实 IP 进行限流。  ","version":"Next","tagName":"h3"},{"title":"限制数据传输速度​","type":1,"pageTitle":"nginx","url":"/notes/linux/nginx#限制数据传输速度","content":" location /flv/ { flv; limit_rate_after 20m; limit_rate 100k; }   这个限制是针对每个请求的，表示客户端下载前 20M 时不限速，后续限制 100kb/s。  ","version":"Next","tagName":"h3"},{"title":"goaccess​","type":1,"pageTitle":"nginx","url":"/notes/linux/nginx#goaccess","content":" # /etc/goaccess/goaccess.conf log-format %h %^[%d:%t %^] &quot;%r&quot; %s %b &quot;%R&quot; &quot;%u&quot; date-format %d/%b/%Y time-format %H:%M:%S output /usr/share/nginx/html/index.html # crontab */30 * * * * goaccess -a -d -f /var/log/nginx/access.log -p /etc/goaccess/goaccess.conf # 可以设置LANG为zh_CN 界面会变为中文  ","version":"Next","tagName":"h2"},{"title":"proxy","type":0,"sectionRef":"#","url":"/notes/linux/proxy","content":"","keywords":"","version":"Next"},{"title":"clash yacd​","type":1,"pageTitle":"proxy","url":"/notes/linux/proxy#clash-yacd","content":" version: &quot;3.8&quot; services: yacd: container_name: yacd image: haishanh/yacd ports: - 127.0.0.1:1234:80 restart: unless-stopped   ","version":"Next","tagName":"h2"},{"title":"glider​","type":1,"pageTitle":"proxy","url":"/notes/linux/proxy#glider","content":" yay -S glider glider -listen :1080 -forward trojan://password@ip:443 # with auth glider -listen user:user_passwd@:61000 -forward trojan://password@ip:443 # or glider.conf listen=:1080 # with user and password listen=user:passwd@:1080 forward=trojan://password@ip:443   ","version":"Next","tagName":"h2"},{"title":"clash config to glider​","type":1,"pageTitle":"proxy","url":"/notes/linux/proxy#clash-config-to-glider","content":" # pip install pyyaml import os import yaml url = '' # restart_cmd = 'sudo systemctl restart glider.service' # glider_conf = '/etc/glider/glider.conf' restart_cmd = 'brew services restart glider' glider_conf = '/opt/homebrew/etc/glider.conf' def main(): cmd = f'curl {url} -o ./config.yaml' os.system(cmd) filename = &quot;./config.yaml&quot; with open(filename, &quot;r&quot;) as file: con = yaml.safe_load(file) res = &quot;listen=:7890 \\n\\ strategy=lha \\n\\ \\n\\ &quot; for server in con[&quot;proxies&quot;]: temp = f&quot;forward=trojan://{server['password']}@{server['server']}:{server['port']}&quot; res += temp + '\\n' with open(glider_conf, 'w') as file: file.write(res) os.system(restart_cmd) if __name__ == &quot;__main__&quot;: main()   ","version":"Next","tagName":"h2"},{"title":"trojan/trojan-go​","type":1,"pageTitle":"proxy","url":"/notes/linux/proxy#trojantrojan-go","content":" https://github.com/trojan-gfw/trojan # 机场推荐: https://portal.shadowsocks.nz/aff.php?aff=24252 # 部署参考 https://github.com/Jrohy/trojan ufw allow 80 443 8443 # 生成证书 certbot certonly --standalone -d domain.com -v # crontab 15 2 * */2 * certbot renew # arch 开启 bbr echo &quot;tcp_bbr&quot; &gt; /etc/modules-load.d/modules.conf echo &quot;net.core.default_qdisc=fq&quot; &gt; /etc/sysctl.d/bbr.conf echo &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; /etc/sysctl.d/bbr.conf reboot # 验证 sysctl net.ipv4.tcp_congestion_control # net.ipv4.tcp_congestion_control = bbr   ","version":"Next","tagName":"h2"},{"title":"server /etc/trojan/config.json​","type":1,"pageTitle":"proxy","url":"/notes/linux/proxy#server-etctrojanconfigjson","content":" https://github.com/p4gefau1t/trojan-go/releases  { &quot;run_type&quot;: &quot;server&quot;, &quot;local_addr&quot;: &quot;0.0.0.0&quot;, &quot;local_port&quot;: 8443, &quot;remote_addr&quot;: &quot;github.com&quot;, &quot;remote_port&quot;: 80, &quot;password&quot;: [&quot;domain.com&quot;], &quot;ssl&quot;: { &quot;cert&quot;: &quot;/var/lib/caddy/certificates/acme-v02.api.letsencrypt.org-directory/domain.com/domain.com.crt&quot;, &quot;key&quot;: &quot;/var/lib/caddy/certificates/acme-v02.api.letsencrypt.org-directory/domain.com/domain.com.key&quot;, &quot;sni&quot;: &quot;domain.com&quot; } }   ","version":"Next","tagName":"h3"},{"title":"client config.json​","type":1,"pageTitle":"proxy","url":"/notes/linux/proxy#client-configjson","content":" { &quot;run_type&quot;: &quot;client&quot;, &quot;local_addr&quot;: &quot;127.0.0.1&quot;, &quot;local_port&quot;: 1080, &quot;remote_addr&quot;: &quot;domain.com&quot;, &quot;remote_port&quot;: 8443, &quot;password&quot;: [&quot;domain.com&quot;], &quot;ssl&quot;: { &quot;sni&quot;: &quot;domain.com&quot; }, &quot;mux&quot;: { &quot;enabled&quot;: true } }   ","version":"Next","tagName":"h3"},{"title":"socks5 转 http​","type":1,"pageTitle":"proxy","url":"/notes/linux/proxy#socks5-转-http","content":" ","version":"Next","tagName":"h2"},{"title":"privoxy 配置​","type":1,"pageTitle":"proxy","url":"/notes/linux/proxy#privoxy-配置","content":" yay -S privoxy cd /etc/privoxy (sudo) mv config config.bak (sudo) vi config forward-socks5t / 127.0.0.1:1080 . listen-address 127.0.0.1:9888 sudo systemctl restart privoxy.service sudo systemctl enable privoxy.service   旧  ","version":"Next","tagName":"h2"},{"title":"server:​","type":1,"pageTitle":"proxy","url":"/notes/linux/proxy#server","content":" install libsodium pip install shadowsocks pip install https://github.com/shadowsocks/shadowsocks/archive/master.zip -U # path : /etc/shadowsocks.json { &quot;server&quot;:&quot;0.0.0.0&quot;, &quot;port_password&quot;: { &quot;8000&quot;: &quot;password&quot; }, &quot;timeout&quot;:300, &quot;method&quot;:&quot;chacha20-ietf-poly1305&quot;, &quot;fast_open&quot;:true, &quot;pid-file&quot;: &quot;/path/ss.pid&quot;, &quot;log-file&quot;: &quot;/path/ss.log&quot; } (sudo) ssserver -c /etc/shadowsocks.json -d start sudo ssserver -d stop https://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E   开启 bbr​  wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh chmod +x bbr.sh ./bbr.sh sysctl net.ipv4.tcp_available_congestion_control #返回值一般为： #net.ipv4.tcp_available_congestion_control = bbr cubic reno sysctl net.ipv4.tcp_congestion_control #返回值一般为： #net.ipv4.tcp_congestion_control = bbr sysctl net.core.default_qdisc #返回值一般为： #net.core.default_qdisc = fq lsmod | grep bbr #返回值有 tcp_bbr 模块即说明bbr已启动。   ","version":"Next","tagName":"h2"},{"title":"client​","type":1,"pageTitle":"proxy","url":"/notes/linux/proxy#client","content":" ubuntu 下使用， Mac 下载 https://github.com/shadowsocks/ShadowsocksX-NG/releases/​  pip install shadowsocks path : ~/.shadowsocks/shadowsocks.json { &quot;server&quot;:&quot;my_server_ip&quot;, &quot;server_port&quot;:my_server_port, &quot;password&quot;:&quot;my_password&quot;, &quot;local_address&quot;: &quot;127.0.0.1&quot;, &quot;local_port&quot;:1080, &quot;timeout&quot;:300, &quot;method&quot;:&quot;chacha20-ietf-poly1305&quot;, &quot;fast_open&quot;:true, &quot;pid-file&quot;: &quot;/path&quot;, &quot;log-file&quot;: &quot;/path&quot; } sslocal -c ~/.shadowsocks/shadowsocks.json -d start 可先在系统设置里设置全局代理，在浏览器里安装 https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif  ","version":"Next","tagName":"h2"},{"title":"neovim vimscript (old)","type":0,"sectionRef":"#","url":"/notes/linux/neovim","content":"","keywords":"","version":"Next"},{"title":"我的 neovim 配置​","type":1,"pageTitle":"neovim vimscript (old)","url":"/notes/linux/neovim#我的-neovim-配置","content":" https://github.com/hjkl01/init.vim  ","version":"Next","tagName":"h2"},{"title":"插件​","type":1,"pageTitle":"neovim vimscript (old)","url":"/notes/linux/neovim#插件","content":" # status/tabline vim-airline/vim-airline Plug 'vim-airline/vim-airline' Plug 'vim-airline/vim-airline-themes' let g:airline#extensions#tabline#formatter = 'default' let g:airline#extensions#tabline#enabled = 1 &quot; let g:airline#extensions#tabline#left_sep = ' ' &quot; let g:airline#extensions#tabline#left_alt_sep = '|' &quot; let g:airline#extensions#tabline#enabled = 1 &quot; let g:airline#extensions#tabline#tab_nr_type = 1 &quot; tab number &quot; let g:airline#extensions#tabline#show_tab_nr = 1 &quot; let g:airline#extensions#tabline#formatter = 'default' &quot; let g:airline#extensions#tabline#buffer_nr_show = 0 &quot; let g:airline#extensions#tabline#fnametruncate = 16 &quot; let g:airline#extensions#tabline#fnamecollapse = 2 &quot; let g:airline#extensions#tabline#buffer_idx_mode = 1 let g:airline_theme='molokai' # format file Plug 'Chiel92/vim-autoformat' &quot; autocmd BufWrite * :Autoformat let g:autoformat_autoindent = 1 let g:autoformat_retab = 1 let g:autoformat_remove_trailing_spaces = 1 # 文件目录 Plug 'preservim/nerdtree' let g:NERDTreeWinPos = &quot;right&quot; let NERDTreeShowHidden=1 let NERDTreeShowLineNumbers=1 let NERDTreeIgnore = ['\\.pyc$', '__pycache__'] let g:NERDTreeWinSize=35 let g:NERDTreeDirArrows = 1 &quot;当打开vim且没有文件时自动打开NERDTree &quot; autocmd vimenter * if !argc() | NERDTree | endif &quot;&quot; 只剩 NERDTree时自动关闭 autocmd bufenter * if (winnr(&quot;$&quot;) == 1 &amp;&amp; exists(&quot;b:NERDTree&quot;) &amp;&amp; b:NERDTree.isTabTree()) | q | endif nmap &lt;Space&gt;n :NERDTreeToggle&lt;CR&gt; nmap &lt;Space&gt;n &lt;ESC&gt; :NERDTreeToggle&lt;CR&gt; # nvim-tree.lua Plug 'kyazdani42/nvim-web-devicons' &quot; for file icons Plug 'kyazdani42/nvim-tree.lua' autocmd BufEnter * ++nested if winnr('$') == 1 &amp;&amp; bufname() == 'NvimTree_' . tabpagenr() | quit | endif nnoremap &lt;Space&gt;n :NvimTreeToggle&lt;CR&gt; lua &lt;&lt; EOF require'nvim-tree'.setup { -- BEGIN_DEFAULT_OPTS auto_reload_on_write = true, disable_netrw = false, hide_root_folder = false, hijack_cursor = false, hijack_netrw = true, hijack_unnamed_buffer_when_opening = false, ignore_buffer_on_setup = false, open_on_setup = true, -- open_on_setup_file = true, open_on_tab = true, sort_by = &quot;name&quot;, update_cwd = false, view = { width = 30, height = 30, side = &quot;right&quot;, preserve_window_proportions = false, number = true, relativenumber = true, signcolumn = &quot;yes&quot;, mappings = { custom_only = false, list = { -- user mappings go here }, }, }, renderer = { indent_markers = { enable = true, icons = { corner = &quot;└ &quot;, edge = &quot;│ &quot;, none = &quot; &quot;, }, }, }, hijack_directories = { enable = true, auto_open = true, }, update_focused_file = { enable = false, update_cwd = false, ignore_list = {}, }, ignore_ft_on_setup = {}, system_open = { cmd = nil, args = {}, }, diagnostics = { enable = false, show_on_dirs = false, icons = { hint = &quot;&quot;, info = &quot;&quot;, warning = &quot;&quot;, error = &quot;&quot;, }, }, filters = { dotfiles = false, custom = {}, exclude = {}, }, git = { enable = true, ignore = true, timeout = 400, }, actions = { use_system_clipboard = true, change_dir = { enable = true, global = false, }, open_file = { quit_on_open = true, resize_window = true, window_picker = { enable = true, chars = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890&quot;, exclude = { filetype = { &quot;notify&quot;, &quot;packer&quot;, &quot;qf&quot;, &quot;diff&quot;, &quot;fugitive&quot;, &quot;fugitiveblame&quot; }, buftype = { &quot;nofile&quot;, &quot;terminal&quot;, &quot;help&quot; }, }, }, }, }, trash = { cmd = &quot;trash&quot;, require_confirm = true, }, log = { enable = false, truncate = false, types = { all = false, config = false, copy_paste = false, git = false, profile = false, }, }, } EOF # 注释 Plug 'preservim/nerdcommenter' &quot; 注释 nmap &lt;Space&gt;&lt;Space&gt; &lt;plug&gt;NERDCommenterToggle &quot; Add spaces after comment delimiters by default let g:NERDSpaceDelims = 1 &quot; Use compact syntax for prettified multi-line comments let g:NERDCompactSexyComs = 1 &quot; Align line-wise comment delimiters flush left instead of following code indentation let g:NERDDefaultAlign = 'left' &quot; Set a language to use its alternate delimiters by default let g:NERDAltDelims_java = 1 &quot; Add your own custom formats or override the defaults &quot; let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } } &quot; Allow commenting and inverting empty lines (useful when commenting a region) let g:NERDCommentEmptyLines = 1 &quot; Enable trimming of trailing whitespace when uncommenting let g:NERDTrimTrailingWhitespace = 1 &quot; Enable NERDCommenterToggle to check all selected lines is commented or not let g:NERDToggleCheckAllLines = 1 # other Plug 'jiangmiao/auto-pairs' Plug 'nvim-lua/plenary.nvim' Plug 'nvim-telescope/telescope.nvim' nnoremap &lt;S-f&gt; &lt;cmd&gt;Telescope find_files&lt;cr&gt; Plug 'mhinz/vim-startify' Plug 'ntpeters/vim-better-whitespace' Plug 'pechorin/any-jump.vim' &quot; Normal mode: Jump to definition under cursor nnoremap &lt;leader&gt;j :AnyJump&lt;CR&gt; &quot; Visual mode: jump to selected text in visual mode xnoremap &lt;leader&gt;j :AnyJumpVisual&lt;CR&gt; &quot; Normal mode: open previous opened file (after jump) nnoremap &lt;leader&gt;ab :AnyJumpBack&lt;CR&gt; &quot; Normal mode: open last closed search window again nnoremap &lt;leader&gt;al :AnyJumpLastResults&lt;CR&gt; Plug 'voldikss/vim-floaterm' nmap &lt;Space&gt;t :FloatermNew&lt;CR&gt; Plug 'dense-analysis/ale' let b:ale_linters = ['mypy'] &quot; let b:ale_linters = ['flake8', 'pylint'] Plug 'gelguy/wilder.nvim', { 'do': ':UpdateRemotePlugins' } call wilder#setup({'modes': [':', '/', '?']}) call wilder#set_option('pipeline', [ \\ wilder#branch( \\ wilder#cmdline_pipeline(), \\ wilder#search_pipeline(), \\ ), \\ ]) call wilder#set_option('renderer', wilder#wildmenu_renderer({ \\ 'highlighter': wilder#basic_highlighter(), \\ })) # code complete: lsp Plug 'prabirshrestha/vim-lsp' Plug 'mattn/vim-lsp-settings' Plug 'prabirshrestha/asyncomplete.vim' Plug 'prabirshrestha/asyncomplete-lsp.vim' function! s:on_lsp_buffer_enabled() abort setlocal omnifunc=lsp#complete setlocal signcolumn=yes if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif nmap &lt;buffer&gt; gd &lt;plug&gt;(lsp-definition) nmap &lt;buffer&gt; gs &lt;plug&gt;(lsp-document-symbol-search) nmap &lt;buffer&gt; gS &lt;plug&gt;(lsp-workspace-symbol-search) nmap &lt;buffer&gt; gr &lt;plug&gt;(lsp-references) nmap &lt;buffer&gt; gi &lt;plug&gt;(lsp-implementation) nmap &lt;buffer&gt; gt &lt;plug&gt;(lsp-type-definition) nmap &lt;buffer&gt; &lt;leader&gt;rn &lt;plug&gt;(lsp-rename) nmap &lt;buffer&gt; [g &lt;plug&gt;(lsp-previous-diagnostic) nmap &lt;buffer&gt; ]g &lt;plug&gt;(lsp-next-diagnostic) nmap &lt;buffer&gt; K &lt;plug&gt;(lsp-hover) inoremap &lt;buffer&gt; &lt;expr&gt;&lt;c-f&gt; lsp#scroll(+4) inoremap &lt;buffer&gt; &lt;expr&gt;&lt;c-d&gt; lsp#scroll(-4) nmap &lt;Space&gt;f &lt;plug&gt;(lsp-document-format) let g:lsp_document_highlight_enabled = 1 let g:lsp_diagnostics_enabled = 1 let g:lsp_format_sync_timeout = 1000 autocmd! BufWritePre *.go,*.py call execute('LspDocumentFormatSync') &quot; autocmd BufWritePre &lt;buffer&gt; LspDocumentFormatSync &quot; refer to doc to add more commands endfunction augroup lsp_install au! &quot; call s:on_lsp_buffer_enabled only for languages that has the server registered. autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled() augroup END Plug 'github/copilot.vim' &quot; :Copilot setup  ","version":"Next","tagName":"h2"},{"title":"remote desktop","type":0,"sectionRef":"#","url":"/notes/linux/remote_desktop","content":"","keywords":"","version":"Next"},{"title":"vnc​","type":1,"pageTitle":"remote desktop","url":"/notes/linux/remote_desktop#vnc","content":" ","version":"Next","tagName":"h2"},{"title":"服务端安装​","type":1,"pageTitle":"remote desktop","url":"/notes/linux/remote_desktop#服务端安装","content":" # ubuntu sudo apt-get install x11vnc x11vnc -storepasswd x11vnc -auth guess -once -loop -noxdamage -repeat -rfbauth ~/.vnc/passwd -rfbport 5900 -shared x11vnc -forever https://www.realvnc.com/en/connect/download/viewer/ # arch ## old yay -S x11vnc net-tools update -&gt; /etc/gdm/custom.conf: WaylandEnable=false x11vnc -wait 50 -noxdamage -passwd PASSWORD -display :0 -forever -o /var/log/x11vnc.log -bg ## tigervnc # 要在 Arch Linux 上启动 VNC，您需要安装一个 VNC 服务器，例如 TigerVNC 或 TightVNC。然后，您可以使用以下步骤启动 VNC： # 1. 安装 VNC 服务器： sudo pacman -S tigervnc # 2. 设置 VNC 密码： vncpasswd # 3. 启动 VNC 服务器： vncserver :1 这将启动一个名为“:1”的 VNC 服务器实例。如果您需要启动多个实例，可以使用“:2”、“:3”等等。 # 4. 启动 X11 会话： startx 这将启动 X11 会话，您可以在其中运行应用程序。 # 5. 启动 VNC 显示器： x0vncserver -display :1 -passwordfile ~/.vnc/passwd # 这将启动一个 VNC 显示器，它将连接到您在第 3 步中启动的 VNC 服务器实例。 # 现在，您可以使用 VNC 客户端连接到您的 Arch Linux 系统并远程访问 X11 会话。   ","version":"Next","tagName":"h3"},{"title":"客户端​","type":1,"pageTitle":"remote desktop","url":"/notes/linux/remote_desktop#客户端","content":" https://www.realvnc.com/  # mac brew install vnc-viewer # 错误 # display_server_not_supported # /etc/gdm3/custom.conf [daemon] # Enabling automatic login AutomaticLoginEnable=true AutomaticLogin=$USERNAME sudo systemctl restart gdm.service   ","version":"Next","tagName":"h3"},{"title":"arch install todesk​","type":1,"pageTitle":"remote desktop","url":"/notes/linux/remote_desktop#arch-install-todesk","content":" wget https://dl.todesk.com/linux/todesk_2.0.2_x86_64.pkg.tar.zst sudo pacman -U todesk_2.0.2_x86_64.pkg.tar.zst sudo systemctl restart todeskd.service   ","version":"Next","tagName":"h2"},{"title":"详情参考​","type":1,"pageTitle":"remote desktop","url":"/notes/linux/remote_desktop#详情参考","content":" https://www.todesk.com/download_detail.html   ","version":"Next","tagName":"h3"},{"title":"samba(old)","type":0,"sectionRef":"#","url":"/notes/linux/samba","content":"","keywords":"","version":"Next"},{"title":"在 arch 中安装参考​","type":1,"pageTitle":"samba(old)","url":"/notes/linux/samba#在-arch-中安装参考","content":" https://wiki.archlinux.org/title/samba   ","version":"Next","tagName":"h3"},{"title":"在 ubuntu 中安装​","type":1,"pageTitle":"samba(old)","url":"/notes/linux/samba#在-ubuntu-中安装","content":" sudo apt-get install samba sudo useradd xxx sudo smbpasswd -a xxx sudo vi /etc/samba/smb.conf #### 配置内加入以下内容 [dev] comment = dev path = /var/dev valid user = xxx write list = xxx create mask = 0664 directory mask = 0775 force user = xxx force group = xxx public = no available = yes browseable = yes security = user ### 重启samba【sudo service smbd restart】  ","version":"Next","tagName":"h3"},{"title":"git ssh","type":0,"sectionRef":"#","url":"/notes/linux/ssh_git","content":"","keywords":"","version":"Next"},{"title":"git​","type":1,"pageTitle":"git ssh","url":"/notes/linux/ssh_git#git","content":" # generate public key git config --global user.name &quot;&quot; git config --global user.email &quot;&quot; ssh-keygen -t rsa -b 4096 -C &quot;&quot; # git config git config --global http.https://github.com.proxy socks5://127.0.0.1:7890 git config --global https.https://github.com.proxy socks5://127.0.0.1:7890 # git submodule git submodule add https://github.com/liuyib/hexo-theme-stun/ themes/stun git submodule update --remote   ~/.gitconfig​  # ~/.gitconfig [pull] rebase = false [user] email = name = [filter &quot;lfs&quot;] clean = git-lfs clean -- %f smudge = git-lfs smudge -- %f process = git-lfs filter-process required = true [init] defaultBranch = master [alias] lg = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all lp = log --stat -p ; [http &quot;https://github.com&quot;] ; postBuffer = 524288000 ; proxy = socks5://127.0.0.1:1080 ; [https &quot;https://github.com&quot;] ; postBuffer = 524288000 ; proxy = socks5://127.0.0.1:1080 [url &quot;https://gh.hjkl01.cn/proxy/https://github.com&quot;] insteadOf = https://github.com   git commands​  git branch -a # 查看全部分支 git checkout -b dev # 创建并检出一个新的分支 git add somefile git commit -m &quot;update feature&quot; git push -u origin dev git checkout master git merge dev git branch -d dev # 删除dev分支 git branch -d origin/dev # 删除远程dev分支 # 回退版本 git reset --hard HEAD^ git reset --hard somecommit   ","version":"Next","tagName":"h3"},{"title":"ssh​","type":1,"pageTitle":"git ssh","url":"/notes/linux/ssh_git#ssh","content":" # $HOME/.ssh/config Host archServer HostName 192.168.xx.xx User xxx Port xxx # AddressFamily inet # use ipv4 # AddressFamily inet6 # use ipv6 IdentitiesOnly yes IdentityFile ~/.ssh/id_rsa ServerAliveInterval 120 # DynamicForward localhsot:1080 # LocalForward localhost:5432 remote-host:5432 # RemoteForward remote-port target-host:target-port # 转发跳板机端口 ssh -tt -i ./id_rsa -L 0.0.0.0:local_port:host2:host2_port user@host1 # 上传公钥到目标服务器 ssh-copy-id -i ~/.ssh/id_rsa.pub archServer # 转发服务器到本机的1082端口 ssh -D 1082 -f -C -q -N archServer # Host github # HostName github.com # User git # # 走 HTTP 代理 # # ProxyCommand socat - PROXY:user:passwd@127.0.0.1:%h:%p,proxyport=7890 # # 走 socks5 代理 # # ProxyCommand nc -v -x 127.0.0.1:7890 %h %p # # ProxyCommand ncat --proxy-type http --proxy 127.0.0.1:7890 --proxy-auth user:passwd %h %p # # windows # # ProxyCommand connect -H localhost:7890 %h %p   ssh TOTP 开启二次验证​  # ubuntu sudo apt install -y libpam-google-authenticator # arch # yay -S --noconfirm google-authenticator-libpam-git sudo pacman -S --noconfirm libpam-google-authenticator # 生成验证码 # 哪个账号需要动态验证码，请切换到该账号下操作 # -t: 使用 TOTP 验证 # -f: 将配置保存到 ~/.google_authenticator 文件里面 # -d: 不允许重复使用以前使用的令牌 # -w 3: 使用令牌进行身份验证以进行时钟偏移 # -e 10: 生成 10 个紧急备用代码 # -r 3 -R 30: 限速 - 每 30 秒允许 3 次登录 google-authenticator -t -f -d -w 3 -e 10 -r 3 -R 30 # chrome 插件 https://chrome.google.com/webstore/detail/authenticator/bhghoamapcdpbohphigoooaddinpkbai # android app Google Authenticator https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&amp;hl=en_US&amp;gl=US sudo vim /etc/pam.d/sshd auth required pam_google_authenticator.so sudo nvim /etc/ssh/sshd_config KbdInteractiveAuthentication yes ChallengeResponseAuthentication yes PubkeyAuthentication yes PasswordAuthentication yes AuthenticationMethods publickey keyboard-interactive # AuthenticationMethods keyboard-interactive sudo systemctl restart ssh.service   ","version":"Next","tagName":"h3"},{"title":"github​","type":1,"pageTitle":"git ssh","url":"/notes/linux/ssh_git#github","content":" 星图​  在 markdown 中的代码:​  ![stars](https://starchart.cc/lesssound/pornhub.svg)   example:​    git 技巧​  git log --after=&quot;2020-15-05&quot; --before=&quot;2020-25-05&quot; git log --after=&quot;yesterday&quot; // shows only commits from yeserday git log --after=&quot;today&quot; // shows only today commits git log --before=&quot;10 day ago&quot; // omits last 10 days commits git log --after=&quot;1 week ago&quot; //show only commits from last week git log --after=&quot;2 week ago&quot; git log --after=&quot;2 month ago&quot; // shows only last 2 months commits # git log with diff changes git log -p # Filter commits by author git log --author=&quot;Srebalaji&quot; # Filter commits by log messages git log --grep=&quot;ISSUE-43560&quot; # To make the search case insensitive, you can pass -i parameter git log -i --grep=&quot;issue-43560&quot; # Filter commits by files git log main.rb # Filter commits by file content git log -S&quot;function login()&quot; # Custom formatting log messages git log --pretty=format:&quot;%Cred%an - %ar%n %Cblue %h -%Cgreen %s %n&quot;  ","version":"Next","tagName":"h3"},{"title":"systemctl","type":0,"sectionRef":"#","url":"/notes/linux/systemctl","content":"","keywords":"","version":"Next"},{"title":"systemctl​","type":1,"pageTitle":"systemctl","url":"/notes/linux/systemctl#systemctl","content":" ","version":"Next","tagName":"h2"},{"title":"glider example​","type":1,"pageTitle":"systemctl","url":"/notes/linux/systemctl#glider-example","content":" [Unit] Description=Glider Service After=network-online.target Wants=network-online.target [Service] Type=simple User=nobody Restart=on-failure RestartSec=5s ExecStart=/usr/bin/glider -config /etc/glider/glider.conf [Install] WantedBy=multi-user.target WantedBy=multi-user.target   sudo ln -s glider.service /etc/systemd/system/multi-user.target.wants/glider.service # sudo ln -s glider.service /etc/systemd/system/glider.service # sudo ln -s glider.service /etc/lib/systemd/system/glider.service sudo systemctl daemon-reload sudo systemctl restart glider.service   supervisor &amp; systemctl  ","version":"Next","tagName":"h3"},{"title":"supervisor​","type":1,"pageTitle":"systemctl","url":"/notes/linux/systemctl#supervisor","content":" ","version":"Next","tagName":"h2"},{"title":"安装​","type":1,"pageTitle":"systemctl","url":"/notes/linux/systemctl#安装","content":" yay --noconfirm -S supervisor # or install with pip pip install supervisor sudo ~/.venv/py3/bin/echo_supervisord_conf &gt; /etc/supervisord.conf # config /etc/supervisord.conf supervisord   ","version":"Next","tagName":"h3"},{"title":"配置: 后缀为 conf 或 ini​","type":1,"pageTitle":"systemctl","url":"/notes/linux/systemctl#配置-后缀为-conf-或-ini","content":" [program:frp_ssh] command = /home/user/frp/frpc -c /home/user/frp/config.ini directory = /home/user/somedir user = user autostart = true autorestart = true startsecs = 3 redirect_stderr = true stdout_logfile_maxbytes = 50MB stdout_logfile_backups = 10 stdout_logfile = /home/user/frp/log  ","version":"Next","tagName":"h3"},{"title":"ubuntu(old)","type":0,"sectionRef":"#","url":"/notes/linux/ubuntu","content":"","keywords":"","version":"Next"},{"title":"更换源​","type":1,"pageTitle":"ubuntu(old)","url":"/notes/linux/ubuntu#更换源","content":" #中国科技大学 sudo sed -i 's/deb.debian.org/mirrors.ustc.edu.cn/g' /etc/apt/sources.list #网易云163 sudo sed -i 's/deb.debian.org/mirrors.163.com/g' /etc/apt/sources.list #阿里云 sudo sed -i 's/deb.debian.org/mirrors.aliyun.com/g' /etc/apt/sources.list #清华同方 sudo sed -i 's/deb.debian.org/mirrors.tuna.tsinghua.edu.cn/g' /etc/apt/sources.list   ","version":"Next","tagName":"h2"},{"title":"中文乱码​","type":1,"pageTitle":"ubuntu(old)","url":"/notes/linux/ubuntu#中文乱码","content":" sudo apt-get -y install language-pack-zh-hans #写入 ~/.zshrc: LC_ALL=zh_CN.utf8 export LC_ALL source ~/.zshrc   ","version":"Next","tagName":"h2"},{"title":"配置静态 IP​","type":1,"pageTitle":"ubuntu(old)","url":"/notes/linux/ubuntu#配置静态-ip","content":" path: `/etc/network/interface` auto eth1 iface eth1 inet static address 192.168.56.xx netmask 255.255.255.0 network 192.168.56.0 broadcast 192.168.56.255 if possible, 配置路由器中的dhcp.   ","version":"Next","tagName":"h2"},{"title":"ip route​","type":1,"pageTitle":"ubuntu(old)","url":"/notes/linux/ubuntu#ip-route","content":" sudo route add -net 66.1.254.0/24 gw 66.16.62.254 enp4s0 sudo ip addr flush dev enp4s0   ","version":"Next","tagName":"h2"},{"title":"安装 Ubuntu 分区​","type":1,"pageTitle":"ubuntu(old)","url":"/notes/linux/ubuntu#安装-ubuntu-分区","content":" efi swap\t交换空间 / ext4 /boot\t200M左右\text4 /tmp\t5G左右\text4   ","version":"Next","tagName":"h2"},{"title":"手动配置 swap 内存​","type":1,"pageTitle":"ubuntu(old)","url":"/notes/linux/ubuntu#手动配置-swap-内存","content":"  sudo fallocate -l 4G /swapfile sudo chmod 600 /swapfile sudo mkswap /swapfile sudo swapon /swapfile sudo vim /etc/fstab /swapfile none swap sw 0 0  ","version":"Next","tagName":"h2"},{"title":"小米刷机","type":0,"sectionRef":"#","url":"/notes/linux/刷机","content":"小米刷机 小米手机 BL 解锁操作指南 备份手机数据，BL 解锁会清除手机数据，有数据的请先外置备份数据手机已插入 SIM 卡，关闭 WiFi 连接，启用数据联网方式（后面操作需要用到数据联网）依次点击 手机设置 -&gt; 我的设备 -&gt; 全部参数 -&gt; 连续点击几次“MIUI 版本” 打开开发者选项（图解）依次点击 手机设置 -&gt; 更多设置 -&gt; 开发者选项 -&gt; 设备解锁状态 -&gt; 绑定帐号和设备（图解）如果首次绑定手机，需要在绑定帐号后等待 7 天，期间不要退出小米帐号，以满足解锁条件（不然后面会提示绑定时间太短）电脑下载小米 BL 解锁工具，完整解压后运行里面的 miflash_unlock.exe 程序，按提示登录小米帐号将手机关机，按住音量下键 + 开机键进入 Fastboot 模式，用数据线连接电脑（如果显示未连接，请检测安装电脑驱动）识别手机连接后，点击“解锁”按钮，稍等片刻就会看到 BL 解锁结果，然后重启手机（开机可看到 BL 锁状态）到此，BL 解锁就完成了，之后可以按需使用线刷方式刷机或者 Root 手机等操作 使用命令 adb 和 fastboot 刷机 # 下载地址: https://get.pixelexperience.org/alioth # 下载的版本对应设置的安卓版本 # 手机关机后长按 音量下键 + 电源键 进入 FASTBOOT 模式，用数据线连接到电脑。 # 尽量只连接一台设备 fastboot boot PixelExperience_Plus_alioth-13.0-20230119-0804-OFFICIAL.img # xiaomi k40 # 不要恢复什么东西 不然不能打开Wi-Fi # fastboot flash boot PixelExperience_Plus_alioth-13.0-20230119-0804-OFFICIAL.img &amp;&amp; fastboot reboot-recovery # 进入 Recovery 后，先清除内部储存和缓存，点击 Factory reset，再点击 Format data / factory reset，点击 format data 确认格式化。 # 然后点击右上角箭头图标返回主界面，点击 Apply update，再点击 Apply from ADB，接着电脑输入命令开始推包刷机。 adb sideload PixelExperience_alioth-12.1-20220920-0632-OFFICIAL.zip # 刷完后，点击右上角箭头图标返回主界面，点击 Reboot system now，这时就会进入 PixelExperience 系统。 WiFi 提示网络受限 # 1. 依次点击手机设置 -&gt; 关于手机 -&gt; 连点数次“版本号”启用开发者选项。 # 2. 依次点击手机设置 -&gt; 系统 -&gt; 开发者选项 -&gt; 开启“Android 调试”。 # 3. 手机用数据线连接到电脑，在手机屏幕 USB 调试弹窗允许连接到该电脑。 # 4. 电脑下载 ADB 工具包, 运行命令 adb shell settings put global captive_portal_http_url http://connect.rom.miui.com/generate_204 adb shell settings put global captive_portal_https_url https://connect.rom.miui.com/generate_204 # 5. 运行后断开手机连接，关闭 WiFi 重新打开就解决问题了。 Magisk adb push ~/Downloads/PixelExperience_Plus_phoenix-12.1-20220817-1129-OFFICIAL.img /sdcard/Download/boot.img # 打开Magisk -&gt; 安装 修补 选择并修补 boot.img adb pull /sdcard/Download/magisk_patched-25200_UCbjh.img . adb reboot bootloader fastboot flash boot magisk_patched-25200_UCbjh.img fastboot reboot # mitmproxy root cert ```shell # cd ~/.mitmproxy/ openssl x509 -inform PEM -subject_hash_old -in mitmproxy-ca-cert.cer | head -1 cp mitmproxy-ca-cert.cer c8450d0d.0 #传入手机 adb push c8750f0d.0 /sdcard #获取手机的root权限 adb shell su #挂载系统目录为可写 mount -o rw,remount / mv /sdcard/c8750f0d.0 /system/etc/security/cacerts #修改证书权限 chmod 644 /system/etc/security/cacerts/c8750f0d.0 # adb reboot links https://wiki.pixelexperience.org/devices/phoenix/install/https://get.pixelexperience.org/aliothhttps://miuiver.com/install-pixelexperience-on-xiaomi/https://github.com/topjohnwu/Magisk/releaseshttps://xiaomishequ.feishu.cn/sheets/shtcnsRTbwSvpUsaei6B04ogI6Z?sheet=bRyHnRhttps://miuiver.com/aosp-rom-of-xiaomi/","keywords":"","version":"Next"},{"title":"Awesome Links","type":0,"sectionRef":"#","url":"/notes/others/awesome","content":"Awesome Links https://github.com/sindresorhus/awesomehttps://github.com/rockerBOO/awesome-neovimhttps://github.com/MunGell/awesome-for-beginnershttps://github.com/docker/awesome-composehttps://github.com/serhii-londar/open-source-mac-os-appshttps://github.com/gothinkster/realworldhttps://github.com/enaqx/awesome-reacthttps://github.com/yjq635/awesome-ops-systemhttps://github.com/Lissy93/awesome-privacyhttps://github.com/vinta/awesome-pythonhttps://github.com/jobbole/awesome-python-cnhttps://github.com/wsvincent/awesome-djangohttps://github.com/haiiiiiyun/awesome-django-cnhttps://github.com/awesome-selfhosted/awesome-selfhostedhttps://github.com/mjhea0/awesome-fastapihttps://github.com/avelino/awesome-gohttps://github.com/bregman-arie/devops-exercises","keywords":"","version":"Next"},{"title":"装机工具","type":0,"sectionRef":"#","url":"/notes/others","content":"","keywords":"","version":"Next"},{"title":"GFW​","type":1,"pageTitle":"装机工具","url":"/notes/others#gfw","content":" https://portal.shadowsocks.au/aff.php?aff=24252https://github.com/Dreamacro/clash/releaseshttps://github.com/haishanh/yacdhttps://github.com/nadoo/gliderhttps://github.com/p4gefau1t/trojan-go  ","version":"Next","tagName":"h3"},{"title":"Mac","type":0,"sectionRef":"#","url":"/notes/mac","content":"","keywords":"","version":"Next"},{"title":"brew​","type":1,"pageTitle":"Mac","url":"/notes/mac#brew","content":" ","version":"Next","tagName":"h2"},{"title":"安装​","type":1,"pageTitle":"Mac","url":"/notes/mac#安装","content":" # 安装 export HOMEBREW_BREW_GIT_REMOTE=&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git&quot; export HOMEBREW_CORE_GIT_REMOTE=&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git&quot; export HOMEBREW_BOTTLE_DOMAIN=&quot;https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles&quot; # 从清华镜像下载安装脚本并安装 Homebrew / Linuxbrew export HOMEBREW_API_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles/api git clone --depth=1 https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/install.git brew-install /bin/bash brew-install/install.sh rm -rf brew-install # 也可从 GitHub 获取官方安装脚本安装 Homebrew / Linuxbrew /bin/bash -c &quot;$(curl -fsSL https://github.com/Homebrew/install/raw/master/install.sh)&quot;   # software iredis pgcli mycli scrcpy viu proxychains-ng # open chrome with proxy open -a /Applications/Google\\ Chrome.app/ --args --proxy-server=127.0.0.1:7890   ","version":"Next","tagName":"h3"},{"title":"brew cask​","type":1,"pageTitle":"Mac","url":"/notes/mac#brew-cask","content":" ","version":"Next","tagName":"h2"},{"title":"shell​","type":1,"pageTitle":"Mac","url":"/notes/mac#shell","content":" iterm2 alacritty](https://github.com/alacritty/alacritty/releases) tmux  ","version":"Next","tagName":"h3"},{"title":"视频播放器​","type":1,"pageTitle":"Mac","url":"/notes/mac#视频播放器","content":" iina  ","version":"Next","tagName":"h3"},{"title":"sql 可视化管理​","type":1,"pageTitle":"Mac","url":"/notes/mac#sql-可视化管理","content":" tableplus  ","version":"Next","tagName":"h3"},{"title":"vnc 客户端, 比 Mac 自带的流畅​","type":1,"pageTitle":"Mac","url":"/notes/mac#vnc-客户端-比-mac-自带的流畅","content":" vnc-viewer  ","version":"Next","tagName":"h3"},{"title":"字体​","type":1,"pageTitle":"Mac","url":"/notes/mac#字体","content":" font-fira-code font-fira-code-nerd-font  brew tap homebrew/cask-fonts brew install --cask font-fira-code brew install font-fira-mono-nerd-font   ","version":"Next","tagName":"h3"},{"title":"控制电池充电量​","type":1,"pageTitle":"Mac","url":"/notes/mac#控制电池充电量","content":" aldente  ","version":"Next","tagName":"h3"},{"title":"窗口管理​","type":1,"pageTitle":"Mac","url":"/notes/mac#窗口管理","content":" rectangle  brew install --cask rectangle   ","version":"Next","tagName":"h3"},{"title":"平滑鼠标滚动​","type":1,"pageTitle":"Mac","url":"/notes/mac#平滑鼠标滚动","content":" mos  ","version":"Next","tagName":"h3"},{"title":"Mac 终端录屏​","type":1,"pageTitle":"Mac","url":"/notes/mac#mac-终端录屏","content":" ttygif  # https://github.com/icholy/ttygif brew install ttygif ttyrec myrecording # On OSX optionally you can set a -f flag which will bypass cropping which is needed for terminal apps which aren't full screen. Both standard Terminal and iTerm apps are supported. ttygif myrecording -f   ","version":"Next","tagName":"h3"},{"title":"在 touch bar 上显示歌词​","type":1,"pageTitle":"Mac","url":"/notes/mac#在-touch-bar-上显示歌词","content":" LyricsX ","version":"Next","tagName":"h3"},{"title":"Download Tools​","type":1,"pageTitle":"装机工具","url":"/notes/others#download-tools","content":" https://github.com/agalwood/Motrixhttps://github.com/aria2/aria2https://github.com/filecxx/FileCentipedehttps://github.com/XIU2/TrackersListCollection/blob/master/README-ZH.mdhttps://github.com/transmission/transmission/releaseshttps://github.com/Momo707577045/m3u8-downloader  ","version":"Next","tagName":"h3"},{"title":"Mirrors​","type":1,"pageTitle":"装机工具","url":"/notes/others#mirrors","content":" https://mirror.tuna.tsinghua.edu.cn/help/archlinux/https://developer.aliyun.com/mirror/https://mirror.sjtu.edu.cn/http://mirrors.ustc.edu.cn/help/centos.htmlhttps://mirrors.nju.edu.cn/https://mirrors.ustc.edu.cn/https://github.com/eryajf/Thanks-Mirror  ","version":"Next","tagName":"h3"},{"title":"Flash OS images​","type":1,"pageTitle":"装机工具","url":"/notes/others#flash-os-images","content":" https://github.com/pbatard/rufushttps://github.com/balena-io/etcherhttps://github.com/ventoy/Ventoy  ","version":"Next","tagName":"h3"},{"title":"Unix​","type":1,"pageTitle":"装机工具","url":"/notes/others#unix","content":" TERMINAL https://github.com/alacritty/alacrittyhttps://github.com/Eugeny/tabbyhttps://github.com/vercel/hyperhttps://github.com/cs01/termpairhttps://github.com/kovidgoyal/kittyhttps://github.com/warpdotdev/Warpothers https://github.com/Mayccoll/Goghhttps://github.com/ryanoasis/nerd-fontshttps://github.com/tonsky/FiraCode TOOLS https://github.com/fatedier/frphttps://github.com/jeessy2/ddns-gohttps://github.com/sharkdp/fdhttps://github.com/rofl0r/ncduhttps://github.com/muesli/dufhttps://github.com/X0rg/CPU-Xhttps://github.com/icholy/ttygifhttps://github.com/atanunq/viu  ","version":"Next","tagName":"h3"},{"title":"Mac​","type":1,"pageTitle":"装机工具","url":"/notes/others#mac","content":" https://github.com/Caldis/Moshttps://github.com/mbadolato/iTerm2-Color-Schemeshttps://github.com/Toxblh/MTMRhttps://github.com/davidwernhart/AlDentehttps://github.com/rxhanson/Rectangle  ","version":"Next","tagName":"h3"},{"title":"Windows​","type":1,"pageTitle":"装机工具","url":"/notes/others#windows","content":" https://github.com/M2Team/NanaZiphttps://github.com/yuk7/ArchWSLhttps://eagleget.en.softonic.com/download img: https://www.microsoft.com/zh-cn/software-download/windows10ISOhttps://hellowindows.cn/https://msdn.sjjzm.com/win10.htmlhttps://next.itellyou.cn/  ","version":"Next","tagName":"h3"},{"title":"Desktop​","type":1,"pageTitle":"装机工具","url":"/notes/others#desktop","content":" https://github.com/pavlobu/deskreenhttps://github.com/rustdesk/rustdeskhttps://github.com/FreeRDP/FreeRDP ","version":"Next","tagName":"h3"},{"title":"Github Action","type":0,"sectionRef":"#","url":"/notes/others/github_action","content":"Github Action create tokenhttps://github.com/hjkl01/hjkl01.github.io/settings/secrets/actions New repository secret name 和 ${{ secrets.SECRET_NAME }} 对应 ","keywords":"","version":"Next"},{"title":"网线水晶头","type":0,"sectionRef":"#","url":"/notes/others/netcable","content":"","keywords":"","version":"Next"},{"title":"568A​","type":1,"pageTitle":"网线水晶头","url":"/notes/others/netcable#568a","content":"   ","version":"Next","tagName":"h3"},{"title":"568B​","type":1,"pageTitle":"网线水晶头","url":"/notes/others/netcable#568b","content":"  ","version":"Next","tagName":"h3"},{"title":"Rime","type":0,"sectionRef":"#","url":"/notes/others/rime","content":"","keywords":"","version":"Next"},{"title":"switch","type":0,"sectionRef":"#","url":"/notes/others/switch","content":"","keywords":"","version":"Next"},{"title":"nsz​","type":1,"pageTitle":"switch","url":"/notes/others/switch#nsz","content":" pip install nsz cp ~/.local/share/suyu/keys/prod.keys ~/.switch nsz -D xxx.nsz   ","version":"Next","tagName":"h2"},{"title":"keys​","type":1,"pageTitle":"switch","url":"/notes/others/switch#keys","content":" C:\\Users\\username\\AppData\\Roaming\\yuzu\\keys   ","version":"Next","tagName":"h2"},{"title":"金手指​","type":1,"pageTitle":"switch","url":"/notes/others/switch#金手指","content":" # 右键游戏 打开mod 新建文件夹 如 金手指 -&gt; cheats -&gt; {BID}.txt  ","version":"Next","tagName":"h2"},{"title":"github​","type":1,"pageTitle":"Rime","url":"/notes/others/rime#github","content":" ","version":"Next","tagName":"h2"},{"title":"~/Library/Rime/default.custom.yaml​","type":1,"pageTitle":"Rime","url":"/notes/others/rime#libraryrimedefaultcustomyaml","content":" patch: # 菜单 menu: page_size: 9 # 候选词个数 # 切换中英： # 不同的选项表示：打字打到一半时按下了 CapsLock、Shift、Control 后： # commit_code 上屏原始的编码，然后切换到英文 # commit_text 上屏拼出的词句，然后切换到英文 # clear 清除未上屏内容，然后切换到英文 # inline_ascii 无输入时，切换中英；有输入时，切换到临时英文模式，按回车上屏后回到中文状态 # noop 屏蔽快捷键，不切换中英，但不要屏蔽 CapsLock ascii_composer: good_old_caps_lock: true # true | false switch_key: Caps_Lock: commit_code # Caps_Lock: clear # commit_code | commit_text | clear Shift_L: noop # Shift_L: clear # commit_code | commit_text | inline_ascii | clear | noop Shift_R: clear # commit_code | commit_text | inline_ascii | clear | noop Control_L: noop # commit_code | commit_text | inline_ascii | clear | noop Control_R: noop # commit_code | commit_text | inline_ascii | clear | noop   ","version":"Next","tagName":"h2"},{"title":"~/Library/Rime/rime_ice.custom.yaml​","type":1,"pageTitle":"Rime","url":"/notes/others/rime#libraryrimerime_icecustomyaml","content":" # 添加了模糊音的自定义配置文件 rime_ice.custom.yaml # https://github.com/Mark24Code/rime-auto-deploy/issues/1 patch: # 拼写设定 speller: # 如果不想让什么标点直接上屏，可以加在 alphabet，或者编辑标点符号为两个及以上的映射 alphabet: zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA delimiter: &quot; '&quot; # 第一位&lt;空格&gt;是拼音之间的分隔符；第二位&lt;'&gt;表示可以手动输入单引号来分割拼音。 algebra: []  ","version":"Next","tagName":"h2"},{"title":"chrome","type":0,"sectionRef":"#","url":"/notes/others/chrome","content":"","keywords":"","version":"Next"},{"title":"chrome devtools​","type":1,"pageTitle":"chrome","url":"/notes/others/chrome#chrome-devtools","content":" var _path = '//div//text()' var result = $x(_path).map(function(i){return i.textContent} ); copy(result);   var _path = '//a//@href'; var result = $x(_path) .map(i =&gt; i.textContent) .filter(url =&gt; url.includes('/reel/')); copy(result);   ","version":"Next","tagName":"h3"},{"title":"Chrome书签文件的位置​","type":1,"pageTitle":"chrome","url":"/notes/others/chrome#chrome书签文件的位置","content":" Windows: C:\\Users\\&lt;YourUsername&gt;\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Bookmarks macOS: ~/Library/Application\\ Support/Google/Chrome/Default/Bookmarks Linux: ~/.config/google-chrome/Default/Bookmarks   ","version":"Next","tagName":"h3"},{"title":"更新插件失败时​","type":1,"pageTitle":"chrome","url":"/notes/others/chrome#更新插件失败时","content":" 打开未安装的应用列表 手动依次安装  ","version":"Next","tagName":"h3"},{"title":"ZeroOmega​","type":1,"pageTitle":"chrome","url":"/notes/others/chrome#zeroomega","content":" ","version":"Next","tagName":"h3"},{"title":"web scraper​","type":1,"pageTitle":"chrome","url":"/notes/others/chrome#web-scraper","content":" https://chrome.google.com/webstore/detail/web-scraper-free-web-scra/jnhgnonknehpejjnehehllkliplmbmhn  { &quot;_id&quot;: &quot;test&quot;, &quot;startUrl&quot;: [ &quot;https://list.jd.com/list.html?cat=9987,653,655&quot;, &quot;https://list.jd.com/list.html?cat=9987,653,655&amp;page=2&amp;s=58&amp;click=0&quot; ], &quot;selectors&quot;: [ { &quot;delay&quot;: 0, &quot;id&quot;: &quot;name&quot;, &quot;multiple&quot;: true, &quot;parentSelectors&quot;: [&quot;_root&quot;], &quot;selector&quot;: &quot;#J_goodsList &gt; ul &gt; li&quot;, &quot;type&quot;: &quot;SelectorElement&quot; }, { &quot;delay&quot;: 0, &quot;id&quot;: &quot;sku_name&quot;, &quot;multiple&quot;: false, &quot;parentSelectors&quot;: [&quot;name&quot;], &quot;regex&quot;: &quot;&quot;, &quot;selector&quot;: &quot;a em&quot;, &quot;type&quot;: &quot;SelectorText&quot; }, { &quot;delay&quot;: 0, &quot;id&quot;: &quot;price&quot;, &quot;multiple&quot;: false, &quot;parentSelectors&quot;: [&quot;name&quot;], &quot;regex&quot;: &quot;&quot;, &quot;selector&quot;: &quot; div &gt; div.p-price &gt; strong &gt; i&quot;, &quot;type&quot;: &quot;SelectorText&quot; }, { &quot;delay&quot;: 0, &quot;id&quot;: &quot;comments&quot;, &quot;multiple&quot;: false, &quot;parentSelectors&quot;: [&quot;name&quot;], &quot;regex&quot;: &quot;&quot;, &quot;selector&quot;: &quot;.p-commit strong a&quot;, &quot;type&quot;: &quot;SelectorText&quot; }, { &quot;delay&quot;: 0, &quot;id&quot;: &quot;shop&quot;, &quot;multiple&quot;: false, &quot;parentSelectors&quot;: [&quot;name&quot;], &quot;regex&quot;: &quot;&quot;, &quot;selector&quot;: &quot;.p-shop span a&quot;, &quot;type&quot;: &quot;SelectorText&quot; } ] }   { &quot;_id&quot;: &quot;tianmao&quot;, &quot;startUrl&quot;: [ &quot;https://list.tmall.com/search_product.htm?spm=a220m.1000858.0.0.219b2a680geXJ0&amp;s=120&amp;q=%CA%D6%BB%FA&amp;sort=s&amp;style=g&amp;from=mallfp..pc_1_searchbutton&amp;active=1&amp;type=pc#J_Filter&quot; ], &quot;selectors&quot;: [ { &quot;delay&quot;: 0, &quot;id&quot;: &quot;sku&quot;, &quot;multiple&quot;: true, &quot;parentSelectors&quot;: [&quot;_root&quot;], &quot;selector&quot;: &quot;#J_ItemList .product&quot;, &quot;type&quot;: &quot;SelectorElement&quot; }, { &quot;delay&quot;: 0, &quot;id&quot;: &quot;name&quot;, &quot;multiple&quot;: false, &quot;parentSelectors&quot;: [&quot;sku&quot;], &quot;regex&quot;: &quot;&quot;, &quot;selector&quot;: &quot;.productTitle a&quot;, &quot;type&quot;: &quot;SelectorText&quot; }, { &quot;delay&quot;: 0, &quot;id&quot;: &quot;price&quot;, &quot;multiple&quot;: false, &quot;parentSelectors&quot;: [&quot;sku&quot;], &quot;regex&quot;: &quot;&quot;, &quot;selector&quot;: &quot;.productPrice em&quot;, &quot;type&quot;: &quot;SelectorText&quot; }, { &quot;delay&quot;: 0, &quot;id&quot;: &quot;shop&quot;, &quot;multiple&quot;: false, &quot;parentSelectors&quot;: [&quot;sku&quot;], &quot;regex&quot;: &quot;&quot;, &quot;selector&quot;: &quot;a.productShop-name&quot;, &quot;type&quot;: &quot;SelectorText&quot; }, { &quot;delay&quot;: 0, &quot;id&quot;: &quot;sales&quot;, &quot;multiple&quot;: false, &quot;parentSelectors&quot;: [&quot;sku&quot;], &quot;regex&quot;: &quot;&quot;, &quot;selector&quot;: &quot;span em&quot;, &quot;type&quot;: &quot;SelectorText&quot; }, { &quot;delay&quot;: 0, &quot;id&quot;: &quot;comments&quot;, &quot;multiple&quot;: false, &quot;parentSelectors&quot;: [&quot;sku&quot;], &quot;regex&quot;: &quot;&quot;, &quot;selector&quot;: &quot;span a[data-p]&quot;, &quot;type&quot;: &quot;SelectorText&quot; } ] }  ","version":"Next","tagName":"h3"},{"title":"celery","type":0,"sectionRef":"#","url":"/notes/python/celery","content":"","keywords":"","version":"Next"},{"title":"celery 用法​","type":1,"pageTitle":"celery","url":"/notes/python/celery#celery-用法","content":" # test.py import time from datetime import datetime from celery import Celery # result_address = 'elasticsearch://user:passwd@ip:port/index' broker = 'redis://:passwd@ip:port/db' result_address = &quot;mongodb://user:password@ip:port/db&quot; app = Celery(&quot;tasks&quot;, broker=broker, backend=result_address) def my_on_failure(exc, task_id, args, kwargs, einfo): print(&quot;task failed&quot;) for argv in [exc, task_id, args, kwargs, einfo]: print(argv) app.conf.update( task_serializer=&quot;json&quot;, accept_content=[&quot;json&quot;], # Ignore other content result_serializer=&quot;json&quot;, timezone=&quot;Asia/Shanghai&quot;, enable_utc=True, # 下面这个就是限制tasks模块下的add函数，每秒钟只能执行10次 # CELERY_ANNOTATIONS = {'tasks.add':{'rate_limit':'10/s'}} # 或者限制所有的任务的刷新频率 task_annotations={&quot;tasks.add&quot;: {&quot;rate_limit&quot;: &quot;2/m&quot;}}, # annotations={&quot;tasks.add&quot;: {&quot;rate_limit&quot;: &quot;5/m&quot;, &quot;on_failure&quot;: my_on_failure}}, # annotations={&quot;*&quot;: {&quot;rate_limit&quot;: &quot;10/s&quot;, &quot;on_failure&quot;: my_on_failure}}, # celery worker的并发数，默认是服务器的内核数目,也是命令行-c参数指定的数目 worker_concurrency=10, # celery worker 每次去BROKER中预取任务的数量 prefetch_multiplier=1, # 单个任务的运行时间限制，否则会被杀死 task_time_limit=60, # 压缩方案选择，可以是zlib, bzip2，默认是发送没有压缩的数据 message_compression=&quot;zlib&quot;, ) @app.task(default_retry_delay=30, max_retries=2, retry_kwargs={&quot;max_retries&quot;: 3}) def add(x, y): print(x, y) # time.sleep(3) return x + y @app.task def sleep(seconds): time.sleep(seconds) @app.task def echo(msg, timestamp=False): time.sleep(3) return &quot;%s: %s&quot; % (datetime.now(), msg) if timestamp else msg @app.task def error(msg): raise Exception(msg)   # generate.py # https://github.com/mher/flower/blob/master/docs/api.ipynb import requests import json def main(): api_root = &quot;http://localhost:5566/api&quot; task_api = &quot;{}/task&quot;.format(api_root) url = &quot;{}/queues/length&quot;.format(api_root) print(url) resp = requests.get(url) print(resp.json()) for i in range(20): args = {&quot;args&quot;: [i, i**i]} url = &quot;{}/async-apply/tasks.add&quot;.format(task_api) # url = &quot;{}/apply/tasks.add&quot;.format(task_api) print(url) resp = requests.post(url, data=json.dumps(args)) reply = resp.json() print(reply) args = {&quot;args&quot;: [i, True]} url = &quot;{}/async-apply/tasks.echo&quot;.format(task_api) print(url) resp = requests.post(url, data=json.dumps(args)) reply = resp.json() print(reply) # url = &quot;{}/result/{}&quot;.format(task_api, reply[&quot;task-id&quot;]) # print(url) # resp = requests.get(url) # print(resp.json()) main()   celery -A tasks worker --loglevel=info &gt;&gt; logs/celery_worker.log 2&gt;&amp;1 &amp; celery -A tasks flower --loglevel=info --address=127.0.0.1 --port=5566 &gt;&gt; logs/celery_flower.log 2&gt;&amp;1 &amp;  ","version":"Next","tagName":"h2"},{"title":"fastapi","type":0,"sectionRef":"#","url":"/notes/python/fastapi","content":"fastapi from fastapi import FastAPI from pydantic import BaseModel app = FastAPI() # @app.get(&quot;/&quot;) async def read_root(): return {&quot;Hello&quot;: &quot;World&quot;} # @app.get(&quot;/items/{item_id}&quot;) async def read_item(item_id: int, q: str = None): return {&quot;item_id&quot;: item_id, &quot;q&quot;: q} class Item(BaseModel): name: str description: str = None price: float tax: float = None # @app.post(&quot;/items/&quot;) async def create_item(item: Item): return item app.add_api_route(&quot;/&quot;, read_root) app.add_api_route(&quot;/item/{item_id}&quot;, read_item) app.add_api_route(&quot;/items/&quot;, create_item, methods=['POST']) if __name__ == '__main__': uvicorn.run('main:app', reload=True) # gunicorn test:app -w 4 -k uvicorn.workers.UvicornWorker ","keywords":"","version":"Next"},{"title":"django","type":0,"sectionRef":"#","url":"/notes/python/django","content":"","keywords":"","version":"Next"},{"title":"load environment​","type":1,"pageTitle":"django","url":"/notes/python/django#load-environment","content":" # load environment import os envs = os.environ for k, v in envs.items(): print(k, v) # load .env # pip install django-environ import environ import os env = environ.Env( # set casting, default value DEBUG=(bool, False) ) # Set the project base directory BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) # Take environment variables from .env file environ.Env.read_env(os.path.join(BASE_DIR, '.env')) # SECURITY WARNING: don't run with debug turned on in production! DEBUG = env(&quot;DEBUG&quot;, default=True) from django.core.management.utils import get_random_secret_key SECRET_KEY = env(&quot;SECRET_KEY&quot;, default=get_random_secret_key()) # database url https://pypi.org/project/dj-database-url/ # pip install dj_database_url import dj_database_url # write .env and set DATABASE_URL DATABASES = { &quot;default&quot;: dj_database_url.config( default=env(&quot;DATABASE_URL&quot;, default=&quot;sqlite:///db.sqlite3&quot;), conn_max_age=600, conn_health_checks=True ) }   ","version":"Next","tagName":"h3"},{"title":"auto load app​","type":1,"pageTitle":"django","url":"/notes/python/django#auto-load-app","content":" # mkdir -p apps/appname # django-admin startapp appname apps/appname # update apps/appname/apps.py name = &quot;apps.appname&quot; # settings.py APPS_FLODER = os.path.join(BASE_DIR, &quot;apps&quot;) APPS = [_ for _ in os.listdir(APPS_FLODER) if os.path.isdir(os.path.join(APPS_FLODER, _)) and &quot;pycache&quot; not in _] INSTALLED_APPS += [&quot;apps.&quot; + _ for _ in APPS]   ","version":"Next","tagName":"h3"},{"title":"cors​","type":1,"pageTitle":"django","url":"/notes/python/django#cors","content":" # pip install django-cors-headers INSTALLED_APPS = ( ... 'corsheaders', ... ) MIDDLEWARE = [ ... 'corsheaders.middleware.CorsMiddleware', 'django.middleware.common.CommonMiddleware', ... ] CORS_ALLOW_ALL_ORIGINS=True # Load the default ones CORS_ALLOWED_ORIGINS = [&quot;http://localhost:3000&quot;, &quot;http://127.0.0.1:3000&quot;]   ","version":"Next","tagName":"h3"},{"title":"static in debug mode​","type":1,"pageTitle":"django","url":"/notes/python/django#static-in-debug-mode","content":" python manage.py runserver 0.0.0.0:8000 --insecure   ","version":"Next","tagName":"h3"},{"title":"gunicorn​","type":1,"pageTitle":"django","url":"/notes/python/django#gunicorn","content":" from django.contrib.staticfiles.urls import staticfiles_urlpatterns urlpatterns += staticfiles_urlpatterns()   ","version":"Next","tagName":"h3"},{"title":"dump and load data​","type":1,"pageTitle":"django","url":"/notes/python/django#dump-and-load-data","content":" python manage.py dumpdata (myapp) &gt; myapp.json python manage.py loaddata myapp.json   ","version":"Next","tagName":"h3"},{"title":"save data with scripts​","type":1,"pageTitle":"django","url":"/notes/python/django#save-data-with-scripts","content":" import os import django from proxyip.models import ProxyIP os.environ['DJANGO_SETTINGS_MODULE'] = 'dj_project.settings' django.setup() p = ProxyIP(ip='192.168.50.1') p.save() print(ProxyIP.objects.all()) python manage.py shell &lt; main.py   ","version":"Next","tagName":"h3"},{"title":"download drf_yasg yaml​","type":1,"pageTitle":"django","url":"/notes/python/django#download-drf_yasg-yaml","content":" # setting.py SWAGGER_SETTINGS = { 'DEFAULT_INFO': '$server.urls.openapi_info' } # urls.py openapi_info = openapi.Info( title=&quot;Snippets API&quot;, default_version=&quot;v1&quot;, description=&quot;Test description&quot;, terms_of_service=&quot;https://www.google.com/policies/terms/&quot;, contact=openapi.Contact(email=&quot;contact@snippets.local&quot;), license=openapi.License(name=&quot;BSD License&quot;), ) schema_view = get_schema_view( openapi_info, public=True, permission_classes=(permissions.AllowAny,), ) python manage.py generate_swagger swagger.yaml or swagger.json   ","version":"Next","tagName":"h3"},{"title":"caddyfile​","type":1,"pageTitle":"django","url":"/notes/python/django#caddyfile","content":" domain.com:38000 { reverse_proxy localhost:8000 encode zstd gzip handle_path /static/* { root * /home/username/django_project/static file_server } handle_path /media/* { root * /home/username/django_project/media file_server } }  ","version":"Next","tagName":"h3"},{"title":"send mail","type":0,"sectionRef":"#","url":"/notes/python/fastapi_mail","content":"","keywords":"","version":"Next"},{"title":"fastapi send mail API​","type":1,"pageTitle":"send mail","url":"/notes/python/fastapi_mail#fastapi-send-mail-api","content":" import uvicorn from fastapi import FastAPI, BackgroundTasks, UploadFile, File, Form from starlette.responses import JSONResponse from fastapi_mail import FastMail, MessageSchema, ConnectionConfig from pydantic import BaseModel, EmailStr from typing import List, Text class EmailSchema(BaseModel): email: List[EmailStr] html: Text conf = ConnectionConfig( # update username, password, from # example qq mail # https://service.mail.qq.com/cgi-bin/help?subtype=1&amp;&amp;id=28&amp;&amp;no=1001256 MAIL_USERNAME=&quot;qq123456&quot;, MAIL_PASSWORD=&quot;password&quot;, MAIL_FROM=&quot;qq123456@qq.com&quot;, MAIL_PORT=587, MAIL_SERVER=&quot;smtp.qq.com&quot;, MAIL_TLS=True, MAIL_SSL=False, USE_CREDENTIALS=True, VALIDATE_CERTS=True, ) app = FastAPI() html = &quot;&quot;&quot; &lt;p&gt;Thanks for using Fastapi-mail&lt;/p&gt; &quot;&quot;&quot; @app.post(&quot;/email&quot;) async def simple_send(email: EmailSchema) -&gt; JSONResponse: message = MessageSchema( subject=&quot;Fastapi-Mail module&quot;, recipients=email.dict().get( &quot;email&quot; ), # List of recipients, as many as you can pass body=email.dict().get(&quot;html&quot;, html), subtype=&quot;html&quot;, ) fm = FastMail(conf) await fm.send_message(message) return JSONResponse(status_code=200, content={&quot;message&quot;: &quot;email has been sent&quot;}) @app.post(&quot;/file&quot;) async def send_file( background_tasks: BackgroundTasks, file: UploadFile = File(...), email: EmailStr = Form(...), ) -&gt; JSONResponse: message = MessageSchema( subject=&quot;Fastapi mail module&quot;, recipients=[email], body=&quot;Simple background task &quot;, attachments=[file], ) fm = FastMail(conf) background_tasks.add_task(fm.send_message, message) return JSONResponse(status_code=200, content={&quot;message&quot;: &quot;email has been sent&quot;}) if __name__ == '__main__': uvicorn.run('main:app', reload=True, host='127.0.0.1', port=8000) # https://sabuhish.github.io/fastapi-mail/example/   ","version":"Next","tagName":"h2"},{"title":"yagmail​","type":1,"pageTitle":"send mail","url":"/notes/python/fastapi_mail#yagmail","content":" import yagmail username = &quot;xxx@qq.com&quot; password = &quot;xxx&quot; host = &quot;smtp.qq.com&quot; mail = yagmail.SMTP(user=username, password=password, host=host) mail.send(to=username, subject=&quot;这是主题&quot;, contents=[&quot;这是内容&quot;, r&quot;./logs/1695814_1.png&quot;]) print(&quot;finish !&quot;)  ","version":"Next","tagName":"h2"},{"title":"loguru","type":0,"sectionRef":"#","url":"/notes/python/loguru","content":"loguru # log.py import sys from pathlib import Path from loguru import logger # 日志目录 LOG_DIR = Path(&quot;logs&quot;) LOG_DIR.mkdir(exist_ok=True) # 移除默认的 stderr 输出（避免重复） logger.remove() # 控制台输出（带颜色） logger.add( sys.stdout, level=&quot;DEBUG&quot;, format=&quot;&lt;green&gt;{time:YYYY-MM-DD HH:mm:ss}&lt;/green&gt; | &quot; &quot;&lt;level&gt;{level: &lt;8}&lt;/level&gt; | &quot; &quot;&lt;cyan&gt;{name}&lt;/cyan&gt;:&lt;cyan&gt;{function}&lt;/cyan&gt;:&lt;cyan&gt;{line}&lt;/cyan&gt; - &quot; &quot;&lt;level&gt;{message}&lt;/level&gt;&quot;, colorize=True, ) # 文件输出 - 按天轮转，保留7天，INFO级别以上 logger.add( LOG_DIR / &quot;app_{time:YYYY-MM-DD}.log&quot;, rotation=&quot;1 day&quot;, retention=&quot;7 days&quot;, level=&quot;INFO&quot;, format=&quot;{time:YYYY-MM-DD HH:mm:ss} | {level: &lt;8} | {name}:{function}:{line} - {message}&quot;, encoding=&quot;utf-8&quot;, ) # 错误日志单独记录（ERROR 及以上） logger.add( LOG_DIR / &quot;error_{time:YYYY-MM-DD}.log&quot;, rotation=&quot;1 day&quot;, retention=&quot;14 days&quot;, level=&quot;ERROR&quot;, format=&quot;{time:YYYY-MM-DD HH:mm:ss} | {level: &lt;8} | {name}:{function}:{line} - {message}&quot;, encoding=&quot;utf-8&quot;, ) # 可选：输出 JSON 格式日志（便于 ELK 等收集） # logger.add( # LOG_DIR / &quot;app_json.log&quot;, # format=&quot;{message}&quot;, # serialize=True, # 输出 JSON # level=&quot;INFO&quot;, # ) # 导出 logger 实例供其模块使用 __all__ = [&quot;logger&quot;] ","keywords":"","version":"Next"},{"title":"jupyter","type":0,"sectionRef":"#","url":"/notes/python/jupyter","content":"","keywords":"","version":"Next"},{"title":"install​","type":1,"pageTitle":"jupyter","url":"/notes/python/jupyter#install","content":" # jupyter config pip install jupyter jupyter notebook --generate-config   ","version":"Next","tagName":"h2"},{"title":"generate passwd​","type":1,"pageTitle":"jupyter","url":"/notes/python/jupyter#generate-passwd","content":" # ipython from notebook.auth import passwd passwd() # or jupyter notebook password vim ~/.jupyter/jupyter_notebook_config.py c.NotebookApp.ip='*' c.NotebookApp.password = u'' c.NotebookApp.open_browser = False c.NotebookApp.port = 8000 jupyter notebook   ","version":"Next","tagName":"h2"},{"title":"generate multi ports​","type":1,"pageTitle":"jupyter","url":"/notes/python/jupyter#generate-multi-ports","content":" import os import re import secrets import yaml from rich import print class ConfigMeta: def __init__(self, _file=&quot;config.yaml&quot;): self.file = _file def __getattr__(self, key): with open(self.file, &quot;r&quot;) as file: self.con = yaml.safe_load(file) result = self.con.get(key) return result Config = ConfigMeta() def generate_password(): result = [] for i in range(1, 9): temp = {} temp[&quot;port&quot;] = 9120 + i temp[&quot;dirname&quot;] = f&quot;njrd_venv_{9120+i}&quot; temp[&quot;password&quot;] = secrets.token_urlsafe(32) result.append(temp) with open(&quot;config.yaml&quot;, &quot;w&quot;) as file: yaml.dump({&quot;config&quot;: result}, file, allow_unicode=True) def stop_old_jupyter(): cmd = &quot;ps aux | grep jupyter&quot; temp = os.popen(cmd) for t in temp: print(t) ppid = re.findall(&quot;\\d+&quot;, t)[0] cmd = f&quot;kill -9 {ppid}&quot; print(cmd) os.system(cmd) def main(): print(Config.config) for con in Config.config: dirname = con[&quot;dirname&quot;] port = con[&quot;port&quot;] password = con[&quot;password&quot;] if os.path.exists(f&quot;./{dirname}&quot;): print(f&quot;exists {dirname}&quot;) else: cmds = [ f&quot;/usr/bin/python3.6 -m venv {dirname}/.venv&quot;, f&quot;{dirname}/.venv/bin/pip install --upgrade pip&quot;, f&quot;{dirname}/.venv/bin/pip install jupyter &quot;, ] for cmd in cmds: print(cmd) os.system(cmd) cmd = f&quot;source {dirname}/.venv/bin/activate &amp;&amp; nohup {dirname}/.venv/bin/jupyter notebook --ip='*' --port='{port}' --notebook-dir='{dirname}' --NotebookApp.token='{password}' --NotebookApp.password='{password}' &gt;&gt; /dev/null 2&gt;&amp;1 &amp; &quot; print(cmd) os.system(cmd) return if __name__ == &quot;__main__&quot;: # generate_password() stop_old_jupyter() main()  ","version":"Next","tagName":"h2"},{"title":"database","type":0,"sectionRef":"#","url":"/notes/python/databases","content":"","keywords":"","version":"Next"},{"title":"install psycopg2-binary​","type":1,"pageTitle":"database","url":"/notes/python/databases#install-psycopg2-binary","content":" pip install psycopg2-binary sqlacodegen postgres://user:passwd@host:ip/database --outfile model.py   ","version":"Next","tagName":"h2"},{"title":"sqlalchemy​","type":1,"pageTitle":"database","url":"/notes/python/databases#sqlalchemy","content":" from sqlalchemy import create_engine from sqlalchemy import Column, String from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker db_string = &quot;postgres://admin:donotusethispassword@aws-us-east-1-portal.19.dblayer.com:15813/compose&quot; db = create_engine(db_string) base = declarative_base() class Film(base): __tablename__ = &quot;films&quot; title = Column(String, primary_key=True) director = Column(String) year = Column(String) Session = sessionmaker(db) session = Session() base.metadata.create_all(db) # Create doctor_strange = Film(title=&quot;Doctor Strange&quot;, director=&quot;Scott Derrickson&quot;, year=&quot;2016&quot;) session.add(doctor_strange) session.commit() # Read films = session.query(Film) for film in films: print(film.title) # Update doctor_strange.title = &quot;Some2016Film&quot; session.commit() # Delete session.delete(doctor_strange) session.commit() delete_obj = Shop.__table__.delete().where(Shop.shop_cate.contains(&quot;m&quot;)) session.execute(delete_obj) session.commit()   ","version":"Next","tagName":"h2"},{"title":"use session​","type":1,"pageTitle":"database","url":"/notes/python/databases#use-session","content":" # from .base_model import Base from sqlalchemy.orm import sessionmaker, scoped_session from contextlib import contextmanager from sqlalchemy.ext.declarative import declarative_base from sqlalchemy import Column, Integer, String, TIMESTAMP, text, JSON from sqlalchemy import create_engine Base = declarative_base() class PyOrmModel(Base): __tablename__ = &quot;py_orm&quot; id = Column(Integer, autoincrement=True, primary_key=True, comment=&quot;唯一id&quot;) name = Column(String(255), nullable=False, default=&quot;&quot;, comment=&quot;名称&quot;) attr = Column(JSON, nullable=False, comment=&quot;属性&quot;) ct = Column(TIMESTAMP, nullable=False, server_default=text(&quot;CURRENT_TIMESTAMP&quot;), comment=&quot;创建时间&quot;) ut = Column(TIMESTAMP, nullable=False, server_default=text(&quot;CURRENT_TIMESTAMP&quot;), comment=&quot;更新时间&quot;) @staticmethod def fields(): return PyOrmModel.__table__.columns.keys() # return [&quot;id&quot;, &quot;name&quot;, &quot;attr&quot;] @staticmethod def to_json(model): fields = PyOrmModel.fields() json_data = {} for field in fields: json_data[field] = model.__getattribute__(field) return json_data @staticmethod def from_json(data: dict): fields = PyOrmModel.fields() model = PyOrmModel() for field in fields: if field in data: model.__setattr__(field, data[field]) return model db_url = &quot;postgresql://user:password@ip:5432/db&quot; engine = create_engine(db_url, echo=False) Base.metadata.create_all(engine) def _get_session(): &quot;&quot;&quot;获取session&quot;&quot;&quot; return scoped_session(sessionmaker(bind=engine, expire_on_commit=False))() # 在这里对session进行统一管理，包括获取，提交，回滚和关闭 @contextmanager def db_session(commit=True): session = _get_session() try: yield session if commit: session.commit() except Exception as e: session.rollback() raise e finally: if session: session.close() class PyOrmModelOp: def __init__(self): pass @staticmethod def save_data(data: dict): with db_session() as session: model = PyOrmModel.from_json(data) session.add(model) # 查询操作，不需要commit @staticmethod def query_data(pid: int): data_list = [] with db_session(commit=False) as session: data = session.query(PyOrmModel).filter(PyOrmModel.id == pid) for d in data: data_list.append(PyOrmModel.to_json(d)) return data_list for i in range(9): # PyOrmModelOp.save_data({&quot;id&quot;: i, &quot;name&quot;: &quot;test&quot;, &quot;attr&quot;: {}}) PyOrmModelOp.save_data({&quot;name&quot;: &quot;test&quot;, &quot;attr&quot;: {}}) result = PyOrmModelOp.query_data(i) print(result)   ","version":"Next","tagName":"h3"},{"title":"databases[aiomysql]​","type":1,"pageTitle":"database","url":"/notes/python/databases#databasesaiomysql","content":" # pip install 'databases[aiomysql]' aiomysq # pip install 'databases[asyncpg]' # pip install 'databases[aiopg]' # pip install 'databases[aiomysql]' # pip install 'databases[asyncmy]' # pip install 'databases[aiosqlite]' import asyncio # Create a database instance, and connect to it. from databases import Database async def run(): db_url = &quot;mysql+aiomysql://user:passwd@host:port/db&quot; # sqlite:///test.db, # sqlite+aiosqlite:///test.db, # mysql+aiomysql://username:password@localhost:3306/testsuite, # mysql+asyncmy://username:password@localhost:3306/testsuite, # postgresql+aiopg://username:password@127.0.0.1:5432/testsuite, # postgresql+asyncpg://username:password@localhost:5432/testsuite database = Database(db_url) # database = Database(&quot;sqlite+aiosqlite:///example.db&quot;) await database.connect() # Create a table. query = &quot;&quot;&quot;CREATE TABLE HighScores (id INTEGER PRIMARY KEY AUTO_INCREMENT, name VARCHAR(100), score INTEGER)&quot;&quot;&quot; await database.execute(query=query) # Insert some data. query = &quot;INSERT INTO HighScores(name, score) VALUES (:name, :score)&quot; values = [ {&quot;name&quot;: &quot;Daisy&quot;, &quot;score&quot;: 92}, {&quot;name&quot;: &quot;Neil&quot;, &quot;score&quot;: 87}, {&quot;name&quot;: &quot;Carol&quot;, &quot;score&quot;: 43}, ] await database.execute_many(query=query, values=values) # Run a database query. query = &quot;SELECT * FROM HighScores&quot; rows = await database.fetch_all(query=query) print(&quot;High Scores:&quot;, rows) for r in rows: print(r) return rows return [r.id for r in rows] result = asyncio.run(run())  ","version":"Next","tagName":"h2"},{"title":"python","type":0,"sectionRef":"#","url":"/notes/python","content":"","keywords":"","version":"Next"},{"title":"basic​","type":1,"pageTitle":"python","url":"/notes/python#basic","content":" # json json.dumps(item, ensure_ascii=False, indent=4) # jmespath https://jmespath.org/tutorial.html # random random.shuffle(_list) # 对字典排序 sorted(_dict.items(), key=lambda d: d[1], reverse=False) # unicode replace repr() ### http server py2 python -m SimpleHTTPServer 8000 py3 python -m http.server 8000 # 格式化输出 print(&quot;{:02d}&quot;.format(1)) print(f&quot;{1:02d}&quot;) # 乘法表 print ('\\n'.join([' '.join(['%s*%s=%-2s' % (y,x,x*y) for y in range(1,x+1)]) for x in range(1,10)]))   ","version":"Next","tagName":"h3"},{"title":"decorator try​","type":1,"pageTitle":"python","url":"/notes/python#decorator-try","content":" import functools def decorator_try(func): @functools.wraps(func) def wrapper(*args, **kwargs): try: return func(*args, **kwargs) except Exception as err: print(err) return err return wrapper   ","version":"Next","tagName":"h3"},{"title":"datetime​","type":1,"pageTitle":"python","url":"/notes/python#datetime","content":" pip install python-dateutil # datetime to timestamp import datetime d = datetime.date(2023, 1, 1) print(d) print(d.strftime(&quot;%s&quot;)) # timestamp to datetime from datetime import datetime timestamp = 1694691579999 dt_object = datetime.fromtimestamp(timestamp/1000) print(&quot;dt_object =&quot;, dt_object) # str to datetime from datetime import datetime s = &quot;20240110111532&quot; datetime_object = datetime.strptime(s, &quot;%Y%m%d%H%M%S&quot;) print(datetime_object) # yestoday from datetime import datetime, timedelta # days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0 yestoday = datetime.today() - timedelta(days=1) print(yestoday) from datetime import datetime from dateutil import parser format_time = datetime.now().strftime(&quot;%m/%d/%Y, %H:%M:%S&quot;) t = &quot;Thu, 9 Sep 2021 00:17:59&quot; result = parser.parse(t) print(result) print(type(result)) now = datetime.now() print((now - result).days) &gt;&gt;&gt; import arrow &gt;&gt;&gt; arrow.get('2013-05-11T21:23:58.970460+07:00') &lt;Arrow [2013-05-11T21:23:58.970460+07:00]&gt; &gt;&gt;&gt; utc = arrow.utcnow() &gt;&gt;&gt; utc &lt;Arrow [2013-05-11T21:23:58.970460+00:00]&gt; &gt;&gt;&gt; utc = utc.shift(hours=-1) &gt;&gt;&gt; utc &lt;Arrow [2013-05-11T20:23:58.970460+00:00]&gt; &gt;&gt;&gt; local = utc.to('US/Pacific') &gt;&gt;&gt; local &lt;Arrow [2013-05-11T13:23:58.970460-07:00]&gt; &gt;&gt;&gt; local.timestamp() 1368303838.970460 &gt;&gt;&gt; local.format() '2013-05-11 13:23:58 -07:00' &gt;&gt;&gt; local.format('YYYY-MM-DD HH:mm:ss ZZ') '2013-05-11 13:23:58 -07:00' &gt;&gt;&gt; local.humanize() 'an hour ago' &gt;&gt;&gt; local.humanize(locale='ko-kr') '한시간 전'   ","version":"Next","tagName":"h3"},{"title":"read big file​","type":1,"pageTitle":"python","url":"/notes/python#read-big-file","content":" with open(&quot;log.txt&quot;) as infile: for line in infile: do_something_with(line)   ","version":"Next","tagName":"h3"},{"title":"csv​","type":1,"pageTitle":"python","url":"/notes/python#csv","content":" import csv # read result = [] input_file = csv.DictReader(open(&quot;result.csv&quot;)) for row in input_file: result.append(row) print(result) # write dict my_dict = {&quot;test&quot;: 1, &quot;testing&quot;: 2} with open('mycsvfile.csv', 'w', encoding=&quot;utf-8-sig&quot;) as f: # You will need 'wb' mode in Python 2.x w = csv.DictWriter(f, my_dict.keys()) w.writeheader() w.writerow(my_dict) # write list result = [{&quot;test&quot;: 1, &quot;testing&quot;: 2}, {&quot;test&quot;: 1, &quot;testing&quot;: 2}] with open('mycsvfile.csv', 'w', encoding=&quot;utf-8-sig&quot;) as f: # You will need 'wb' mode in Python 2.x w = csv.DictWriter(f, result[0].keys()) w.writeheader() w.writerows(result)   ","version":"Next","tagName":"h3"},{"title":"execl​","type":1,"pageTitle":"python","url":"/notes/python#execl","content":" # write pip install pandas openpyxl # dict import pandas as pd d = [ {&quot;Column1&quot;: 1, &quot;Column2&quot;: 5}, {&quot;Column1&quot;: 2, &quot;Column2&quot;: 6}, {&quot;Column3&quot;: 3, &quot;Column4&quot;: 7}, {&quot;Column3&quot;: 4, &quot;Column4&quot;: 8}, ] df = pd.DataFrame.from_dict(d) print(df) df.to_excel('test.xlsx', header=True, index=False) # df.to_dict(orient=&quot;records&quot;) # list import pandas as pd Column1 = [1,2,3,4] Column2 = [5,6,7,8] df = pd.DataFrame.from_dict({'Column1':Column1,'Column2':Column2}) df.to_excel('test.xlsx', header=True, index=False) # read import pandas as pd df = pd.read_excel(&quot;example.xlsx&quot;, index_col=0) data_dict = df.to_dict(&quot;records&quot;) print(data_dict)   ","version":"Next","tagName":"h3"},{"title":"iterator​","type":1,"pageTitle":"python","url":"/notes/python#iterator","content":" def generate_iterator(): for i in range(10): yield i for i in generate_iterator(): print(i) num = generate_iterator() while True: try: print(next(num)) except StopIteration: print('stop') break   ","version":"Next","tagName":"h3"},{"title":"asyncio​","type":1,"pageTitle":"python","url":"/notes/python#asyncio","content":" import asyncio import time def now(): return time.time() async def do_some_work(x): print('Waiting: ', x) await asyncio.sleep(x) return 'Done after {}s'.format(x) start = now() coroutine1 = do_some_work(1) coroutine2 = do_some_work(2) coroutine3 = do_some_work(4) tasks = [ asyncio.ensure_future(coroutine1), asyncio.ensure_future(coroutine2), asyncio.ensure_future(coroutine3) ] loop = asyncio.get_event_loop() loop.run_until_complete(asyncio.wait(tasks)) for task in tasks: print('Task ret: ', task.result()) print('TIME: ', now() - start)   import asyncio async def task(id, delay): await asyncio.sleep(delay) return f&quot;结果{id}&quot; async def main(): # 定义任务列表 tasks = [task(1, 1), task(2, 0.5), task(3, 0.3)] # asyncio.gather 会按任务顺序返回结果 results = await asyncio.gather(*tasks) print(results) # 总是 [&quot;结果1&quot;, &quot;结果2&quot;, &quot;结果3&quot;] asyncio.run(main())   ","version":"Next","tagName":"h3"},{"title":"xmljson​","type":1,"pageTitle":"python","url":"/notes/python#xmljson","content":" import xmljson from lxml.etree import fromstring,tostring json.loads(json.dumps(xmljson.badgerfish.data(fromstring(con.encode()))))   ","version":"Next","tagName":"h3"},{"title":"mysql​","type":1,"pageTitle":"python","url":"/notes/python#mysql","content":" # install mysql-clients # in archlinux sudo pacman --noconfirm -S mysql-clients gcc pip install mysqlclient # mac brew install mysql-client echo 'export PATH=&quot;/usr/local/opt/mysql-client/bin:$PATH&quot;' &gt;&gt; ~/.bash_profile export PATH=&quot;/usr/local/opt/mysql-client/bin:$PATH&quot; pip install mysqlclient   ","version":"Next","tagName":"h3"},{"title":"转码​","type":1,"pageTitle":"python","url":"/notes/python#转码","content":" import os import chardet def trans(filename): print(&quot;file=====&quot;, filename) with open(f&quot;txt/{filename}&quot;, &quot;rb&quot;) as file: con = file.read() _char = chardet.detect(con)[&quot;encoding&quot;] print(&quot;char is &quot;, _char) if &quot;utf-8&quot; in _char or &quot;UTF-8&quot; in _char: cmd = f&quot;mv txt/{filename} result/{filename}&quot; else: cmd = f&quot;iconv -c -f {_char} -t UTF-8 txt/{filename} &gt; result/{filename}&quot; print(cmd) os.system(cmd) def main(): txts = os.listdir(&quot;txt&quot;) for txt in txts: if &quot;.txt&quot; not in txt: print(txt) continue try: trans(txt) except Exception as err: print(err) continue if __name__ == &quot;__main__&quot;: main()   ","version":"Next","tagName":"h3"},{"title":"省市分割​","type":1,"pageTitle":"python","url":"/notes/python#省市分割","content":" pip install cpca result = cpca.transform(&quot;xx省xx市xx区&quot;, pos_sensitive=True).to_dict(&quot;list&quot;)   ","version":"Next","tagName":"h3"},{"title":"spider 编码​","type":1,"pageTitle":"python","url":"/notes/python#spider-编码","content":" # response.encoding 从网页响应的header中，提取charset字段中的编码。若header中没有charset字段，则默认为ISO-8859-1编码模式，ISO-8859-1编码无法解析中文，这也是中文乱码的原因。 # response.apparent_encoding 从网页的内容中（html源码）中分析网页编码的方式。所以apparent_encoding比encoding更加准确，获取到的才是原网页的实际编码。 response.encoding = response.apparent_encoding print(response.encoding) print(response.apparent_encoding) html = etree.HTML(text) names = html.xpath(&quot;//tr//td//text()&quot;) names = [i.encode(&quot;iso-8859-1&quot;, &quot;ignore&quot;).decode(&quot;gb2312&quot;, &quot;ignore&quot;) for i in names]  ","version":"Next","tagName":"h3"},{"title":"Makefile","type":0,"sectionRef":"#","url":"/notes/python/makefile","content":"Makefile # Makefile for FastAPI Backend # Variables PYTHON := .venv/bin/python3 PIP := .venv/bin/pip UV := .venv/bin/uv UVICORN := .venv/bin/uvicorn APP := main:app HOST := 0.0.0.0 PORT := 8080 # Default target .PHONY: help help: @echo &quot;FastAPI Backend Makefile&quot; @echo &quot;============================&quot; @echo &quot;Available targets:&quot; @echo &quot; install - Install dependencies&quot; @echo &quot; start - Start the development server&quot; @echo &quot; format - Format code with black&quot; @echo &quot; help - Show this help message&quot; # Install dependencies .PHONY: install install: @if [ ! -d &quot;.venv&quot; ]; then \\ echo &quot;Creating virtual environment...&quot;; \\ python3.12 -m venv .venv; \\ echo &quot;Virtual environment created in .venv&quot;; \\ else \\ echo &quot;Virtual environment already exists.&quot;; \\ fi $(PIP) install -U pip uv @source .venv/bin/activate &amp;&amp; $(UV) pip install -r requirements.txt # dev the development server .PHONY: dev dev: @echo &quot;Starting FastAPI Backend...&quot; @echo &quot;Access the application at http://localhost:$(PORT)&quot; @echo &quot;API documentation: http://localhost:$(PORT)/docs&quot; @echo &quot;Press Ctrl+C to stop the server&quot; env OLLAMA_API_URL=http://localhost:11434 OLLAMA_MODEL=qwen3:14b $(UVICORN) $(APP) --host $(HOST) --port $(PORT) --reload # Start the development server .PHONY: start start: @echo &quot;Starting FastAPI Backend...&quot; @echo &quot;Access the application at http://localhost:$(PORT)&quot; @echo &quot;API documentation: http://localhost:$(PORT)/docs&quot; @echo &quot;Press Ctrl+C to stop the server&quot; env OLLAMA_API_URL=http://localhost:11434 OLLAMA_MODEL=qwen3:14b $(UVICORN) $(APP) --host $(HOST) --port $(PORT) # Run linting (if linting tools are installed) .PHONY: lint lint: @source .venv/bin/activate &amp;&amp; flake8 --max-line-length 120 --exclude .venv # Run formatting (if formatting tools are installed) .PHONY: format format: @source .venv/bin/activate &amp;&amp; black -l 120 . ","keywords":"","version":"Next"},{"title":"multiprocessing","type":0,"sectionRef":"#","url":"/notes/python/multiprocessing","content":"","keywords":"","version":"Next"},{"title":"example​","type":1,"pageTitle":"multiprocessing","url":"/notes/python/multiprocessing#example","content":" import multiprocessing def f(msg): print(msg) return multiprocessing.current_process().name + '-' + msg def func1(): pool = multiprocessing.Pool(processes=multiprocessing.cpu_count()) results = [] for i in range(10): msg = &quot;hello %d&quot; % (i) results.append(pool.apply_async(f, (msg, ))) pool.close() pool.join() print(&quot;Sub-process(es) done.&quot;) for res in results: print(res.get()) def func2(): from multiprocessing import Pool # with Pool(5) as p: with Pool(processes=multiprocessing.cpu_count()) as p: print(p.map(f, [str(i) for i in range(9)])) if __name__ == &quot;__main__&quot;: # func1() func2()  ","version":"Next","tagName":"h2"},{"title":"ocr","type":0,"sectionRef":"#","url":"/notes/python/ocr","content":"ocr https://github.com/breezedeus/cnocr","keywords":"","version":"Next"},{"title":"mongo","type":0,"sectionRef":"#","url":"/notes/python/mongo","content":"","keywords":"","version":"Next"},{"title":"MongoDB 语法​","type":1,"pageTitle":"mongo","url":"/notes/python/mongo#mongodb-语法","content":" db.users.find({ create_at: { $exists: true } }) db.users.find() select * from users db.users.find({&quot;age&quot; : 27}) select * from users where age = 27 db.users.find({&quot;username&quot; : &quot;joe&quot;, &quot;age&quot; : 27}) select * from users where &quot;username&quot; = &quot;joe&quot; and age = 27 db.users.find({}, {&quot;username&quot; : 1, &quot;email&quot; : 1}) select username, email from users db.users.find({}, {&quot;username&quot; : 1, &quot;_id&quot; : 0}) // no case // 即时加上了列筛选，_id也会返回；必须显式的阻止_id返回 db.users.find({&quot;age&quot; : {&quot;$gte&quot; : 18, &quot;$lte&quot; : 30}}) select * from users where age &gt;=18 and age &lt;= 30 // $lt(&lt;) $lte(&lt;=) $gt(&gt;) $gte(&gt;=) db.users.find({&quot;username&quot; : {&quot;$ne&quot; : &quot;joe&quot;}}) select * from users where username &lt;&gt; &quot;joe&quot; db.users.find({&quot;ticket_no&quot; : {&quot;$in&quot; : [725, 542, 390]}}) select * from users where ticket_no in (725, 542, 390) db.users.find({&quot;ticket_no&quot; : {&quot;$nin&quot; : [725, 542, 390]}}) select * from users where ticket_no not in (725, 542, 390) db.users.find({&quot;$or&quot; : [{&quot;ticket_no&quot; : 725}, {&quot;winner&quot; : true}]}) select * form users where ticket_no = 725 or winner = true db.users.find({&quot;id_num&quot; : {&quot;$mod&quot; : [5, 1]}}) select * from users where (id_num mod 5) = 1 db.users.find({&quot;$not&quot;: {&quot;age&quot; : 27}}) select * from users where not (age = 27) db.users.find({&quot;username&quot; : {&quot;$in&quot; : [null], &quot;$exists&quot; : true}}) select * from users where username is null // 如果直接通过find({&quot;username&quot; : null})进行查询，那么连带&quot;没有username&quot;的纪录一并筛选出来 db.users.find({&quot;name&quot; : /joey?/i}) // 正则查询，value是符合PCRE的表达式 db.food.find({fruit : {$all : [&quot;apple&quot;, &quot;banana&quot;]}}) // 对数组的查询, 字段fruit中，既包含&quot;apple&quot;,又包含&quot;banana&quot;的纪录 db.food.find({&quot;fruit.2&quot; : &quot;peach&quot;}) // 对数组的查询, 字段fruit中，第3个(从0开始)元素是peach的纪录 db.food.find({&quot;fruit&quot; : {&quot;$size&quot; : 3}}) // 对数组的查询, 查询数组元素个数是3的记录，$size前面无法和其他的操作符复合使用 db.users.findOne(criteria, {&quot;comments&quot; : {&quot;$slice&quot; : 10}}) // 对数组的查询，只返回数组comments中的前十条，还可以{&quot;$slice&quot; : -10}， {&quot;$slice&quot; : [23, 10]}; 分别返回最后10条，和中间10条 db.people.find({&quot;name.first&quot; : &quot;Joe&quot;, &quot;name.last&quot; : &quot;Schmoe&quot;}) // 嵌套查询 db.blog.find({&quot;comments&quot; : {&quot;$elemMatch&quot; : {&quot;author&quot; : &quot;joe&quot;, &quot;score&quot; : {&quot;$gte&quot; : 5}}}}) // 嵌套查询，仅当嵌套的元素是数组时使用, db.foo.find({&quot;$where&quot; : &quot;this.x + this.y == 10&quot;}) // 复杂的查询，$where当然是非常方便的，但效率低下。对于复杂查询，考虑的顺序应当是 正则 -&gt; MapReduce -&gt; $where db.foo.find({&quot;$where&quot; : &quot;function() { return this.x + this.y == 10; }&quot;}) // $where可以支持javascript函数作为查询条件 db.foo.find().sort({&quot;x&quot; : 1}).limit(1).skip(10); // 返回第(10, 11]条，按&quot;x&quot;进行排序; 三个limit的顺序是任意的，应该尽量避免skip中使用large-number   ","version":"Next","tagName":"h2"},{"title":"Mac 上导出 MongoDB 数据​","type":1,"pageTitle":"mongo","url":"/notes/python/mongo#mac-上导出-mongodb-数据","content":" # Mac install mongo tools brew tap mongodb/brew brew install mongodb-database-tools # in arch: yay -S --noconfirm mongodb-tools-bin ## export mongoexport --host 127.0.0.1:27017 -u user -p passwd --authenticationDatabase admin --db dbname -c cname --forceTableScan -o res.json mongoexport --uri=mongodb://username:password@host:27017/ --authenticationDatabase=admin -d db -c collection -o result.json ## import mongoimport --uri=mongodb://username:password@host:27017/ --authenticationDatabase=admin -d db -c collection --file=result.json   ","version":"Next","tagName":"h2"},{"title":"Python 调用 MongoDB​","type":1,"pageTitle":"mongo","url":"/notes/python/mongo#python-调用-mongodb","content":" import pymongo def connect_mongo(uri, db, tablename): myclient = pymongo.MongoClient(uri) mydb = myclient[db] mycol = mydb[tablename] return mycol, myclient class MongoAPI: def __init__(self, db=&quot;db&quot;, tablename=&quot;tablename&quot;): self.uri = “mongodb://user:password@host:27017/” self.myclient = pymongo.MongoClient(self.uri) mydb = self.myclient[db] self.mycol = mydb[tablename] # values = {&quot;abr&quot;: 1} def query(self, myquery={&quot;name&quot;: &quot;somename&quot;}, values=None, _limit=10): if _limit: result = [q for q in self.mycol.find(query, values).limit(_limit)] else: result = [q for q in self.mycol.find(query, values)] return result def save(self, data): try: self.mycol.insert_one(data) return True except Exception as err: if &quot;duplicate key error collection&quot; in str(err): print(&quot;saved &quot;, data[&quot;_id&quot;]) else: print(err) return False # myquery = {&quot;asin&quot;: &quot;B07K36J4VP&quot;} # myquery = { &quot;name&quot;: { &quot;$regex&quot;: &quot;^F&quot; } } # newvalues = {&quot;$set&quot;: {&quot;comments&quot;: &quot;values&quot;}} def update(self, myquery, newvalues): self.mycol.update_one(myquery, newvalues, upsert=False) logger.info(f&quot;update success {myquery}&quot;) return True def quit(self): self.myclient.close()  ","version":"Next","tagName":"h2"},{"title":"pip","type":0,"sectionRef":"#","url":"/notes/python/pip","content":"","keywords":"","version":"Next"},{"title":"virtualenv​","type":1,"pageTitle":"pip","url":"/notes/python/pip#virtualenv","content":" python3 -m venv some_dir # (sudo) pip install virtualenv # virtualenv -p /usr/bin/python3.7 ~/.virtualenv/py3 # pip freeze &gt; requirements.txt   ","version":"Next","tagName":"h3"},{"title":"pip.conf config mirror​","type":1,"pageTitle":"pip","url":"/notes/python/pip#pipconf-config-mirror","content":" # 一次 pip install fastapi -i https://pypi.tuna.tsinghua.edu.cn/simple # 全局 # 清华源 pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple # 阿里源 pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/ # 腾讯源 pip config set global.index-url http://mirrors.cloud.tencent.com/pypi/simple # 豆瓣源 pip config set global.index-url http://pypi.douban.com/simple/ # or # linux:`~/.pip/pip.conf` # windows:`%HOMEPATH%\\pip\\pip.ini）` [global] index-url = http://mirrors.aliyun.com/pypi/simple/ [install] trusted-host=mirrors.aliyun.com # locale.Error: unsupported locale setting export LC_ALL=C   ","version":"Next","tagName":"h3"},{"title":"offline download and install​","type":1,"pageTitle":"pip","url":"/notes/python/pip#offline-download-and-install","content":" pip download &lt;package_name&gt; -d &lt;download_directory&gt; pip install --no-index --find-links=&lt;download_directory&gt; &lt;package_name&gt; pip download -r requirements.txt -d ./packages pip install --no-index --find-links=./packages -r requirements.txt   ","version":"Next","tagName":"h2"},{"title":"uv​","type":1,"pageTitle":"pip","url":"/notes/python/pip#uv","content":" # ~/.config/uv/uv.toml [[index]] url = &quot;https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/&quot; default = true   ","version":"Next","tagName":"h2"},{"title":"poetry​","type":1,"pageTitle":"pip","url":"/notes/python/pip#poetry","content":" ","version":"Next","tagName":"h2"},{"title":"set mirror​","type":1,"pageTitle":"pip","url":"/notes/python/pip#set-mirror","content":" poetry config repositories.pypi https://mirrors.aliyun.com/pypi/simple/ poetry config --list # add to pyproject.toml [[tool.poetry.source]] name = &quot;aliyun&quot; url = &quot;https://mirrors.aliyun.com/pypi/simple/&quot;   ","version":"Next","tagName":"h3"},{"title":"pyproject.toml to requirements.txt​","type":1,"pageTitle":"pip","url":"/notes/python/pip#pyprojecttoml-to-requirementstxt","content":" pip install pip-tools python -m piptools compile -o requirements.txt pyproject.toml pip install -r requirements.txt   ","version":"Next","tagName":"h3"},{"title":"磁盘空间不足​","type":1,"pageTitle":"pip","url":"/notes/python/pip#磁盘空间不足","content":" export TMPDIR=/some_hardisk/tmp  ","version":"Next","tagName":"h2"},{"title":"opencv","type":0,"sectionRef":"#","url":"/notes/python/opencv","content":"","keywords":"","version":"Next"},{"title":"替换视频背景​","type":1,"pageTitle":"opencv","url":"/notes/python/opencv#替换视频背景","content":" import os import sys from datetime import datetime from itertools import cycle, islice import cv2 import numpy as np def addimage(origin_pic, background_pic): # 照片读取 # img1 = cv2.imread(&quot;./1-0002.png&quot;) img1 = cv2.imread(origin_pic) print(origin_pic, img1.shape) height, width, channels = img1.shape img2 = cv2.imread(background_pic) img2 = cv2.resize(img2, dsize=(width, height)) # 建立窗口 cv2.namedWindow(&quot;task&quot;) # 设置颜色提取阈值，绿色 color_dist = {'green': {'Lower': np.array([26, 104, 85]), 'Upper': np.array([100, 255, 255])}} # 将RGB图片转换为HSV图像 hsv = cv2.cvtColor(img1, cv2.COLOR_RGB2HSV) background_mask = cv2.inRange(hsv, color_dist['green']['Lower'], color_dist['green']['Upper']) person_mask = ~background_mask # 将人像进行mask处理，得到需要添加的背景 scenic_img = cv2.bitwise_and(img2, img2, mask=background_mask) # mask只有0和1，得到去除绿色背景后的人像 person_img = cv2.bitwise_and(img1, img1, mask=person_mask) # result = cv2.add(scenic_img, person_img) # 通过调节alpha实现背景透明度的调节 alpha_img = cv2.addWeighted(scenic_img, 0.7, person_img, 1, 0) # cv2.imshow('lena', alpha_img) res_file = f'result/{origin_pic.split(&quot;/&quot;)[-1]}' print(res_file) if not os.path.exists('result'): os.system('mkdir result') cv2.imwrite(res_file, alpha_img) def pre_run(): temp_dirs = ['pictures', 'background', 'result'] for td in temp_dirs: if os.path.exists(td): cmd = f'rm -rf {td}/*.png' else: cmd = f'mkdir {td}' os.system(cmd) def main(origin_mp4, background_mp4): now = datetime.now().strftime(&quot;%Y%m%d-%H%M%S&quot;) print(now) # now = '20240907-134406' pre_run() cmds = [f'ffmpeg -i {origin_mp4} pictures/op_%04d.png', f'ffmpeg -i {origin_mp4} -vn -ar 44100 -ab 128k -f mp3 output_{now}.mp3 -y', # f'ffmpeg -i {origin_mp4} -f mp3 -vn temp.mp3', f'ffmpeg -i {background_mp4} background/op_%04d.png', ] for cmd in cmds: os.system(cmd) origin_pics = os.listdir('pictures') origin_pics.sort() background_pics = os.listdir('background') background_pics.sort() bg_extended = list(islice(cycle(background_pics), len(origin_pics))) # print('bg_extended: ', bg_extended) for i in range(len(origin_pics)): addimage(f'pictures/{origin_pics[i]}', f'background/{bg_extended[i]}') cmds = [f'ffmpeg -framerate 30 -i result/op_%04d.png -c:v libx264 -r 30 temp_{now}.mp4 -y', f'ffmpeg -i ./temp_{now}.mp4 -i ./output_{now}.mp3 -c copy -map 0:v:0 -map 1:a:0 -shortest output_{now}.mp4 -y'] for cmd in cmds: os.system(cmd) if __name__ == &quot;__main__&quot;: args = sys.argv[:] main(args[1], args[2])  ","version":"Next","tagName":"h2"},{"title":"sql","type":0,"sectionRef":"#","url":"/notes/python/sql","content":"sql select distinct column1, column2 from some_table; SELECT name, CASE WHEN (age &gt; 60) THEN '老同学' WHEN (age &gt; 20) THEN '年轻' ELSE '小同学' END AS age_level FROM student # 统计学生表中的班级编号（class_id）和每个班级的平均成绩（avg_score） SELECT class_id, AVG(score) AS avg_score FROM student GROUP BY class_id; # 统计学生表中班级的总成绩超过 150 分的班级编号（class_id）和总成绩（total_score） SELECT class_id, SUM(score) AS total_score FROM student GROUP BY class_id HAVING SUM(score) &gt; 150; select s.name student_name, s.age student_age, s.class_id class_id, c.name class_name, c.level class_level from student s join class c on s.class_id = c.id; # 根据字段name 选择重复数据 WITH ranked_scores AS ( SELECT name, score, ROW_NUMBER() OVER (PARTITION BY name ) AS rn FROM public.score ) SELECT name, score FROM ranked_scores WHERE rn = 1; ","keywords":"","version":"Next"},{"title":"settings.py","type":0,"sectionRef":"#","url":"/notes/python/settings","content":"","keywords":"","version":"Next"},{"title":"settings.py example​","type":1,"pageTitle":"settings.py","url":"/notes/python/settings#settingspy-example","content":" # settings.py # pip install dynaconf loguru import os from loguru import logger from dynaconf import Dynaconf BASE_DIR = os.path.abspath(os.path.dirname(__file__)) log_file_path = os.path.join(BASE_DIR, &quot;logs/stdout.log&quot;) err_log_file_path = os.path.join(BASE_DIR, &quot;logs/error.log&quot;) logger.add( log_file_path, format=&quot;{process} {thread} {time:YYYY.MM.DD HH.mm.ss} {level}.{file}.{name}.{module}.{line} {message}&quot;, rotation=&quot;100 MB&quot;, colorize=True, enqueue=True, backtrace=True, diagnose=True, level=&quot;INFO&quot;, ) logger.add( err_log_file_path, format=&quot;{time:YYYY.MM.DD HH.mm.ss} {level}.{file}.{name}.{module}.{line} {message}&quot;, rotation=&quot;100 MB&quot;, level=&quot;ERROR&quot;, colorize=True, enqueue=True, backtrace=True, diagnose=True, ) Config = Dynaconf(settings_files=[&quot;.secrets.toml&quot;]) print(Config.__dict__) print(Config.redis_ip)   ","version":"Next","tagName":"h2"},{"title":"settings.py(old)​","type":1,"pageTitle":"settings.py","url":"/notes/python/settings#settingspyold","content":" # pip install python-dotenv pyyaml loguru import os import sys import toml import yaml from loguru import logger from dotenv import load_dotenv BASE_DIR = os.path.abspath(os.path.dirname(__file__)).rstrip(&quot;/common&quot;) log_file_path = os.path.join(BASE_DIR, &quot;logs/stdout.log&quot;) err_log_file_path = os.path.join(BASE_DIR, &quot;logs/error.log&quot;) logger.add( log_file_path, format=&quot;{process} {thread} {time:YYYY.MM.DD HH.mm.ss} {level}.{file}.{name}.{module}.{line} {message}&quot;, rotation=&quot;100 MB&quot;, colorize=True, enqueue=True, backtrace=True, diagnose=True, level=&quot;INFO&quot;, ) logger.add( err_log_file_path, format=&quot;{time:YYYY.MM.DD HH.mm.ss} {level}.{file}.{name}.{module}.{line} {message}&quot;, rotation=&quot;100 MB&quot;, level=&quot;ERROR&quot;, colorize=True, enqueue=True, backtrace=True, diagnose=True, ) class SettingsMeta: def __init__(self, _file=None): self.file = _file # read config.yaml def read_yaml(self, key, file=&quot;settings.yaml&quot;): if os.path.exists(file): with open(file, &quot;r&quot;) as f: con = yaml.safe_load(f) if con: # logger.debug(con) return con.get(key) # read .secrets.toml def read_toml(self, key, file=&quot;.secrets.toml&quot;): if os.path.exists(file): con = toml.load(file) if con: # logger.debug(con) return con.get(key) # read .env def read_env(self, key): load_dotenv() return os.getenv(key) def __getattr__(self, key): result = None file_function = { &quot;yaml&quot;: self.read_yaml, &quot;toml&quot;: self.read_toml, &quot;env&quot;: self.read_env, } if self.file: file_type = self.file.split(&quot;.&quot;) func = file_function.get(file_type[-1]) if func: return func(key) else: return functions = [self.read_yaml, self.read_toml, self.read_env] for ft in functions: result = ft(key) if result: return result return result settings = SettingsMeta()  ","version":"Next","tagName":"h2"},{"title":"Windows","type":0,"sectionRef":"#","url":"/notes/windows","content":"","keywords":"","version":"Next"},{"title":"ISO​","type":1,"pageTitle":"Windows","url":"/notes/windows#iso","content":" download from microsoft magnet name\tversion\ttime\tmagnet\tmd5Windows 10\tbusiness editions\t2023-01-17\taddress\tF108751F073BB69BDC8AE01EED568112 Windows 10\tconsumer editions\t2023-01-17\taddress\tF7F102E2F2E35644486F6666A718C1A7 Windows 11\tbusiness editions\t2023-01-17\taddress\tF92D309E1DEB81A2FA7A521257250FDA Windows 11\tconsumer editions\t2023-01-17\taddress\t59a06042f6abb7910cf5c06480b6d3ab download tool: https://github.com/agalwood/Motrix/releases others: https://github.com/Atlas-OS/Atlas  ","version":"Next","tagName":"h2"},{"title":"激活​","type":1,"pageTitle":"Windows","url":"/notes/windows#激活","content":" slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX slmgr /skms kms.03k.org slmgr /ato   ","version":"Next","tagName":"h2"},{"title":"Autologon​","type":1,"pageTitle":"Windows","url":"/notes/windows#autologon","content":" addressdownload  ","version":"Next","tagName":"h2"},{"title":"开机启动文件夹 start​","type":1,"pageTitle":"Windows","url":"/notes/windows#开机启动文件夹-start","content":" win+R shell:Common StartupC：\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp  ","version":"Next","tagName":"h2"},{"title":"复制字符串到剪切板​","type":1,"pageTitle":"Windows","url":"/notes/windows#复制字符串到剪切板","content":" echo Hello | clip   ","version":"Next","tagName":"h2"},{"title":"开机启动 退出CMD窗口​","type":1,"pageTitle":"Windows","url":"/notes/windows#开机启动-退出cmd窗口","content":" @echo off if &quot;%1&quot; == &quot;h&quot; goto begin mshta vbscript:createobject(&quot;wscript.shell&quot;).run(&quot;&quot;&quot;%~nx0&quot;&quot; h&quot;,0)(window.close)&amp;&amp;exit :begin REM taskkill.exe /im clash-windows-amd64.exe /f curl https://example.com -o config.yaml .\\clash-windows-amd64.exe -f .\\config.yaml   ","version":"Next","tagName":"h2"},{"title":"更改程序默认按照路径​","type":1,"pageTitle":"Windows","url":"/notes/windows#更改程序默认按照路径","content":" 设置 系统 存储 更新内容的保存位置  ","version":"Next","tagName":"h2"},{"title":"更改录屏保存位置​","type":1,"pageTitle":"Windows","url":"/notes/windows#更改录屏保存位置","content":" 视频 属性 移动  ","version":"Next","tagName":"h2"},{"title":"ssh server​","type":1,"pageTitle":"Windows","url":"/notes/windows#ssh-server","content":" ","version":"Next","tagName":"h2"},{"title":"和android共享文件​","type":1,"pageTitle":"Windows","url":"/notes/windows#和android共享文件","content":" https://github.com/localsend/localsend/releases   ","version":"Next","tagName":"h2"},{"title":"优化工具 Dism++​","type":1,"pageTitle":"Windows","url":"/notes/windows#优化工具-dism","content":" ","version":"Next","tagName":"h2"},{"title":"最新Microsoft Visual C++ 可再发行版本​","type":1,"pageTitle":"Windows","url":"/notes/windows#最新microsoft-visual-c-可再发行版本","content":"","version":"Next","tagName":"h2"},{"title":"WSL","type":0,"sectionRef":"#","url":"/notes/windows/wsl","content":"","keywords":"","version":"Next"},{"title":"常用命令​","type":1,"pageTitle":"WSL","url":"/notes/windows/wsl#常用命令","content":" wsl -l -v wsl --shutdown wsl --update wsl --install -d archlinux --name Arch --location D:\\WSLOS\\Arch https://geo.mirror.pkgbuild.com/wsl/latest/ wsl --install --from-file C:\\Users\\用户名\\Downloads\\archlinux-2025.04.01.121271.wsl wsl --install --from-file E:\\Downloads\\archlinux.wsl --name Arch --location E:\\wares\\Arch   ","version":"Next","tagName":"h2"},{"title":"限制CPU和内存​","type":1,"pageTitle":"WSL","url":"/notes/windows/wsl#限制cpu和内存","content":" # ~/.wslconfig [wsl2] processors=2 memory=2GB swap=2GB   ","version":"Next","tagName":"h2"},{"title":"指定用户登录​","type":1,"pageTitle":"WSL","url":"/notes/windows/wsl#指定用户登录","content":" # /etc/wsl.conf [user] default=username   ","version":"Next","tagName":"h2"},{"title":"备忘​","type":1,"pageTitle":"WSL","url":"/notes/windows/wsl#备忘","content":" echo &quot;Server = https://mirrors.aliyun.com/archlinux/\\$repo/os/\\$arch&quot; &gt; /etc/pacman.d/mirrorlist # softwares which sudo git openssh python3 bc gcc # update /etc/sudoers useradd xxx passwd xxx mkdir /home/xxx chown -R xxx:xxx /home/xxx  ","version":"Next","tagName":"h2"},{"title":"mitmproxy","type":0,"sectionRef":"#","url":"/notes/python/mitmproxy","content":"","keywords":"","version":"Next"},{"title":"install​","type":1,"pageTitle":"mitmproxy","url":"/notes/python/mitmproxy#install","content":" pip install mitmproxy # Mac open ~/.mitmproxy/ 安装 mitmproxy-ca.pem 设置信任该证书 # open mitm.it after set proxy mitmproxy --http2 --listen-host 0.0.0.0 --listen-port 8888 -s mitm_test.py   ","version":"Next","tagName":"h2"},{"title":"API​","type":1,"pageTitle":"mitmproxy","url":"/notes/python/mitmproxy#api","content":" # http.HTTPFlow 实例 flow flow.request.headers #获取所有头信息，包含Host、User-Agent、Content-type等字段 flow.request.url #完整的请求地址，包含域名及请求参数，但是不包含放在body里面的请求参数 flow.request.pretty_url #同flow.request.url目前没看出什么差别 flow.request.host #域名 flow.request.method #请求方式。POST、GET等 flow.request.scheme #什么请求 ，如https flow.request.path # 请求的路径，url除域名之外的内容 flow.request.get_text() #请求中body内容，有一些http会把请求参数放在body里面，那么可通过此方法获取，返回字典类型 flow.request.query #返回MultiDictView类型的数据，url直接带的键值参数 flow.request.get_content()#bytes,结果如flow.request.get_text() flow.request.raw_content #bytes,结果如flow.request.get_content() flow.request.urlencoded_form #MultiDictView，content-type：application/x-www-form-urlencoded时的请求参数，不包含url直接带的键值参数 flow.request.multipart_form #MultiDictView，content-type：multipart/form-data 时的请求参数，不包含url直接带的键值参数 以上均为获取request信息的一些常用方法，对于response，同理 flow.response.status_code #状态码 flow.response.text#返回内容，已解码 flow.response.content #返回内容，二进制 flow.response.setText()#修改返回内容，不需要转码   ","version":"Next","tagName":"h2"},{"title":"example.py​","type":1,"pageTitle":"mitmproxy","url":"/notes/python/mitmproxy#examplepy","content":" # example def response(flow): if &quot;some url&quot; in flow.request.url: print(&quot;[*] Request: {}&quot;.format(flow.request.url)) print(&quot;[*] Response: {}&quot;.format(flow.response.text))   charles  package main import ( &quot;bytes&quot; &quot;encoding/binary&quot; &quot;fmt&quot; &quot;math/rand&quot; &quot;time&quot; ) const ( rounds = 12 roundKeys = 2 * (rounds + 1) ) func main() { rand.Seed(time.Now().UnixNano()) name := &quot;mac&quot; fmt.Println(&quot;name:&quot;, name, &quot; key:&quot;, crack(name)) } func crack(text string) string { name := []byte(text) length := len(name) + 4 padded := ((-length) &amp; (8 - 1)) + length bs := make([]byte, 4) binary.BigEndian.PutUint32(bs, uint32(len(name))) buff := bytes.Buffer{} buff.Write(bs) buff.Write(name) var ckName int64 = 0x7a21c951691cd470 var ckKey int64 = -5408575981733630035 ck := newCkCipher(ckName) outBuff := bytes.Buffer{} for i := 0; i &lt; padded; i += 8 { bf := buff.Bytes()[i : i+8] buf := bytes.NewBuffer(bf) var nowVar int64 if err := binary.Read(buf, binary.BigEndian, &amp;nowVar); err != nil { panic(err) } dd := ck.encrypt(nowVar) outBuff.WriteByte(byte(dd &gt;&gt; 56)) outBuff.WriteByte(byte(dd &gt;&gt; 48)) outBuff.WriteByte(byte(dd &gt;&gt; 40)) outBuff.WriteByte(byte(dd &gt;&gt; 32)) outBuff.WriteByte(byte(dd &gt;&gt; 24)) outBuff.WriteByte(byte(dd &gt;&gt; 16)) outBuff.WriteByte(byte(dd &gt;&gt; 8)) outBuff.WriteByte(byte(dd)) } var n int32 for _, b := range outBuff.Bytes() { n = rotateLeft(n^int32(int8(b)), 0x3) } prefix := n ^ 0x54882f8a suffix := rand.Int31() in := int64(prefix) &lt;&lt; 32 s := int64(suffix) switch suffix &gt;&gt; 16 { case 0x0401: case 0x0402: case 0x0403: in |= s break default: in |= 0x01000000 | (s &amp; 0xffffff) break } out := newCkCipher(ckKey).decrypt(in) var n2 int64 for i := 56; i &gt;= 0; i -= 8 { n2 ^= int64((uint64(in) &gt;&gt; i) &amp; 0xff) } vv := int32(n2 &amp; 0xff) if vv &lt; 0 { vv = -vv } return fmt.Sprintf(&quot;%02x%016x&quot;, vv, uint64(out)) } type ckCipher struct { rk [roundKeys]int32 } func newCkCipher(ckKey int64) ckCipher { ck := ckCipher{} var ld [2]int32 ld[0] = int32(ckKey) ld[1] = int32(uint64(ckKey) &gt;&gt; 32) ck.rk[0] = -1209970333 for i := 1; i &lt; roundKeys; i++ { ck.rk[i] = ck.rk[i-1] + -1640531527 } var a, b int32 var i, j int for k := 0; k &lt; 3*roundKeys; k++ { ck.rk[i] = rotateLeft(ck.rk[i]+(a+b), 3) a = ck.rk[i] ld[j] = rotateLeft(ld[j]+(a+b), a+b) b = ld[j] i = (i + 1) % roundKeys j = (j + 1) % 2 } return ck } func (ck ckCipher) encrypt(in int64) int64 { a := int32(in) + ck.rk[0] b := int32(uint64(in)&gt;&gt;32) + ck.rk[1] for r := 1; r &lt;= rounds; r++ { a = rotateLeft(a^b, b) + ck.rk[2*r] b = rotateLeft(b^a, a) + ck.rk[2*r+1] } return pkLong(a, b) } func (ck ckCipher) decrypt(in int64) int64 { a := int32(in) b := int32(uint64(in) &gt;&gt; 32) for i := rounds; i &gt; 0; i-- { b = rotateRight(b-ck.rk[2*i+1], a) ^ a a = rotateRight(a-ck.rk[2*i], b) ^ b } b -= ck.rk[1] a -= ck.rk[0] return pkLong(a, b) } func rotateLeft(x int32, y int32) int32 { return int32(x&lt;&lt;(y&amp;(32-1))) | int32(uint32(x)&gt;&gt;(32-(y&amp;(32-1)))) } func rotateRight(x int32, y int32) int32 { return int32(uint32(x)&gt;&gt;(y&amp;(32-1))) | int32(x&lt;&lt;(32-(y&amp;(32-1)))) } func pkLong(a int32, b int32) int64 { return (int64(a) &amp; 0xffffffff) | (int64(b) &lt;&lt; 32) }  ","version":"Next","tagName":"h2"},{"title":"selenium","type":0,"sectionRef":"#","url":"/notes/python/selenium","content":"","keywords":"","version":"Next"},{"title":"selenium​","type":1,"pageTitle":"selenium","url":"/notes/python/selenium#selenium-1","content":" import random from selenium import webdriver from time import sleep from bs4 import BeautifulSoup as BS options = webdriver.ChromeOptions() UA = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.128 Safari/537.36' options.add_argument(f'user-agent={UA}') options.add_experimental_option(&quot;excludeSwitches&quot;, [&quot;enable-automation&quot;]) options.add_experimental_option('useAutomationExtension', False) # 没有配置环境变量的话需要填写Chromedriver的路径：webdriver.Chrome(executable_path=&quot;***&quot;) driver = webdriver.Chrome(options=options) driver.maximize_window() # 去掉window.navigator.webdriver字段，防止被检测出是使用selenium driver.execute_cdp_cmd(&quot;Page.addScriptToEvaluateOnNewDocument&quot;, { &quot;source&quot;: &quot;&quot;&quot; Object.defineProperty(navigator, 'webdriver', { get: () =&gt; undefined }) &quot;&quot;&quot; })   ","version":"Next","tagName":"h3"},{"title":"selenium-wire​","type":1,"pageTitle":"selenium","url":"/notes/python/selenium#selenium-wire","content":" import os import time import random from urllib.parse import quote from seleniumwire.utils import decode from seleniumwire import webdriver from user_agent import generate_user_agent from loguru import logger def selenium_wire_search(shopname, city): if os.path.exists(f&quot;logs/{city}/{shopname}.json&quot;): print(f&quot;crawled {shopname} {city}&quot;) return False cities = {&quot;beijing&quot;: &quot;2&quot;, &quot;shanghai&quot;: &quot;1&quot;, &quot;guangzhou&quot;: &quot;4&quot;, &quot;shenzhen&quot;: &quot;7&quot;} # driver = webdriver.Chrome() options = webdriver.ChromeOptions() UA = generate_user_agent(device_type=&quot;smartphone&quot;) options.add_argument(f&quot;user-agent={UA}&quot;) driver = webdriver.Chrome(chrome_options=options) # Go to the Google home page shopname_url = quote(shopname, &quot;utf-8&quot;) url = f&quot;https://m.dianping.com/shoplist/{cities[city]}/search?from=m_search&amp;keyword={shopname_url}&quot; driver.get(url) # Access requests via the `requests` attribute for request in driver.requests: if request.response: if &quot;module&quot; in request.url: print(request.response.status_code) print(request.params, request.body) print(request.response.headers) # print(request.ws_messages) # print(request.body) data = request.response.body try: if &quot;Content-Encoding&quot; not in request.response.headers.keys(): logger.warning(&quot;this request is error&quot;) continue body = decode(data, request.response.headers.get(&quot;Content-Encoding&quot;, &quot;gzip&quot;)) print(len(body)) if not os.path.exists(f&quot;logs/{city}&quot;): os.mkdir(f&quot;logs/{city}&quot;) with open(f&quot;logs/{city}/{shopname}.json&quot;, &quot;w&quot;) as file: file.write(body.decode(&quot;utf-8&quot;)) logger.info(f&quot;save success {shopname} {city}&quot;) break except Exception as err: logger.error(err) driver.quit() return True def main(): with open(&quot;logs/dianping_shops.txt&quot;, &quot;r&quot;, encoding=&quot;utf-8&quot;) as file: shops = [s.strip() for s in file.readlines()] cities = {&quot;beijing&quot;: &quot;2&quot;, &quot;shanghai&quot;: &quot;1&quot;, &quot;guangzhou&quot;: &quot;4&quot;, &quot;shenzhen&quot;: &quot;7&quot;} for shopname in shops: print(shopname) for city in list(cities.keys()): temp = selenium_wire_search(shopname, city) if temp: time_sleep = random.randint(5, 10) else: time_sleep = 0 print(time_sleep) time.sleep(time_sleep) if __name__ == &quot;__main__&quot;: main()  ","version":"Next","tagName":"h3"}],"options":{"id":"default"}}